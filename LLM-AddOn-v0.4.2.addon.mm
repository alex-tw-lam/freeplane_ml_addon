<map version="freeplane 1.12.1">
<!--To view this file, download free mind mapping software Freeplane from https://www.freeplane.org -->
<node TEXT="Prompt-LLM-AddOn" FOLDED="false" ID="ID_696401721" CREATED="1685111823904" MODIFIED="1743866204585" LINK="https://github.com/barrymac/freeplane_openai_addon" BACKGROUND_COLOR="#97c7dc" STYLE="oval" MAX_WIDTH="20 cm">
<font SIZE="16" BOLD="true" ITALIC="true"/>
<hook NAME="MapStyle">
    <properties show_icon_for_attributes="true" edgeColorConfiguration="#808080ff,#ff0000ff,#0000ffff,#00ff00ff,#ff00ffff,#00ffffff,#7c0000ff,#00007cff,#007c00ff,#7c007cff,#007c7cff,#7c7c00ff" mapUsesOwnSaveOptions="true" save_modification_times="false" show_tags="UNDER_NODES" save_last_visited_node="default" show_note_icons="true" associatedTemplateLocation="template:/standard-1.6.mm" save_folding="save_folding_if_map_is_changed" fit_to_viewport="false" show_icons="BESIDE_NODES"/>
    <tags category_separator="::"/>

<map_styles>
<stylenode LOCALIZED_TEXT="styles.root_node" STYLE="oval" UNIFORM_SHAPE="true" VGAP_QUANTITY="24 pt">
<font SIZE="24"/>
<stylenode LOCALIZED_TEXT="styles.predefined" POSITION="bottom_or_right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="default" ID="ID_271890427" ICON_SIZE="12 pt" COLOR="#000000" STYLE="fork">
<arrowlink SHAPE="CUBIC_CURVE" COLOR="#000000" WIDTH="2" TRANSPARENCY="200" DASH="" FONT_SIZE="9" FONT_FAMILY="SansSerif" DESTINATION="ID_271890427" STARTARROW="NONE" ENDARROW="DEFAULT"/>
<font NAME="SansSerif" SIZE="10" BOLD="false" ITALIC="false"/>
<richcontent TYPE="DETAILS" CONTENT-TYPE="plain/auto"/>
<richcontent TYPE="NOTE" CONTENT-TYPE="plain/auto"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.details"/>
<stylenode LOCALIZED_TEXT="defaultstyle.tags">
<font SIZE="10"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.attributes">
<font SIZE="9"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.note" COLOR="#000000" BACKGROUND_COLOR="#ffffff" TEXT_ALIGN="LEFT"/>
<stylenode LOCALIZED_TEXT="defaultstyle.floating">
<edge STYLE="hide_edge"/>
<cloud COLOR="#f0f0f0" SHAPE="ROUND_RECT"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.selection" BACKGROUND_COLOR="#afd3f7" BORDER_COLOR_LIKE_EDGE="false" BORDER_COLOR="#afd3f7"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.user-defined" POSITION="bottom_or_right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="styles.topic" COLOR="#18898b" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subtopic" COLOR="#cc3300" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subsubtopic" COLOR="#669900">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.important" ID="ID_67550811">
<icon BUILTIN="yes"/>
<arrowlink COLOR="#003399" TRANSPARENCY="255" DESTINATION="ID_67550811"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.AutomaticLayout" POSITION="bottom_or_right" STYLE="bubble">
<stylenode LOCALIZED_TEXT="AutomaticLayout.level.root" COLOR="#000000" STYLE="oval" SHAPE_HORIZONTAL_MARGIN="10 pt" SHAPE_VERTICAL_MARGIN="10 pt">
<font SIZE="18"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,1" COLOR="#0033ff">
<font SIZE="16"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,2" COLOR="#00b439">
<font SIZE="14"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,3" COLOR="#990000">
<font SIZE="12"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,4" COLOR="#111111">
<font SIZE="10"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,5"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,6"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,7"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,8"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,9"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,10"/>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,11"/>
</stylenode>
</stylenode>
</map_styles>
</hook>
<hook NAME="AutomaticEdgeColor" COUNTER="18" RULE="ON_BRANCH_CREATION"/>
<attribute_layout NAME_WIDTH="112.61538 pt" VALUE_WIDTH="333.23076 pt"/>
<attribute NAME="name" VALUE="promptLlmAddOn"/>
<attribute NAME="version" VALUE="v0.4.2"/>
<attribute NAME="author" VALUE="barry, dpolivaev"/>
<attribute NAME="freeplaneVersionFrom" VALUE="v1.11.3" OBJECT="org.freeplane.features.format.FormattedObject|java.lang.String&amp;#x7c;v1.11.3|number:decimal:#0.####"/>
<attribute NAME="freeplaneVersionTo" VALUE=""/>
<attribute NAME="homepage" VALUE="github.com/barrymac/freeplane_openai_addon"/>
<attribute NAME="downloadUrl" VALUE="https://${homepage}/releases/download/${version}/LLM-AddOn-${version}.addon.mm"/>
<attribute NAME="changelogUrl" VALUE="https://${homepage}/commits/main"/>
<attribute NAME="addonsMenu" VALUE="/menu_bar/LLM"/>
<attribute NAME="updateUrl" VALUE="https://raw.githubusercontent.com/barrymac/freeplane_openai_addon/release/version.properties"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      The homepage of this add-on should be set as the link of the root node.
    </p>
    <p>
      The basic properties of this add-on. They can be used in script names and other attributes, e.g. &quot;${name}.groovy&quot;.
    </p>
    <ul>
      <li>
        name: The name of the add-on, normally a technically one (no spaces, no special characters except _.-).
      </li>
      <li>
        author: Author's name(s) and (optionally) email adresses.
      </li>
      <li>
        version: Since it's difficult to protect numbers like 1.0 from Freeplane's number parser it's advised to prepend a 'v' to the number, e.g. 'v1.0'.
      </li>
      <li>
        freeplane-version-from: The oldest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too old.
      </li>
      <li>
        freeplane-version-to: Normally empty: The newest compatible Freeplane version. The add-on will not be installed if the Freeplane version is too new.
      </li>
      <li>
        updateUrl: URL of the file containing information (version, download url) on the latest version of this add-on. By default: &quot;${homepage}/version.properties&quot;
      </li>
      <li>
        downloadUrl: add-on file download URL added to version.properties, by default ${homepage}/$name-$version.addon.mm&quot;
      </li>
    </ul>
  </body>
</html></richcontent>
<node TEXT="description" POSITION="top_or_left" ID="ID_365830098" CREATED="1685111823975" MODIFIED="1742834859965">
<edge COLOR="#ff0000"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      Description would be awkward to edit as an attribute.
    </p>
    <p>
      So you have to put the add-on description as a child of the <i>'description'</i>&#xa0;node.
    </p>
    <p>
      To translate the description you have to define a translation for the key 'addons.${name}.description'.
    </p>
  </body>
</html></richcontent>
<node TEXT="Add on to use Language model APIs to generate mind map content" ID="ID_110054152" CREATED="1685111823976" MODIFIED="1743044046669"/>
</node>
<node TEXT="changes" POSITION="top_or_left" ID="ID_138977336" CREATED="1685111823976" MODIFIED="1685111823976">
<edge COLOR="#0000ff"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      Change log of this add-on: append one node for each noteworthy version and put the details for each version into a child node.
    </p>
  </body>
</html></richcontent>
</node>
<node TEXT="license" FOLDED="true" POSITION="top_or_left" ID="ID_950695085" CREATED="1685111823976" MODIFIED="1742834859969">
<edge COLOR="#00ff00"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      The add-ons's license that the user has to accept before she can install it.
    </p>
    <p>
      
    </p>
    <p>
      The License text has to be entered as a child of the <i>'license'</i>&#xa0;node, either as plain text or as HTML.
    </p>
  </body>
</html></richcontent>
<node TEXT="&#xa;This add-on is free software: you can redistribute it and/or modify&#xa;it under the terms of the GNU General Public License as published by&#xa;the Free Software Foundation, either version 2 of the License, or&#xa;(at your option) any later version.&#xa;&#xa;This program is distributed in the hope that it will be useful,&#xa;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xa;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&#xa;GNU General Public License for more details.&#xa;" ID="ID_726417928" CREATED="1685111823976" MODIFIED="1685111823976"/>
</node>
<node TEXT="preferences.xml" POSITION="top_or_left" ID="ID_902316079" CREATED="1685111823976" MODIFIED="1743347818956">
<edge COLOR="#ff00ff"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      <span style="color: #000000; font-family: SansSerif, sans-serif;">The child node contains the add-on configuration as an extension to mindmapmodemenu.xml (in Tools-&gt;Preferences-&gt;Add-ons). </span>
    </p>
    <p>
      <span style="color: #000000; font-family: SansSerif, sans-serif;">Every property in the configuration should receive a default value in <i>default.properties</i>&#xa0;node.</span>
    </p>
  </body>
</html></richcontent>
</node>
<node TEXT="default.properties" POSITION="top_or_left" ID="ID_1363888784" CREATED="1685111823976" MODIFIED="1685111823976">
<attribute_layout NAME_WIDTH="138.75 pt" VALUE_WIDTH="138.75 pt"/>
<attribute NAME="${name}.icon" VALUE="/images/${name}.svg"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      These properties are used for:
    </p>
    <ul>
      <li>
        Each property defined in the preferences should have a default value in the attributes of this node.
      </li>
      <li>
        For each menu item with an icon add an attribute with the icon key (use developer tool menuItemInfo) as key and the icon path as value. Example: '${name}.icon': '/images/${name}-icon.png'
      </li>
    </ul>
  </body>
</html></richcontent>
<edge COLOR="#00ffff"/>
</node>
<node TEXT="translations" POSITION="top_or_left" ID="ID_1606264590" CREATED="1685111823976" MODIFIED="1685111823976">
<edge COLOR="#7c0000"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      The translation keys that this script uses. Define one child node per supported locale. The attributes contain the translations. Define at least
    </p>
    <ul>
      <li>
        'addons.${name}' for the add-on's name
      </li>
      <li>
        'addons.${name}.description' for the description, e.g. in the add-on overview dialog (not necessary for English)
      </li>
      <li>
        'addons.${name}.&lt;scriptname&gt;' for each script since it will be the menu title.
      </li>
    </ul>
  </body>
</html></richcontent>
<node TEXT="en" ID="ID_1097454652" CREATED="1685111823977" MODIFIED="1742847796035">
<attribute_layout NAME_WIDTH="159 pt" VALUE_WIDTH="102 pt"/>
<attribute NAME="addons.${name}" VALUE="LLM AddOn"/>
<attribute NAME="addons.${name}.askGPT" VALUE="Configure Prompts and Model"/>
<attribute NAME="addons.${name}.quickPrompt" VALUE="Quick Prompt (Ctrl+Alt+G)"/>
<attribute NAME="addons.${name}.compareConnectedNodes" VALUE="Compare Connected Nodes"/>
</node>
</node>
<node TEXT="deinstall" POSITION="top_or_left" ID="ID_1927303474" CREATED="1685111823977" MODIFIED="1743857685913">
<edge COLOR="#00007c"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      List of files and/or directories to remove on uninstall
    </p>
  </body>
</html></richcontent>
<attribute_layout NAME_WIDTH="37.5 pt" VALUE_WIDTH="268.49999 pt"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}.script.xml"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/AskGPT.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/images/${name}.svg"/>
<attribute NAME="delete" VALUE="${installationbase}/images/${name}-icon.svg"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/AskGpt.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/QuickPrompt.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/scripts/CompareConnectedNodes.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/resources/images/promptLlmAddOn.svg"/>
<attribute NAME="delete" VALUE="${installationbase}/resources/images/promptLlmAddOn-icon.svg"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/lib/Exceptions.groovy"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/lib/llm.jar"/>
<attribute NAME="delete" VALUE="${installationbase}/addons/${name}/lib"/>
</node>
<node TEXT="scripts" POSITION="bottom_or_right" ID="ID_684917236" CREATED="1685111823977" MODIFIED="1742834859980">
<edge COLOR="#007c00"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain multiple scripts. The node text defines the script name (e.g. insertInlineImage.groovy). The name must have a suffix of a supported script language like .groovy or .js and may only consist of letters and digits. The script properties have to be configured via attributes:
    </p>
    <p>
      
    </p>
    <p>
      * menuLocation: &lt;locationkey&gt;
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- Defines the menu location, defaults a sub menu 'main_menu_scripting/addons.${name}'.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;-&#xa0;Use developer tool menuItemInfo to inspect menu location keys.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * menuTitleKey: &lt;key&gt;
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- The menu item title will be looked up under the translation key &lt;key&gt; - don't forget to define its translation.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * executionMode: &lt;mode&gt;
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- The execution mode as described in the Freeplane wiki (http://freeplane.sourceforge.net/wiki/index.php/Scripting)
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- ON_SINGLE_NODE: Execute the script once. The <i>node</i>&#xa0;variable is set to the selected node.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- ON_SELECTED_NODE: Execute the script n times for n selected nodes, once for each node.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- ON_SELECTED_NODE_RECURSIVELY: Execute the script on every selected node and recursively on all of its children.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- In doubt use ON_SINGLE_NODE.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- This attribute is mandatory
    </p>
    <p>
      
    </p>
    <p>
      * keyboardShortcut: &lt;shortcut&gt;
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- Optional: keyboard combination / accelerator for this script, e.g. control alt I
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- Use lowercase letters for modifiers and uppercase for letters. Use no + signs.
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- The available key names are listed at http://download.oracle.com/javase/1.4.2/docs/api/java/awt/event/KeyEvent.html#VK_0
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;&#xa0;&#xa0;In the list only entries with a 'VK_' prefix count. Omit the prefix in the shortcut definition.
    </p>
    <p>
      
    </p>
    <p>
      * Permissions&#xa0;that the script(s) require, each either false or true:
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- execute_scripts_without_asking
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- execute_scripts_without_file_restriction: permission to read files
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- execute_scripts_without_write_restriction: permission to create/change/delete files
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- execute_scripts_without_exec_restriction: permission to execute other programs
    </p>
    <p>
      &#xa0;&#xa0;&#xa0;- execute_scripts_without_network_restriction: permission to access the network
    </p>
    <p>
      &#xa0;&#xa0;Notes:
    </p>
    <p>
      &#xa0;&#xa0;- The set of permissions is fixed.
    </p>
    <p>
      &#xa0;&#xa0;- Don't change the attribute names, don't omit one.
    </p>
    <p>
      &#xa0;&#xa0;- Set the values either to true or to false
    </p>
    <p>
      &#xa0;&#xa0;- In any case set execute_scripts_without_asking to true unless you want to annoy users.
    </p>
  </body>
</html></richcontent>
<node TEXT="AskGpt.groovy" FOLDED="true" ID="ID_231711959" CREATED="1685111823978" MODIFIED="1742830474533">
<attribute_layout NAME_WIDTH="202.49999 pt" VALUE_WIDTH="156.75 pt"/>
<attribute NAME="menuTitleKey" VALUE="addons.${name}.askGPT"/>
<attribute NAME="menuLocation" VALUE="${addonsMenu}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import com.barrymac.freeplane.addons.llm.DependencyLoader&#xa;import groovy.swing.SwingBuilder&#xa;&#xa;import javax.swing.*&#xa;import java.awt.*&#xa;&#xa;// Import the compiled DependencyLoaderClass&#xa;&#xa;// Load all dependencies&#xa;// Call static method directly&#xa;def deps = DependencyLoaderClass.loadDependencies(config, logger, ui)&#xa;&#xa;// Extract needed functions/classes from deps&#xa;def ConfigManager = deps.configManager&#xa;def expandMessageFunction = deps.messageExpander.expandMessage // Get static method reference&#xa;def loadMessagesFromFile = deps.messageFileHandler.loadMessagesFromFile&#xa;def saveMessagesToFile = deps.messageFileHandler.saveMessagesToFile&#xa;def loadDefaultMessages = deps.messageLoader.loadDefaultMessages // Get the new loader function&#xa;def createBranchGenerator = deps.branchGeneratorFactory // Get factory method&#xa;&#xa;// Load configuration using ConfigManager&#xa;def configMap = ConfigManager.loadBaseConfig(config)&#xa;def apiKey = configMap.apiKey&#xa;def gptModel = configMap.model&#xa;def maxResponseLength = configMap.maxTokens&#xa;def temperature = configMap.temperature&#xa;def apiProvider = configMap.provider&#xa;def selectedSystemMessageIndex = config.getProperty(&apos;openai.system_message_index&apos;, 0) as int&#xa;def selectedUserMessageIndex = config.getProperty(&apos;openai.user_message_index&apos;, 0) as int&#xa;&#xa;String systemMessagesFilePath = &quot;${config.freeplaneUserDirectory}/chatGptSystemMessages.txt&quot;&#xa;String userMessagesFilePath = &quot;${config.freeplaneUserDirectory}/chatGptUserMessages.txt&quot;&#xa;&#xa;// Initialize the branch generator with necessary dependencies&#xa;def generateBranches = createBranchGenerator([ // Call the factory method&#xa;        c      : c,&#xa;        ui     : ui,&#xa;        logger : logger,&#xa;        config : config&#xa;], deps) // Pass the loaded dependencies map&#xa;&#xa;&#xa;class com.barrymac.freeplane.addons.llm.models.MessageItem {&#xa;    String value&#xa;&#xa;    com.barrymac.freeplane.addons.llm.models.MessageItem(String value) {&#xa;        this.value = value.replaceAll(/\s+/, &apos; &apos;).take(120)&#xa;    }&#xa;&#xa;    @Override&#xa;    boolean equals(Object o) {&#xa;        return this.is(o)&#xa;    }&#xa;&#xa;    @Override&#xa;    int hashCode() {&#xa;        return System.identityHashCode(this)&#xa;    }&#xa;&#xa;    @Override&#xa;    String toString() {&#xa;        return value&#xa;    }&#xa;}&#xa;&#xa;&#xa;class com.barrymac.freeplane.addons.llm.models.MessageArea {&#xa;    JTextArea textArea&#xa;    JComboBox comboBox&#xa;&#xa;    void updateSelectedItemFromTextArea() {&#xa;        int selectedIndex = comboBox.selectedIndex&#xa;        def text = textArea.text&#xa;        comboBox.removeItemAt(selectedIndex)&#xa;        comboBox.insertItemAt(new com.barrymac.freeplane.addons.llm.models.MessageItem(text), selectedIndex)&#xa;        comboBox.selectedIndex = selectedIndex&#xa;    }&#xa;}&#xa;&#xa;com.barrymac.freeplane.addons.llm.models.MessageArea createMessageSection(def swingBuilder, def messages, def title, int initialIndex, def constraints, def weighty) {&#xa;    def comboBoxModel = new DefaultComboBoxModel()&#xa;    messages.each { comboBoxModel.addElement(new com.barrymac.freeplane.addons.llm.models.MessageItem(it)) }&#xa;    def messageComboBox, messageText&#xa;    def selectedIndex = initialIndex&#xa;&#xa;    constraints.gridy++&#xa;    swingBuilder.label(&quot;${title}:&quot;, constraints: constraints)&#xa;    constraints.gridy++&#xa;    messageComboBox = swingBuilder.comboBox(model: comboBoxModel, constraints: constraints)&#xa;    messageComboBox.selectedIndex = initialIndex&#xa;&#xa;    constraints.gridy++&#xa;    constraints.weighty = 1.0 * weighty&#xa;    swingBuilder.scrollPane(constraints: constraints) {&#xa;        messageText = textArea(rows: 5 * weighty, columns: 80, tabSize: 3, lineWrap: true, wrapStyleWord: true, text: messages[initialIndex], caretPosition: 0) {}&#xa;    }&#xa;    messageComboBox.addActionListener { actionEvent -&gt;&#xa;        if (selectedIndex != -1 &amp;&amp; messageComboBox.selectedIndex != selectedIndex) {&#xa;            messages[selectedIndex] = messageText.text&#xa;            comboBoxModel.removeElementAt(selectedIndex)&#xa;            comboBoxModel.insertElementAt(new com.barrymac.freeplane.addons.llm.models.MessageItem(messages[selectedIndex]), selectedIndex)&#xa;        }&#xa;        selectedIndex = messageComboBox.selectedIndex&#xa;        if (messageText.text != messages[selectedIndex]) {&#xa;            messageText.text = messages[selectedIndex]&#xa;            messageText.caretPosition = 0&#xa;        }&#xa;    }&#xa;    constraints.gridy++&#xa;    constraints.weighty = 0.0&#xa;    swingBuilder.panel(layout: new FlowLayout(), constraints: constraints) {&#xa;        button(action: swingBuilder.action(name: &quot;Reset ${title}&quot;.toString()) {&#xa;            messageText.text = messages[selectedIndex]&#xa;            messageText.caretPosition = 0&#xa;        })&#xa;        button(action: swingBuilder.action(name: &quot;Duplicate ${title}&quot;.toString()) {&#xa;            messages.add(messageText.text)&#xa;            comboBoxModel.addElement(new com.barrymac.freeplane.addons.llm.models.MessageItem(messageText.text))&#xa;            messageText.text = messages[selectedIndex]&#xa;            messageComboBox.selectedIndex = selectedIndex = messageComboBox.itemCount - 1&#xa;        })&#xa;        button(action: swingBuilder.action(name: &quot;Delete ${title}&quot;.toString()) {&#xa;            if (selectedIndex != -1) {&#xa;                messages.remove(selectedIndex)&#xa;                comboBoxModel.removeElementAt(selectedIndex)&#xa;                selectedIndex = -1&#xa;            }&#xa;        })&#xa;    }&#xa;    return new com.barrymac.freeplane.addons.llm.models.MessageArea(textArea: messageText, comboBox: messageComboBox)&#xa;}&#xa;&#xa;def swingBuilder = new SwingBuilder()&#xa;swingBuilder.edt { // edt method makes sure the GUI is built on the Event Dispatch Thread.&#xa;    def dialog = swingBuilder.dialog(title: &apos;Chat GPT Communicator&apos;, owner: ui.currentFrame) {&#xa;        swingBuilder.panel(layout: new GridBagLayout()) {&#xa;            def constraints = new GridBagConstraints()&#xa;            constraints.fill = GridBagConstraints.BOTH&#xa;            constraints.weightx = 1.0&#xa;            constraints.gridx = 0&#xa;            constraints.gridy = -1  // Will be incremented to 0 in the first call to createSection&#xa;            // Load messages, using defaults from JAR via MessageLoader if user file doesn&apos;t exist&#xa;            def systemMessages = loadMessagesFromFile(systemMessagesFilePath, &quot;/defaultSystemMessages.txt&quot;, loadDefaultMessages)&#xa;            def userMessages = loadMessagesFromFile(userMessagesFilePath, &quot;/defaultUserMessages.txt&quot;, loadDefaultMessages)&#xa;            com.barrymac.freeplane.addons.llm.models.MessageArea systemMessageArea = createMessageSection(swingBuilder, systemMessages, &quot;System Message&quot;, selectedSystemMessageIndex, constraints, 4)&#xa;            com.barrymac.freeplane.addons.llm.models.MessageArea userMessageArea = createMessageSection(swingBuilder, userMessages, &quot;User Message&quot;, selectedUserMessageIndex, constraints, 1)&#xa;            constraints.gridy++&#xa;            def apiKeyField&#xa;            def responseLengthField&#xa;            def gptModelBox&#xa;            def temperatureSlider&#xa;            swingBuilder.panel(constraints: constraints, layout: new GridBagLayout()) {&#xa;                def c = new GridBagConstraints()&#xa;                c.fill = GridBagConstraints.BOTH&#xa;                c.weightx = 1.0&#xa;                c.weighty = 1.0&#xa;                c.gridx = 0&#xa;                c.gridy = 0&#xa;                swingBuilder.panel(constraints: c, layout: new BorderLayout(), border: BorderFactory.createTitledBorder(&apos;API Key&apos;)) {&#xa;                    apiKeyField = passwordField(columns: 10, text: apiKey)&#xa;                }&#xa;                c.gridx++&#xa;                swingBuilder.panel(constraints: c, layout: new BorderLayout(), border: BorderFactory.createTitledBorder(&apos;Max Response Length&apos;), toolTipText: &apos;Maximum Response Length&apos;) {&#xa;                    responseLengthField = formattedTextField(columns: 5, value: maxResponseLength)&#xa;                }&#xa;                c.gridx++&#xa;                swingBuilder.panel(constraints: c, layout: new BorderLayout(), border: BorderFactory.createTitledBorder(&apos;Language Model&apos;)) {&#xa;                    gptModelBox = comboBox(&#xa;                        items: configMap.availableModels,&#xa;                        selectedItem: gptModel,&#xa;                        prototypeDisplayValue: configMap.availableModels.max { it.length() }&#xa;                    )&#xa;                }&#xa;                c.gridx++&#xa;                swingBuilder.panel(constraints: c, layout: new BorderLayout(), border: BorderFactory.createTitledBorder(&apos;API Provider&apos;)) {&#xa;                    apiProviderBox = comboBox(items: [&apos;openai&apos;, &apos;openrouter&apos;], selectedItem: apiProvider)&#xa;                }&#xa;                c.gridx++&#xa;                swingBuilder.panel(constraints: c, layout: new BorderLayout(), border: BorderFactory.createTitledBorder(&apos;Randomness&apos;)) {&#xa;                    temperatureSlider = slider(minimum: 0, maximum: 100, minorTickSpacing: 5, majorTickSpacing: 50, snapToTicks: true,&#xa;                            paintTicks: true, paintLabels: true, value: (int) (temperature * 100.0 + 0.5))&#xa;                }&#xa;            }&#xa;            constraints.gridy++&#xa;            swingBuilder.panel(constraints: constraints) {&#xa;                def askGptButton = swingBuilder.button(constraints: c, action: swingBuilder.action(name: &apos;Prompt LLM&apos;) {&#xa;                    generateBranches(String.valueOf(apiKeyField.password),&#xa;                            systemMessageArea.textArea.text, // Call the extracted function&#xa;                            expandMessageFunction(userMessageArea.textArea.text, c.selected),&#xa;                            gptModelBox.selectedItem,&#xa;                            responseLengthField.value,&#xa;                            temperatureSlider.value / 100.0,&#xa;                            apiProviderBox.selectedItem)&#xa;                })&#xa;                askGptButton.rootPane.defaultButton = askGptButton&#xa;                swingBuilder.button(constraints: c, action: swingBuilder.action(name: &apos;Save Changes&apos;) {&#xa;                    systemMessages[systemMessageArea.comboBox.selectedIndex] = systemMessageArea.textArea.text&#xa;                    userMessages[userMessageArea.comboBox.selectedIndex] = userMessageArea.textArea.text&#xa;                    saveMessagesToFile(systemMessagesFilePath, systemMessages)&#xa;                    saveMessagesToFile(userMessagesFilePath, userMessages)&#xa;                    config.setProperty(&apos;openai.key&apos;, String.valueOf(apiKeyField.password))&#xa;                    config.setProperty(&apos;openai.gpt_model&apos;, gptModelBox.selectedItem)&#xa;                    config.setProperty(&apos;openai.max_response_length&apos;, responseLengthField.value)&#xa;                    config.setProperty(&apos;openai.temperature&apos;, temperatureSlider.value / 100.0)&#xa;                    config.setProperty(&apos;openai.system_message_index&apos;, systemMessageArea.comboBox.selectedIndex)&#xa;                    config.setProperty(&apos;openai.user_message_index&apos;, userMessageArea.comboBox.selectedIndex)&#xa;                    config.setProperty(&apos;openai.api_provider&apos;, apiProviderBox.selectedItem)&#xa;                    systemMessageArea.updateSelectedItemFromTextArea()&#xa;                    userMessageArea.updateSelectedItemFromTextArea()&#xa;                })&#xa;            }&#xa;        }&#xa;    }&#xa;    dialog.pack()&#xa;    ui.setDialogLocationRelativeTo(dialog, ui.currentFrame)&#xa;    dialog.show()&#xa;}&#xa;" ID="ID_42506075" CREATED="1743866218818" MODIFIED="1743866218902"/>
</node>
<node TEXT="QuickPrompt.groovy" FOLDED="true" ID="ID_QUICK_PROMPT" CREATED="1743347818938" MODIFIED="1743347818938">
<attribute_layout NAME_WIDTH="202.49999 pt" VALUE_WIDTH="156.75 pt"/>
<attribute NAME="menuTitleKey" VALUE="addons.${name}.quickPrompt"/>
<attribute NAME="menuLocation" VALUE="${addonsMenu}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE="control alt G"/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import groovy.swing.SwingBuilder&#xa;import javax.swing.JOptionPane&#xa;&#xa;// Import the compiled DependencyLoaderClass&#xa;import com.barrymac.freeplane.addons.llm.DependencyLoader&#xa;&#xa;// Load all dependencies&#xa;// Call static method directly&#xa;def deps = DependencyLoaderClass.loadDependencies(config, logger, ui)&#xa;&#xa;// Extract needed functions/classes from deps&#xa;def ConfigManager = deps.configManager&#xa;def expandMessage = deps.messageExpander.expandMessage // Get static method reference&#xa;def loadMessagesFromFile = deps.messageFileHandler.loadMessagesFromFile&#xa;def loadDefaultMessages = deps.messageLoader.loadDefaultMessages // Get the new loader function&#xa;def createBranchGenerator = deps.branchGeneratorFactory // Get factory method&#xa;&#xa;// Load configuration using ConfigManager&#xa;def configMap = ConfigManager.loadBaseConfig(config)&#xa;def apiKey = configMap.apiKey&#xa;def model = configMap.model&#xa;def maxTokens = configMap.maxTokens&#xa;def temperature = configMap.temperature&#xa;def provider = configMap.provider&#xa;def systemMessageIndex = config.getProperty(&apos;openai.system_message_index&apos;, 0) as int&#xa;def userMessageIndex = config.getProperty(&apos;openai.user_message_index&apos;, 0) as int&#xa;&#xa;// Initialize the branch generator with necessary dependencies&#xa;def generateBranches = createBranchGenerator([ // Call the factory method&#xa;        c      : c,&#xa;        ui     : ui,&#xa;        logger : logger,&#xa;        config : config&#xa;], deps) // Pass the loaded dependencies map&#xa;&#xa;// Load message templates&#xa;def systemMessagesFilePath = &quot;${config.freeplaneUserDirectory}/chatGptSystemMessages.txt&quot;&#xa;def userMessagesFilePath = &quot;${config.freeplaneUserDirectory}/chatGptUserMessages.txt&quot;&#xa;&#xa;// Load messages, using defaults from JAR via MessageLoader if user file doesn&apos;t exist&#xa;def systemMessages = loadMessagesFromFile(systemMessagesFilePath, &quot;/defaultSystemMessages.txt&quot;, loadDefaultMessages)&#xa;def userMessages = loadMessagesFromFile(userMessagesFilePath, &quot;/defaultUserMessages.txt&quot;, loadDefaultMessages)&#xa;&#xa;// Validate and fallback to defaults if needed&#xa;def systemMessage = systemMessageIndex &lt; systemMessages.size() ? systemMessages[systemMessageIndex] : systemMessages[0]&#xa;def userMessageTemplate = userMessageIndex &lt; userMessages.size() ? userMessages[userMessageIndex] : userMessages[0]&#xa;&#xa;if (!apiKey) {&#xa;    JOptionPane.showMessageDialog(ui.currentFrame, &#xa;        &quot;Please configure API settings first via the LLM menu&quot;,&#xa;        &quot;Configuration Required&quot;,&#xa;        JOptionPane.WARNING_MESSAGE)&#xa;    return&#xa;}&#xa;&#xa;try {&#xa;    def expandedUserMessage = expandMessage(userMessageTemplate, c.selected)&#xa;    generateBranches(apiKey, systemMessage, expandedUserMessage, model, maxTokens, temperature, provider)&#xa;} catch (Exception e) {&#xa;    logger.warn(&quot;Quick prompt failed&quot;, e)&#xa;    ui.errorMessage(&quot;Quick prompt error: ${e.message}&quot;)&#xa;}&#xa;" ID="ID_57876199" CREATED="1743866218925" MODIFIED="1743866218927"/>
</node>
<node TEXT="CompareConnectedNodes.groovy" FOLDED="true" ID="ID_COMPARE_NODES" CREATED="1743400000000" MODIFIED="1743400000000">
<attribute_layout NAME_WIDTH="202.49999 pt" VALUE_WIDTH="156.75 pt"/>
<attribute NAME="menuTitleKey" VALUE="addons.${name}.compareConnectedNodes"/>
<attribute NAME="menuLocation" VALUE="${addonsMenu}"/>
<attribute NAME="executionMode" VALUE="on_single_node"/>
<attribute NAME="keyboardShortcut" VALUE=""/>
<attribute NAME="execute_scripts_without_asking" VALUE="true"/>
<attribute NAME="execute_scripts_without_file_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_write_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_exec_restriction" VALUE="true"/>
<attribute NAME="execute_scripts_without_network_restriction" VALUE="true"/>
<node TEXT="import com.barrymac.freeplane.addons.llm.DependencyLoader&#xa;import groovy.json.JsonSlurper&#xa;import groovy.text.SimpleTemplateEngine&#xa;&#xa;import javax.swing.*&#xa;import java.awt.*&#xa;&#xa;// Helper function to parse generated dimension from LLM response&#xa;def parseGeneratedDimension(String response) {&#xa;    // More flexible regex pattern&#xa;    def pattern = ~/(?i)(Pole\s*1:\s*([^;]+?)\s*;\s*Pole\s*2:\s*([^\n]+?))\s*$/&#xa;    def matcher = pattern.matcher(response)&#xa;    &#xa;    if (matcher.find()) {&#xa;        def pole1 = matcher[0][2].trim().replaceAll(/[&quot;&apos;]/, &apos;&apos;)&#xa;        def pole2 = matcher[0][3].trim().replaceAll(/[&quot;&apos;]/, &apos;&apos;)&#xa;        return [pole1, pole2]&#xa;    }&#xa;    &#xa;    // Try alternative patterns if initial fails&#xa;    def altPatterns = [&#xa;        ~/([A-Z][\w\s]+?)\s*\/\/\s*([A-Z][\w\s]+)/,&#xa;        ~/(.+)\s+vs\s+(.+)/,&#xa;        ~/^([^;]+);([^;]+)$/&#xa;    ]&#xa;    &#xa;    for (p in altPatterns) {&#xa;        matcher = p.matcher(response)&#xa;        if (matcher.find() &amp;&amp; matcher.groupCount() &gt;= 2) {&#xa;            return [matcher[0][1].trim(), matcher[0][2].trim()]&#xa;        }&#xa;    }&#xa;    &#xa;    throw new Exception(&quot;&quot;&quot;Invalid dimension format. Received: &apos;$response&apos;&#xa;        Expected format: &apos;Pole 1: [concept]; Pole 2: [concept]&apos;&quot;&quot;&quot;)&#xa;}&#xa;&#xa;// --- Load Core Dependencies ---&#xa;// Import the compiled DependencyLoaderClass&#xa;&#xa;// Load all dependencies&#xa;// Call static method directly&#xa;def deps = DependencyLoaderClass.loadDependencies(config, logger, ui)&#xa;&#xa;// Extract needed functions/classes from deps&#xa;def ConfigManager = deps.configManager&#xa;def make_api_call = deps.apiCaller.make_api_call&#xa;def getBindingMap = deps.messageExpander.getBindingMap&#xa;def parseAnalysis = deps.responseParser.&amp;parseAnalysis&#xa;def DialogHelper = deps.dialogHelper&#xa;def NodeHelper = deps.nodeHelperUtils // Get the NodeHelperClass directly&#xa;def addAnalysisToNodeAsBranch = NodeHelper.&amp;addAnalysisToNodeAsBranch // Get method reference from the class&#xa;def MessageLoader = deps.messageLoader&#xa;def addModelTagRecursively = deps.nodeTagger&#xa;&#xa;// Load configuration using ConfigManager&#xa;def configMap = ConfigManager.loadBaseConfig(config)&#xa;def apiKey = configMap.apiKey&#xa;def model = configMap.model&#xa;def maxTokens = configMap.maxTokens&#xa;def temperature = configMap.temperature&#xa;def provider = configMap.provider&#xa;&#xa;// Load comparison messages using MessageLoader from deps&#xa;def messages = MessageLoader.loadComparisonMessages(config)&#xa;def systemMessageTemplate = messages.systemTemplate&#xa;def compareNodesUserMessageTemplate = messages.userTemplate&#xa;&#xa;// --- Main Script Logic ---&#xa;&#xa;// Wrap the entire script in a try-catch block for better error handling&#xa;try {&#xa;    // 1. Check API Key&#xa;    if (apiKey.isEmpty()) {&#xa;        if (provider == &apos;openrouter&apos;) {&#xa;            Desktop.desktop.browse(new URI(&quot;https://openrouter.ai/keys&quot;))&#xa;        } else {&#xa;            Desktop.desktop.browse(new URI(&quot;https://platform.openai.com/account/api-keys&quot;))&#xa;        }&#xa;        throw new Exception(&quot;API key is missing. Please configure it first via the LLM menu.&quot;)&#xa;    }&#xa;&#xa;    // Check if templates are loaded&#xa;    if (systemMessageTemplate.isEmpty() || compareNodesUserMessageTemplate.isEmpty()) {&#xa;        throw new Exception(&quot;System message template or the dedicated compareNodesUserMessage.txt is missing or empty. Please check configuration or files.&quot;)&#xa;    }&#xa;&#xa;    // 2. Get Selected Nodes and Validate Connection (Use NodeHelper class from deps)&#xa;    def selectedNodes = c.selecteds&#xa;    // Use the static method directly via the class obtained from deps&#xa;    def (sourceNode, targetNode) = NodeHelper.validateAndGetConnectedNodes(selectedNodes) // This might throw ValidationException&#xa;&#xa;    logger.info(&quot;Found connector between selected nodes: ${sourceNode.text} and ${targetNode.text}&quot;)&#xa;&#xa;    // 3. Get Comparison Type from User&#xa;    def dialogMessage = &quot;Nodes &apos;${sourceNode.text}&apos; and &apos;${targetNode.text}&apos; are connected.\nEnter the type of comparison (e.g., &apos;Pros and Cons&apos;, &apos;Compare and Contrast&apos;, &apos;Strengths vs Weaknesses&apos;):&quot;&#xa;    def defaultComparisonTypes = [&quot;Pros and Cons&quot;, &quot;Compare and Contrast&quot;, &quot;Strengths vs Weaknesses&quot;, &quot;Advantages and Disadvantages&quot;]&#xa;    def comparisonTypesConfigKey = &quot;promptLlmAddOn.comparisonTypes&quot;&#xa;&#xa;    String comparisonType = DialogHelper.showComparisonDialog(&#xa;        ui, &#xa;        config, &#xa;        sourceNode.delegate, &#xa;        dialogMessage,&#xa;        defaultComparisonTypes,&#xa;        comparisonTypesConfigKey&#xa;    )&#xa;&#xa;    if (comparisonType == null || comparisonType.trim().isEmpty()) {&#xa;        logger.info(&quot;User cancelled comparison input.&quot;)&#xa;        return&#xa;    }&#xa;    comparisonType = comparisonType.trim()&#xa;&#xa;    // 4. Show Progress Dialog&#xa;    def progressMessage = &quot;Generating &apos;${comparisonType}&apos; analysis framework...&quot;&#xa;    def dialog = DialogHelper.createProgressDialog(ui, &quot;Analyzing Nodes with LLM...&quot;, progressMessage)&#xa;    dialog.setVisible(true)&#xa;&#xa;    // 6. Run API Calls in Background Thread&#xa;    def workerThread = new Thread({&#xa;        String errorMessage = null&#xa;&#xa;        try {&#xa;            // --- Generate Comparative Dimension with Validation ---&#xa;            def dimensionPayload = [&#xa;                &apos;model&apos;: model,&#xa;                &apos;messages&apos;: [&#xa;                    [role: &apos;system&apos;, content: messages.dimensionSystemTemplate],&#xa;                    [role: &apos;user&apos;, content: &quot;Create a focused comparative dimension for analyzing: ${comparisonType}&quot;]&#xa;                ],&#xa;                &apos;temperature&apos;: 0.2,&#xa;                &apos;max_tokens&apos;: 100&#xa;            ]&#xa;            &#xa;            logger.info(&quot;Generating comparative dimension for: ${comparisonType}&quot;)&#xa;            &#xa;            def maxRetries = 2&#xa;            def attempts = 0&#xa;            def comparativeDimension = null&#xa;            def dimensionContent = null&#xa;            &#xa;            while (attempts &lt;= maxRetries) {&#xa;                try {&#xa;                    def dimensionResponse = make_api_call(provider, apiKey, dimensionPayload)&#xa;                    dimensionContent = new JsonSlurper().parseText(dimensionResponse)?.choices[0]?.message?.content&#xa;                    def (pole1, pole2) = parseGeneratedDimension(dimensionContent)&#xa;                    comparativeDimension = &quot;${pole1} vs ${pole2}&quot;&#xa;                    logger.info(&quot;Generated comparative dimension: ${comparativeDimension}&quot;)&#xa;                    break&#xa;                } catch (Exception e) {&#xa;                    attempts++&#xa;                    if (attempts &gt; maxRetries) throw e&#xa;                    &#xa;                    // Add correction attempt&#xa;                    dimensionPayload.messages.add([role: &apos;assistant&apos;, content: dimensionContent])&#xa;                    dimensionPayload.messages.add([role: &apos;user&apos;, content: &quot;&quot;&quot;&#xa;                        Format was incorrect. Please STRICTLY follow:&#xa;                        Pole 1: [2-3 words]; Pole 2: [2-3 words]&#xa;                        No other text. Just the poles in this format.&#xa;                    &quot;&quot;&quot;])&#xa;                }&#xa;            }&#xa;            &#xa;            // --- Prepare Prompts with Generated Dimension ---&#xa;            logger.info(&quot;CompareNodes: Final userMessageTemplate for expansion:\n---\n${compareNodesUserMessageTemplate}\n---&quot;)&#xa;            &#xa;            // --- Prepare source node prompt ---&#xa;            def sourceBinding = getBindingMap(sourceNode)&#xa;            sourceBinding[&apos;comparisonType&apos;] = comparativeDimension&#xa;            logger.info(&quot;CompareNodes: Source Binding Map: ${sourceBinding}&quot;)&#xa;            def sourceEngine = new SimpleTemplateEngine()&#xa;            def sourceUserPrompt = sourceEngine.createTemplate(compareNodesUserMessageTemplate).make(sourceBinding).toString()&#xa;            logger.info(&quot;CompareNodes: Source User Prompt:\n${sourceUserPrompt}&quot;)&#xa;            &#xa;            // --- Prepare target node prompt ---&#xa;            def targetBinding = getBindingMap(targetNode)&#xa;            targetBinding[&apos;comparisonType&apos;] = comparativeDimension&#xa;            logger.info(&quot;CompareNodes: Target Binding Map: ${targetBinding}&quot;)&#xa;            def targetEngine = new SimpleTemplateEngine()&#xa;            def targetUserPrompt = targetEngine.createTemplate(compareNodesUserMessageTemplate).make(targetBinding).toString()&#xa;            logger.info(&quot;CompareNodes: Target User Prompt:\n${targetUserPrompt}&quot;)&#xa;            &#xa;            // Update progress dialog&#xa;            SwingUtilities.invokeLater {&#xa;                dialog.setMessage(&quot;Analyzing &apos;${sourceNode.text}&apos; and &apos;${targetNode.text}&apos; using &apos;${comparativeDimension}&apos; framework...&quot;)&#xa;            }&#xa;&#xa;            // --- Call API for Source Node ---&#xa;            def sourcePayloadMap = [&#xa;                &apos;model&apos;: model,&#xa;                &apos;messages&apos;: [&#xa;                    [role: &apos;system&apos;, content: systemMessageTemplate],&#xa;                    [role: &apos;user&apos;, content: sourceUserPrompt]&#xa;                ],&#xa;                &apos;temperature&apos;: temperature,&#xa;                &apos;max_tokens&apos;: maxTokens&#xa;            ]&#xa;            logger.info(&quot;Requesting analysis for source node: ${sourceNode.text}&quot;)&#xa;            // Use the unified API call function from deps&#xa;            sourceApiResponse = make_api_call(provider, apiKey, sourcePayloadMap)&#xa;&#xa;            if (sourceApiResponse == null || sourceApiResponse.isEmpty()) {&#xa;                throw new Exception(&quot;Received empty or null response for source node.&quot;)&#xa;            }&#xa;&#xa;            // --- Call API for Target Node ---&#xa;            def targetPayloadMap = [&#xa;                &apos;model&apos;: model,&#xa;                &apos;messages&apos;: [&#xa;                    [role: &apos;system&apos;, content: systemMessageTemplate],&#xa;                    [role: &apos;user&apos;, content: targetUserPrompt]&#xa;                ],&#xa;                &apos;temperature&apos;: temperature,&#xa;                &apos;max_tokens&apos;: maxTokens&#xa;            ]&#xa;            logger.info(&quot;Requesting analysis for target node: ${targetNode.text}&quot;)&#xa;            // Use the unified API call function from deps&#xa;            targetApiResponse = make_api_call(provider, apiKey, targetPayloadMap)&#xa;&#xa;            if (targetApiResponse == null || targetApiResponse.isEmpty()) {&#xa;                throw new Exception(&quot;Received empty or null response for target node.&quot;)&#xa;            }&#xa;&#xa;            // --- Process Responses ---&#xa;            def jsonSlurper = new JsonSlurper()&#xa;&#xa;            def sourceJsonResponse = jsonSlurper.parseText(sourceApiResponse)&#xa;            def sourceResponseContent = sourceJsonResponse?.choices[0]?.message?.content&#xa;            if (!sourceResponseContent?.trim()) throw new Exception(&quot;Empty content in source response. Model may have hit token limit.&quot;)&#xa;&#xa;            def targetJsonResponse = jsonSlurper.parseText(targetApiResponse)&#xa;            def targetResponseContent = targetJsonResponse?.choices[0]?.message?.content&#xa;            if (!targetResponseContent?.trim()) throw new Exception(&quot;Empty content in target response. Model may have hit token limit.&quot;)&#xa;&#xa;            logger.info(&quot;Source Node Analysis:\n${sourceResponseContent}&quot;)&#xa;            logger.info(&quot;Target Node Analysis:\n${targetResponseContent}&quot;)&#xa;&#xa;            // Parse responses&#xa;            def sourceAnalysis = parseAnalysis(sourceResponseContent)&#xa;            def targetAnalysis = parseAnalysis(targetResponseContent)&#xa;&#xa;            // --- Update Map on EDT ---&#xa;            SwingUtilities.invokeLater {&#xa;                dialog.dispose() // Close progress dialog first&#xa;                if (sourceAnalysis.isEmpty() &amp;&amp; targetAnalysis.isEmpty()) {&#xa;                    ui.informationMessage(&quot;The LLM analysis did not yield structured results for either node.&quot;)&#xa;                } else {&#xa;                    try {&#xa;                        // Add analysis branches, passing the tagging function and using the generated dimension&#xa;                        addAnalysisToNodeAsBranch(sourceNode, sourceAnalysis, comparativeDimension, model, logger, addModelTagRecursively)&#xa;                        addAnalysisToNodeAsBranch(targetNode, targetAnalysis, comparativeDimension, model, logger, addModelTagRecursively)&#xa;                        ui.informationMessage(&quot;Comparison analysis using &apos;${comparativeDimension}&apos; framework added to both nodes.&quot;)&#xa;                    } catch (Exception e) {&#xa;                        logger.warn(&quot;Error during addAnalysisToNodeAsBranch calls on EDT&quot;.toString(), e as Throwable)&#xa;                        ui.errorMessage(&quot;Failed to add analysis results to the map. Check logs. Error: ${e.message}&quot;)&#xa;                    }&#xa;                }&#xa;            }&#xa;&#xa;        } catch (Exception e) {&#xa;            // Ensure message is String and exception is Throwable&#xa;            logger.warn(&quot;LLM Comparison failed: ${e.message}&quot;.toString(), (Throwable)e)&#xa;            errorMessage = &quot;Comparison Error: ${e.message.split(&apos;\n&apos;).head()}&quot;&#xa;            // Ensure dialog is closed and error shown on EDT&#xa;            SwingUtilities.invokeLater {&#xa;                dialog.dispose()&#xa;                ui.errorMessage(errorMessage)&#xa;            }&#xa;        }&#xa;    })&#xa;    // Use the classloader of a known compiled class from the JAR&#xa;    workerThread.setContextClassLoader(DependencyLoaderClass.class.classLoader)&#xa;    workerThread.start()&#xa;&#xa;} catch (Exception e) {&#xa;    // Handle all errors with a simple message&#xa;    ui.errorMessage(e.message)&#xa;    // Ensure message is String and exception is Throwable&#xa;    logger.warn(&quot;Error in CompareConnectedNodes: ${e.message}&quot;.toString(), (Throwable)e)&#xa;}&#xa;" ID="ID_1105508357" CREATED="1743866218928" MODIFIED="1743866218932"/>
</node>
</node>
<node TEXT="lib" POSITION="bottom_or_right" ID="ID_1845190577" CREATED="1685111823978" MODIFIED="1742834860055">
<edge COLOR="#7c007c"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing binary files (normally .jar files) to be added to the add-on's classpath.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- The immediate child nodes contain the name of the file, e.g. 'mysql-connector-java-5.1.25.jar'). Put the file into a 'lib' subdirectory of the add-on base directory.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- The child nodes of these nodes contain the actual files.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- Any lib file will be extracted in &lt;installationbase&gt;/&lt;addonname&gt;/lib.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html></richcontent>
<node TEXT="llm.jar" FOLDED="true" ID="ID_943135829" CREATED="1743859158919" MODIFIED="1743859162350">
<node TEXT="UEsDBBQAAAgIAOdhhVoAAAAAAgAAAAAAAAAJAAAATUVUQS1JTkYvAwBQSwMEFAAACAgAJlKFWr&#xa;J/Au4bAAAAGQAAABQAAABNRVRBLUlORi9NQU5JRkVTVC5NRvNNzMtMSy0u0Q1LLSrOzM+zUjDU&#xa;M+Dl4uUCAFBLAwQUAAAICADnYYVaAAAAAAIAAAAAAAAABAAAAGNvbS8DAFBLAwQUAAAICADnYY&#xa;VaAAAAAAIAAAAAAAAADQAAAGNvbS9iYXJyeW1hYy8DAFBLAwQUAAAICADnYYVaAAAAAAIAAAAA&#xa;AAAAFwAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvAwBQSwMEFAAACAgA52GFWgAAAAACAAAAAA&#xa;AAAB4AAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy8DAFBLAwQUAAAICADnYYVaAAAA&#xa;AAIAAAAAAAAAIgAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS8DAFBLAwQUAA&#xa;AICADnYYVaawd6uHgHAAD1DwAAMgAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xs&#xa;bS9Ob2RlVGFnZ2VyLmNsYXNzlVf/dxtHEf+sJOvOFyVxzk0dpcW4YGpJTnINX4vdlMZu4jpIbr&#xa;AcGyUU93xay5ec7tTTyYkbvpQEQsPXtkBLUr5DKBQoTpPGxnmlv8F7/EPAey1h9u4UO/XJdd7T&#xa;afZmZ2dmZz47O/ev/638HcAB/I1hj+FUtRnddRequqHNupzXLN3mml4uO3Zds6yqNuaU+YReqX&#xa;BXAmPoOKnP6xoJVbQnZ05yw5MQZ9hVcR1nfiHgj/jj5mwbw45VHfsCQdLTW/d0zzSGLb1eH7Vn&#xa;HYZc3nErmkGyc3qjroUqXT5rkSLTsbXbsoMM0vQ0aSgMM7DjDO1V7un+NENXfq0zheYErUk+Yt&#xa;qm9yhDPJOdZLi/Kei5ul2fddyqNsJt7uoeLw+msA3bFSSwg6Gzt8K9ou9uYdVOOpNtYSmFTtyj&#xa;IIadKaSwtZ1GXQwJb86kZfvydxNz8vpemigQwyLOODcabt2c5xaF8Egm//5kDG6Gk13PYti5di&#xa;vjfJa73Da4hA/RVISd7KQI0IcVdKOHYX9k4hq2Z1a5VjRcs+YNLXhcSBws6zVPYOkjDCmKRE13&#xa;+aFnGrrF0Lep/WSPp9CLjyn4KB6kTFJmGO7JROwphQyywsGciL1rVmXsiRPwwbA3yt/5as1qVE&#xa;xbm39YG7XLC6M2+TmriyBohLAZx/HqhJQaw4W1jpr2vHOKi+zPOeUndLts8Xpv3nFONWprvS+S&#xa;B3ZlsNXCiYUajxAfza5fMKxbVtH0OG1wPz6u4CF8YnsSnyR4BwIMD0YlLCpAn8ZnVArIw3SczP&#xa;qhas1bkDGgUoCIM7RRTj1yd07slZzUHuezesPyxBYmmidJFwdWwgFKMgXO4rp9zJ5xzrQAE6X0&#xa;c3hMwaM4SOdZkyGO9bSMQ+SYK46HwWWMfCDi18c45LTY/KhKJ/MIAW+jrY4EOkYJHRLydxTAYE&#xa;bCGAEsny8MyDjKABnjDNnMifU2T0R45p+jCQUFHBMw1St1GVMMWwjXR12nxl1vIYWSyFMcVOji&#xa;VAxkfIkytLnDEr3xL6tU2KYZZGPOtMp00mXoKtqEgcLdVKfe6ejaNG1YTr3h8v0SygzHNlenIg&#xa;tQK3YQt1kFHBWKG9eNORkmw2CUrbUqhgPPWkXmlIokLJEJfsaTYauQRFQ6D+umxcs9ntNDO+6h&#xa;NPX0yXiGQekTPJtC0CODqrvsOUFmZTQECu6wPbIxHE+rhB06Ip2rsxNzrnNan7GoBj1L96jhcr&#xa;qcjjonnSkqRAQOhuLGwQ0upGz0zRoi/HSgq66FSsmZr+CrosB+jQJxWncJHs8xzG4ujXdlqUUk&#xa;zqlox/k7InHojMFrQVH5FnklIs6gRt1k7VUByDG9yt/fC6zCh4ql5QgEk466Tk2B+SwPgBysky&#xa;jDwYjRszMf4QfpkOmQhs1A5x03ULMNeAEvihbiJYatovNY0zz0R5boVu3Ej/ETkY6XUwSQdtFO&#xa;/JQhs9lmScJlqsJNV4NW60BmsxiJ6r5S+Bl+ruBV/CJQfNvVFH4lGp9X8WuG+9Z3V/6NauuWaG&#xa;oC+zN0MdQ1/9Ywub2uD7mtWMIVMlXna0O4O9MiXqK3U0TLFtzC4hhGXKORFzZD98aCEv7kY0dI&#xa;p/AXvK7gz3iDoeeDKiFhdjjErGPo1qTumuJcT4g/6iXHgxMyadZNYhy0bcfzr1Da51bqPI1TBb&#xa;0Wym7PmzYfa1RnuBtyUqM2ta3+5jktUIpOwzX4YVPMdQw1+5ZgH3U8QPhJ0B2fRLxDEYACOi5C&#xa;wRai50S/Sh1Bkuap/yXJq/T2ENEYUTW3RM8NSl5/bvot7Oqfuuq3U2/Sf4oosANp7CZ6LdTRQb&#xa;Qd9+F+GpNsrIvskR0W67+J7uPTS3hgbE9zNJDIsWX0Xca2vTfQL4aXICVeQyJ+GV2CtYLPAit4&#xa;BFjGUHPuEn1gLIpZ9XH18Ao+Dwy0pdumbqJQSryNRCmebiu2vY0nS3H1C8VSQi0WlzA5kEwnp3&#xa;IrOAGkkyt4GhBvBnATvKTG1NjedGIJcyuokjqJhKTFATmdICtCb1ugN0nqaFUNKCYDA64w4BVL&#xa;bYGVFSzQUlk9u4yvr+CbpIpCnW5ffGdASSvvUHzOE4Cu4gLeoH9Bxft7FDHxLuhV/Men/8W7Po&#xa;3jOv2fgPIeMhK66Rd/jN1LT+IWZiBJSDR/3f6PBgUwCRdu4YhIlISzt4i2FjyLt2h+N7m2k54x&#xa;St3TBIzzBIkXCQ7XoPqpHqckUgrxbTwvtNJH4UV8B3EfCheJR90L/o3vEi9BvC00ep7g8xSu4H&#xa;s0asNzOIfv0yhJGo/gB/gh5I6E+GQKQIKhEG59BLUfqbErkHPLeGXxTVzK9/8T2wV3Gb8s5a/h&#xa;Uv8N/GbRN3zdR1ps27volKgAMVGJQvhqRAU4u3LXsav0DyQWp3IlQjEhWHBW1xNiRyX83kfvNt&#xa;qQQO9v6fmdL/Ea/hAqVEMHk7l+0iE4AeLFJ1+4pqMdf8Tr4YY6fPNAYhl/XfRHcdzw5Rn1L8Ai&#xa;nZslojFqNpb9ACv4FL3txT6fDob0iZB+MaRPhXQmpCdD6oR0PqTfwL7/A1BLAwQUAAAICADnYY&#xa;Var5kOkQIGAADlDAAAOgAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9NZXNz&#xa;YWdlRmlsZUhhbmRsZXIuY2xhc3OdVutXE0cU/00IbIgRQlARtIgt1TzAVWvVgtBKKkiboDUUxG&#xa;rpkkzCwmY37m5Q+rK1ra3ax1/R41fsw3L40PZTe07/pp62d3Y3gGaxtGJyJzP3fX9z7/zx19rP&#xa;AIbwDcOJvFGW5xTTXC4reblocl7RFJ3LSqFg6JasaWU5yy1LKfFRVePnFb2gcVMCY4guKEuKTM&#xa;wl+cLcAs/bEhoY9pZMw1hadvfHnHXttJGhs17XEVeA9PVatmKr+bSmWNa4XjQYkhnDLMl5o8Dn&#xa;laole6pNXtRIoWro8jrvIIM0O0sasmkGdoWhucxtxTlm6MhsdipbOyCZpjOqrtrDDA3xxBTD/h&#xa;qjbSq6VTTMsjzGdW4qNi8MRtCC1jCCaGNo7y1xO+e4m92w0xlPbGEpgnbsCiOA3RFEsLOZVh0M&#xa;QXteJbGTmf9TA/J+l2YoBe/EGjWNsjhmyMYzG6XJ2aaqlwZ9djZ7mtYMq2rywUTmyaKSmYizpx&#xa;qyUC/hmRBaGgg+YOj3K89SuaJVS6ouL52Wx/XC8rhuc7Oo5En0INVlzjBsi/JbYbiz2VFVXzIW&#xa;ucjZvFFwY7R6M4axWK34eb+F4ORyhfuwjyfqBdKKpuVUm1NxnkNvGM/i+dYmHKKyCEwwnNrsnV&#xa;vGesU+CYsgjkSM8pMUFeY37RD6GHYQYC6aRoWbNmH9ULxezlfVEcgxSvRRUpUnf0M4TqB1A2AY&#xa;jPsWcZtensCLMcLhSYbGGyblIYTTDKd9HNumqycwEEMDCDDtG6fnbuZ5RVxVCUNU/CHnX+qqHs&#xa;LLZNeqaCql5+y/2n16HOkY3cpXRbZNtRzC6GO9yRWVcJ7hmG83qeq2WuZyLm+qFXtk2eaC42xB&#xa;qdii0b1G7cPNtwuwo7mKyZVCTilSAcafCpH/FkYG2TBexwRDqEj37KJizzPE6oUpvQVeVKqafY&#xa;lbRtXMe6xt3m6GegI3R6t6nmG3Lz7IQtlrGo9bWL/xO4QHaYMurk4XgXGhyaemwhcfAxKuPIaB&#xa;yXnTuKHMid5xlQxayhKvNa1Jw21ZJ7dsWVVb1eSMavmCjiIJu5AKh/AOAWDBUAlacxsKN8S3ja&#xa;ZCDI0gn6JPaiBrdIm9Xt8eT9TVPoJ5qGJCLDDsFE1k02xI+d74raaFhrIAgx5BCM1iWlC3jG93&#xa;FkowqWnXXHUn6VA9UhPbH64R2KiGYWHJVbzuagQ3xVyzQD1tX/3wdFq/rmiUuj2u/TlOZ/Kk4F&#xa;AJXHSw2zcHEj4gUxbfnMKu+Bb5EqM7LCayOy4YEnGffu87WRi6n84o4RPquJrDHcFnuB3Gp7hD&#xa;UEtT4sT1MagvTymmKgA+Kb7oHXDJ7SlTqqXSxlldN8RTgWY54YJeDfnFrFLxeFszqs4nquU5bn&#xa;o74Zxzq92LER2pjUvXKwsHCQ1BGglNaIiGBTyA6F2EsYPobfG4oMlD7zPxWCHOL+jXUaIBorHk&#xa;T/R5RKVIJWd/xN7U9ENnit+l7whRoA2d6CJ6jz5NtBMl2ox92E9r0sSi1N8l2ptlE/3TbCDYGZ&#xa;yOdSfXkALWcAyYGQhOP0DvQGNfag2n3N81hs7gGs4A03iAhgcIDTR1Nv0SC3QGY6+s4Rw5N/Yr&#xa;xldxYWZiun+FzITRTX/DDh0hk90kLGgD7tP3AQT/pq1GCePO/7doRUmRMNwzIuFaEF86IsLXFj&#xa;poJTVt6KFHWAq7MIY9uIYOJ+5hipPiwUW8IZ40tLpEK+ascph0MncNb2LKifwyuT9F+nooI5cx&#xa;Q32iGW8Tp5MdXCVe8TDqSsWUNRSBbN969H1O8Ct0GnB8CzsV2UdV2+/40eNKrvvRRTZLpLeZ/B&#xa;Y2A9GgeEJ6lka8ih6mai7GAt8ilFyFsfIdrmdSv6NV7K7ixkzme1xPPcK7K06Z7zvFDLT8iXaJ&#xa;biwTV9dDiExUxNyR/AF7Z35DcGU6OUNAIZCInQ15AgVl+0MHIC3ksgDIe/R53+G4hY88hTHPwa&#xa;ZkinQ8dEK654XtyUSb8TFuewFFHfNAcBWfrzirAL5yviV8TfQ4WT5Mvw5QogTt9+gLHn3JoyMe&#xa;zaPnH1BLAwQUAAAICADnYYValSHMN/cDAACNCAAATwAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbm&#xa;UvYWRkb25zL2xsbS9NZXNzYWdlRXhwYW5kZXIkX2V4cGFuZE1lc3NhZ2VfY2xvc3VyZTEuY2xh&#xa;c3OtVVtz20QU/tZ2o1ZVY+fSlJRSCriJL2lFuJakDSQmaUKdhCbFpeHi2chrR42sNZKcIT+BH8&#xa;J7uAUPD7wyw29iGM5KquvEphNmeFmtzv075zvSn3//9juAe6gyrFmyae5yzztscsuse0K0HO4K&#xa;k9dq0vVNx2ma68L3eUMsf9vibk142aoIb7G4ajnSb3tiVgNjGGt4Uh4cmhSjYZYijYYkw4z0Gq&#xa;Yla2KPt30ztvLabmA3hXlfuMLjgah1Pc4xTJzKeztyYrjyLwUwzP5nMBouMFw6EY/hTq78lB/w&#xa;CMR24NluY75Hsrn7VFjBfL5fZOAiDIaUSzipznJvM7ZEXXjCtcQ8QybrBzywrZLDfX/NrUuGQn&#xa;lgg0TdocC2dM2uLflr1SpFWC8xsB2Gobu2awcLDAu5/pIGSAZXla8wTJ8pQL5iYBwTOlK4YmAY&#xa;6QtIYJJgB3u2z/Cg/L9RiqAOV2U7EN6aSx2jMhlG+wtiuFhVuaNXakhNlrjjMEwNwDNgbAyXB/&#xa;ZEw+sMyYagkOO5gePO4qaONzBF1HsRv7ctz24FS4eBUBaLNd4KFPVyDGnqVYt7YkMGy9+0uXPm&#xa;GewYKKCoI48ZhpHn+iUpHcFdDbeJJgfcaYvNOu1Sbqe3/tiIALyJWR0m3mJI2ARTI7AbIXmvPa&#xa;NJ4HHXr0uv+XxLye8GXtNp6u/TxmfJZzuk87oIeEhThknqV29PuyrF/tNoNJD0PIWJncdONDty&#xa;M+hztaDjLj6kfVV870lWHDjmwekNLGJJta1kIIMRRd1lhtxZl0/DfQbjWanR6t7L9VWbP/s2G1&#xa;jDJzpW8SAK3C3VwDrmlGKDQVdNLku5324x5E+0x3YP5L5QCPdkbZWWyBF+NjKlrl5/saGGLVoX&#xa;J7Q28AgPdWzjM1rlUkiC0bK0uFPhns13HfFIHUTZsu2KjXZzV3ixZHIr4nnF9m0SLLquVHygZa&#xa;dZETWs/XXeim2NNZdYFAIUpE4vu2rZ6Qsb1UVQt2Xbs8SK7QjM0nRSoAqRzCTUlwbI6Gps9PwO&#xa;oxijv9gQ6cdxmc7H9PYpkjhHz/FCceZXvHRrLjWZKlR/wdXJ1OMfSM7wOZ0FigryfhnXgPD2Cq&#xa;6TTt1epVsivKl8SZIS1+PoJdIoXbpY+BlXjzHdwa0O3j4iUQJP4mIAI0wyEZl2k6TxTpiE4V3c&#xa;JJ0KOBW+A+fjeEfdEo1IHnvvxLHfC/U3uv5Zeiq7oQI7xp3T3kP93pkUPsBcDGcphjNdOMZHo4&#xa;nvqYwOPj76ESvl4h9IK2kH5Sfln7BSPMZmFP4LOmlrhv/CmIbVDKOWP4zjZWI0qQ4qRyHmJL6k&#xa;UydpIkQzgq+UniSX8HXYNe0fUEsDBBQAAAgIAOdhhVrXfVhFxgwAAOseAABfAAAAY29tL2Jhcn&#xa;J5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0JyYW5jaEdlbmVyYXRvckZhY3RvcnkkX2NyZWF0&#xa;ZUdlbmVyYXRlQnJhbmNoZXNfY2xvc3VyZTEuY2xhc3PtWWd0G8cR/vZYcATBdmxasQiUZImiCi&#xa;LHiR3STixRssyEchFpM5KSMCfgSJ4J4qDDgRLTm5M4xenF6b0XWbYlGY6tdDu9Or1Xp/denG/v&#xa;jhBEgoycF72XH3kPvNmd3ZudnZ35Zvb48X8W7gBwkUgI7E06M4kDpuvOzZjJxIRrWdm0mbESZi&#xa;rlZHKJdHomsd01M8mpXVbGck3PcS8xk3zOrR1PupbpWSHfCmZZufFk2snlXWtrBEKgedJ1nNm5&#xa;BGVOJgaDkQgqBDY57mQi6aSsKTOfS4Sz3HzGs2esxLzMVPGNKoGu8npsCd4ViP87hQQu+E83G0&#xa;GNQFt5+QLn9g5fY86aibxnpxO7zezAgu6GoO/b4PID11hJbyCGWsQE9FA3CmkfLjXVHmvCcq1M&#xa;0hoQqExZWU5oXJvzTM9ODqbNXG4oM+EI9A2XtaI1keYatpNJFOdSTGR8nBJ2DwqIfQLVF9oZ23&#xa;uwwFW9i7Urwymv3BLsDVcLrD8juRuujqEV7VFUYkUM9WiogYaVMTQGrU7u3puyufv9w2fNUWmb&#xa;+nEn71nuUIYm5gYEjMWqCtSOK12CLi2YcgbNdFrghWdmwbPGKeNeAq1lTyaCczhURt/gHNZHsQ&#xa;69AhWTFjfY0lvWcfuwUU3bJKD1btCxpYJQAoHN5Vxxdiabzk/amcTsBYmhTGpuKEMrT5hKEYZj&#xa;zQHH8XKea2YFnl6qlJ2ZdaatxG7Lm3JSl5qZVNrKrR12nOl8tnT/I55rZyYHlnpxdC5rlZk+tG&#xa;HxC+ogR2zP4vbuj/OiOBcPaKjGA+l9STNHU6wpZ7IFUR7DBXiQQVv0M8KSOi6kw9COV7hO1nK9&#xa;uVNClseFB+MhBs15Mc2bt3VsNxgG7FSnnclJy9Wx00CFYqxU7x5O5A7ZamvqeRXl2p5t5SK4VK&#xa;CjdHzMzqScQ4OO798eJzyUbuAvbh7yEtsdN2W5w+YcgyCCYQEZHl+J8O15O81JEVzGczOztrKY&#xa;UucKg6FLdepmzGlrnAPjSY7oGBFYt7TRFm75KgNVIGhEM3SgUTPY6cMNVCvRsZRtcveXWumsYu&#xa;83EPFXTDqZCXtyt5kx/emPMqD7lgr4OkwDNf77PIVtPkrssDkvxSnBsTMhnBlIlVN6ApMGopgi&#xa;sNq5nTNZb07HNYrNvdQivUSY7VNeklFeQviO0jMyro88Og4KbF0uJ44kXTvrbZ/zLDVjW8rMeu&#xa;o4CI0xImPWdK2dB/Nm+oyBl5rkMRuFh0PMLUVf2GHlpj0nGwEdNpIKOjoeK3BOqVg/ryx1mI83&#xa;EMMTqJc/mrG8xFV7hiJ4En12yvOyuf5E4tTGt5h2Ytqay+l4io5WBpxKSwLnL15tcSSXXf9aPN&#xa;1AHZ7BUz7gOodylo7rDGYWHtSm+eWZObwJx53ZovQw7S0qtZjJpENTJ+jCmwOFniPwgKHMrJm2&#xa;U3Ez701ZPIikqfJq3HHjdibpuC7XjG+7YijON+JZ15m1U1Zqi47ruXvLdR13t5XL0T11PP/fOt&#xa;tym5rACw004EWsGHKWSu5WSsdLDKZJBs3Wobg5Ezdz03w9zhh24wfzVk7puSU+ZtpenFuNU/04&#xa;64wso8Cigi8nvAdpkfg0yQHGhgoyHa8QeMR9TWiLgXj5yHmVgSa8mptJcTOTVELHaw0YajMdOc&#xa;sLVBl2AmPvsXha9qw16uh4g8BD/8Nsu4QqbzLQjDczFrnu1XbOPpCmMm8tH0X7lpDxdgMteIfv&#xa;uxNU8l0GU+nUfFD5k0enaOtUBO8VSJ61OmbtfOvcCG4kPhL2Rov1Sgw3qbxdiZuFsM9Cyfd/dr&#xa;kyWBVVx6I4iuMC/WUgrcztaClUu1WhWoE1RVK9OuyYKZU13megTWFtK92X6d2zDnuDpeMnDbQr&#xa;X6xi4nc9HR80sEIlp+6dCp0IYvEFzhanoDwR/yO8u53mv84hk7ERwZ0CTSFyONc4YyzemJUFRp&#xa;b3qfmEsVyGOxTIyiVCodz2x/BxlaE+QTDPWbM0q45PCUycEZDet7WWCO3PGJD4LOFg2etqsOIQ&#xa;i90IPn9a4AeiIvgis+nMfC74ksCG0i3sPJy0sgrqlsqoXzGwEl89TXCwZARfZ6CPqCOL+yfaH9&#xa;fxTQFWQt9Wi+xfLG9/mZTj++l3o/gCvicwUM66pY66a/lM9QOVqX54mvsUNxjBj3mUTLEPs1hf&#xa;1OXmcp41E+ZIunY+Z7nFXtUMzU1XrZkxD4+yWsuw1Knl9KxyVAYK00eYcel+9adXwAINC0peJu&#xa;TSMpfd0rKWl3vi7261IKvPPVYy7+aYctJUMrajpPqkzoOlVaeqhecrS+K/ql7VxdB/g68ectxp&#xa;yw3An5cCjrWWPXaquyBUIviHf/lQ98vOeevzppTJqbrl1AeSAR1r1AVME/hF71m8Iv/P3XDpaa&#xa;LCQIeoDK5Zg8UPKU29C29mjD3O2OF/RWley+aI/yGFt0TTNzYvPHyn1MWLQ3xX96X705pPuxEH&#xa;E2KiVsSiuFvU0TlU8VoidmPZG1D5hWKiQTQS7ERTjMWRUcMjbRboPdMPPBHRGtx0Sj4PXVSuZD&#xa;/jL0Yx0S5WREWbkIHgoqox0SGiaqCTZZMyZ3AzV3hT5mpd9hLPBLT8xIiI+3deNTsmVotVUdEj&#xa;1jDcijUOw2PQDzdDFYrpq03XVglqVD0UJnpmcpqHH/Ybhu2MdVl+5gDDMeDIPQF6h0XftkzG8f&#xa;x6U0HFUIaB4G/Wx5KdGbUq4SLQkdseYZmdtC6xlaTG7fOfMYLhHLbyzl7JS3w1Khs19VULIG30&#xa;aVSdLul1rDtbGLkRzmtlEhdiHXtTvNxHSFf3bdx0HHJzf5Ws6hu/BR2yakxW9lfLatXrktVjN6&#xa;qvLmI9n+fx7gz0oBur1KcYtuL8E35rNf80v6W0qPBbSg+l3RqsDVatup66rCGInNx4G9btGz+O&#xa;Df36pmKzZnOxGZWVxXatrCq2Y7K62K6TkWK7vu9mdBzD5gIGgAK2Af0NsmHsdO4OoPhCo2xcML&#xa;qrZLRJNo0ZQ8WuIY0x42H9zbJ5zNjd3yJbxozL+1tlq5LQdUrCHvUYKxHTJtsWTNlXMtou2xeM&#xa;PpJqr5ArFnAfTa6UckzK0xVOqofNwZVy5ZjU/YEZxcsCN2BU1pNjuCdw+AZ0Go8p4ImA8WTjqQ&#xa;U8U016NjD2VshTA88tGZCN6t3nFfBidkR/ByA7jsiGAl5Won+n7ByTK4KpN8iov/5rSsa7ZFcg&#xa;SKrNyE5/wuvVEm9RSyhmZQHvVO0mNSGQ8B72jSO34ejevr5juEXWyhoZlXUyJttkvdRlkzRkl+&#xa;yU7bLxOE4UuBz6u2X3mOw2ogXcocR/QInsLuDDHKKnylVH+uP+EsZHZdy46wQ+WcDn5nd5G76w&#xa;t/J23L23QsYL+BowUnU7vrG3wvjWyN5K4zsjx/H9An5EST2U1HPkZP9qufokdHGlOKI5uEfcqE&#xa;0rqqU1x+8rfoERo/ikPl9RR7vFp8e0WxVFhejl805U3yuuQ0cEWgR3l/utK/cr5f9z/lccUj+g&#xa;teVPKERwz70YUhEcwV33kp6FlZRosYGyXXTiSsQwyQvEtcSBNzL+jxIFbiUSvZ9YdCfx56doEz&#xa;raRTdWiPOYVa9EXCTRI7JYTTusFa/FOvEurBc3o0/chc3iHpyrabi/Vo/ztG6cr+1BWjMxox2E&#xa;o12LrMIlcYHCI+1kiEtCuwM/4cq6/7X4Jz5CxbSbuHIDasiLsaWwql17G35GXpS8drZ6iFprtF&#xa;fh5+TVkreGrR7iV0J7Pn5BXoy8BFs9RMEB7Wn4JXl15A2w1UME3qUdxq/IqydvF1s9xNeUth8X&#xa;stWAp2gXYTtpI16nrcJOtprwXq0Rv2bLwDGtBr/hvGbczt3+lq0WfFj8Db9jq5Wl7Fcwwnltok&#xa;oU8Hu22pkZ34Q/cHSF2Cquxx/ZkuIycRB/Ymul+AjegT9zXqf4IZ6Fv7DVpV1OtP6rQm/abgh/&#xa;w9/ZF7iX2KwpbBbn0GLMG3jsfx+bfXCSNfNBLmvVI6YedeqhgKogmFuOFFPNywNV5o8Uj1l8pH&#xa;AWHylSi48UD198pBhefKS4ePGRMuUtOFLRx3a1+o+jr2s1nd83HzZSJ8WsKwXpUxuKBYPBhhYI&#xa;0csK6boPQhorRY2Ihql9Oy2hUvH6vmOi3tDeDL3vhDCOHBUtwxvvRIPinhAr9w7fJFo2HhNdgX&#xa;gFRiwF6/+O5ohoaxSiW6wK5TWGSlWeEGuP+Im/Umzk0wjX0enKR30HahKb1CjtXyc2q8sC7bWF&#xa;9HsEhvPZS+B+Pr0opIMhvSSkV4Z0NKR7Q/qIkI6H9EBIrZBOh/RxIX1aSJ8V0heE9KUhfWVIXx&#xa;fSN4b0bSF9d0hvD+n7Q/qhkH46pF8OqBBC+xdQSwMEFAAACAgA52GFWsFUsoW9BAAA9gsAAH0A&#xa;AABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vQnJhbmNoR2VuZXJhdG9yRmFjdG&#xa;9yeSRfY3JlYXRlR2VuZXJhdGVCcmFuY2hlc19jbG9zdXJlMSRfY2xvc3VyZTIkX2Nsb3N1cmUz&#xa;JF9jbG9zdXJlNS5jbGFzc8VW3VMbVRT/XQjZkG4hQAuN0lrb8BECXSiiFUoVsNBoQitQkIqmm8&#xa;1NWNjsZnY3dPLmkzP+Ib6jVWT64Ksz/k2O47m7S4yyrfHBOpm559x7vj83v/7+4mcAi7AYnmlW&#xa;VSmqtt2oqppStjmvGarJFbVUskxHMYyqsmyrpra/xk1uq65lr6oanY1UQbO56vLgnftc3Clohu&#xa;XUbT6TOsNuN7HZJjYngTEMVGzLOmooZLGirPgUCZ0Mk5ZdUTSrxPfVuqMEXHbddPUqV84slpoS&#xa;XQxXw7285csy7P5ncUqIMVz/Jy4G7TVkWsIFhu7mlaH6WssroafF/GwLPscQLVkrqmEwjI7nDt&#xa;Qj1a/6w+IB19yF9PknGf0YYBgkV/PUCcaWWtngWt129CNuUEWHcq3ds8HL3OamxhcYuqqCnywa&#xa;VqXCbYZEynFVV9dWDNVxsmaZ+n4iF9pivGyQbd0ylSYvKZQKBdKQX2FgT0jtXd3U3XsMRkggIS&#xa;/hbv675/Q2w1hb5tLbMq7irTgiuC7jMga70YEbMoZ8LCXjio+NMkTcfd1haOT+pyVAqe0pWHWX&#xa;21mTKkSBMvSfD4nhQkF46l8ZLofmSMIUQ2eFE8Ol8dB+UjAdxy3QLEY06sQYZjtpDYJhKqwXjq&#xa;o1o17RTeXojpI1S42sSX6WVWHoXersomW5jmurNYavWwujm0fWIVfy3N23Sg9Us2RwJ5WzrMN6&#xa;rbVam66tm5WFlwluNWo8hD2bPi8ghmpTdzkFeAfvx/Ee5nujoKRFfQaGvfb6tJ3mCkvrIu71Ux&#xa;o/oDkx+bN1SiNDkuqw9JLBHT7rccqe6ZQtu/rnSie3YySa9we4m9BcMMMDKbpsemNMKVK98SQ7&#xa;VOnWbmiSSFHi775KeOCrD4QH/tImvpiMj/FJHFnkGGZe9RXa1Gy95i43XC44lkpqjdpDwjrDRb&#xa;EeWnzMhO67cK9lPMKncTzEhowk3hBzusUw3u6ukkB7Qj6L0N90i+Pngky3v/xkfIbdOHbwxFfc&#xa;dFXGHtYE4QuGeMorlOhxhvR4SJOGjgPDtVczSlC9LS64ZWh4GkcRJRrfFa/J+nMWzfG2autq0e&#xa;Bb4mDozekmX69Xi9wOXpIbfsm2dUenhyXTtEQb0WajWlFHaYd5tRbwylmTOtELkBO5974pdhWN&#xa;nu8Xhbpp1W2Nr+qCO7F8tgR8soMZKliENkoUXYkOsX0BgkMBvOLBuKgswW/wJoZpcOivEG3sa3&#xa;SW6fYVOtFNcHoiM/kT3p6ajyajE4UfcTMZ3UlG5qWkJG4jSWkn2TUfS8bEbSwZ2/nO22QVOu+R&#xa;ddCyG0darDfCJpAhmsAmCevwMOFbp4cJ7yIeJvzrIk768AbePCKK4B+e+AE3T3A7Q3CEIIExAi&#xa;/wIXBM9A7s0xn1rOx5Xgz6ck0vhrHkecGwjGmiCe2j3h2IBdqPmzHI/nsgrQe6Vzz6R6HyI23L&#xa;3w+VH2tPPhHBKtaC7CyTHhHl2MQJ8v0d35KiU2wef4/Hucwv6BWvp/h8N/ccjzMn+NJXf0AnzX&#xa;XPbxiQsJNgKOBpoC8R+BM5BT/2shbBIZ03CIqeiKOPPAMuEuz1+Ps8+330MzzuXlxC1auHBNOT&#xa;YLhLt3cw9wdQSwMEFAAACAgA52GFWhXPvim5BgAAmw4AAD0AAABjb20vYmFycnltYWMvZnJlZX&#xa;BsYW5lL2FkZG9ucy9sbG0vRGVwZW5kZW5jeUxvYWRlckNsYXNzLmNsYXNznVdrdxtHGX5GVryy&#xa;ItvKOG0uLYFSh9pyki1tSpK6LdhOkxgkN0ROjAjFrFdjeZPVrthdmYpSLgUKLeF+p9yhwEdzKz&#xa;45Bz7COfwmDodndle2guXa8EHvzM68t3nv+ue/7/4NwNP4ncA522+aK1YQdJqWba4GSrVcy1Om&#xa;Va/7Xmi6btO8qFrKqyvP7pR9q66COdcKQwNCoHjLWrdM4jfM51ZuKTsyMCBwtBH4/nonOb8c77&#xa;u3BwQe7MvuTEJDluNhZEWOHZ/Oe6u+QKnsBw3T9utqzWqHZso9UKsueTq+Z27hTgsYy8vkUJkT&#xa;EB8WGGqqyIqvBY6Ue/WqdC9IM/iU4znRMwIDE5M3qGEXMQosL1z1g6Z5WXkqsCJVny5gBKN5ZH&#xa;FIYGy8oaJqrG5lW86xicldJBUwhsN5ZHBfAQUMD3F3RCAbrTkku1D+Pz3BBxRdfm5dOorsLk+U&#xa;/9s50/s5mUyO2pHjmhWrRebm3nrN+d6q06hYntVQgYG3CRRomZkY4aIT5PD2AcYbBE738+R6s+&#xa;W2G45nrp835716Z96LVLBq2crAO+nCFd+PQrqiJfBK76Mcb92/rbR51/z6FcuruyocL/v+7Xar&#xa;913VKHC8xvRuhIudluqDPj+5k2DOct2qEyn6cRwn83gY7xodxCOMnwSBydSrX+KcXS3ce1TAJE&#xa;qSFpoSOGhrusS/OZzmAU15NfBbKoiYHyd3iujL0MSjkgZ/Nw1otRytumb3uMBje7tzpktwybIj&#xa;P+gYeIKPdP1GQ/M4J5BpOzlcIPe+idn2IqepzKodOK1othMpjTFTt1qRDg5G1JAdKCZTRbt0fO&#xa;Lm3kFYYK16Jo+n8F6B0YR4ZvtRMwJndzP8FotdrD4nmYQXBe5fYa7ba2me+92X53BJ4PzeFpvt&#xa;S23gCjkn+nYrSIKpwhzez7yla5MwvOo7OuoFpt86b9PwvLfCzLl+2A50XJZR0WZaoJmaKgyZjs&#xa;++0GJqaDNdFRhW8VclucrhGl249+Mq93IysEhO1HzW8epUhtbNgWVTphIvOa5K0pFCPyRwWBen&#xa;lEd4KfCbGiEHVuez+5bdw9PARygrtNZVl+ein3D8qEDeY6gtWkmgfkzg1N4SFrYoDKzQXbyq8M&#xa;jl2TVlt4PQWVcuA6EuMBKosEU6ddUKQi1hVeCJvSVcu4cq7Z5rrJF1x2JSXVFuSzO7JfD4PlpA&#xa;D03KyqW39buTw+uMeEaXty/XLmyRpbyYkcN2bzXPgUE5nLq2W5UieqDSexRT57D+v/j0nmHiBX&#xa;bTpImtWm036ro2h0/SJfpizm+2rMAJfW/77lOsSomy1Gdn2ujS121BAjlGbNqhxyYmd5SLAj6H&#xa;l3Vf/zyfq8eBno4+1Scnd+/xX8QrOge/VEAOQ7rHvyowsd8JxsBXkubZM/883a/k73skKuCr+F&#xa;oed/D1hPGWqgV8U08jd/AtgQd2jjxxF/Ysl2a8P5G/onhnLmoMR3navvf1tYGB71FUqHpNeHxi&#xa;F3vpgSuv56ikcwtMTvRpvX2bvMCJt0Y08OO4b2nsAn6K1/P4CX7GiWuOhtMh49uWe4NRZa24rA&#xa;EEnN6uJe3rhhM6PJjxPF8PeIwiZlnZ8dRCu7mighR7mNOffZsVMP3OV/12YMflitV9tju5JFqF&#xa;eIjRkGVXHsRAMa/DAyi+ijwOcn1Zj4QcAQZ5zxGTmL/g16NcM1xl6S/8vUlXTJWW/4yjU0u/jw&#xa;eqXxIWuAKHcAzHuf4q5VHkOoQH8CD35CTuUN4BrmfkidJdnAIWTi/JzF08BjyZPZZdKh7+K7K1&#xa;AXm2WsvK9xjJx3l+TFVrB+ST1drgqeom3ncXzwL65DJP5Lz8wCaeq9YM+cFqLZcSVTWH67Ia3x&#xa;yQSxrxulzSn2RQrRUHZY3QSNFvavTn5c0UfVmjPy+Xt9Fz0iIckrZUMU4xLxuEB6VDWJC3CYdl&#xa;k3BE+oSj8uOERRkSHpInCKVsE44VBxOBn9ACO1rWi1pWR76YvuElvoGfL3VF87dBK2bwa+0Beg&#xa;4w6KscjhA+TG9p659NrIpP4zPxjHsG57gT8e4CdxkMiZP4LHcDOCyO4zR32WJW/xVIPIPZ1MeP&#xa;0L9fkJk3kCtt4ssbf8Br5al/YFSfbuIbtfIf8drUm/j2Ruz4N2L3Zkb+hTGDOSx0MqcxY3LVEX&#xa;Gk9Cccrf0d2Y2lUo2hw7DRJ9v0DJN5A9+PQ2aE6umQ+Q5/340xfoAfpgxlquBgaYo8dOAlYab/&#xa;yqQ0xSH8CK+nDyrG4oHsJn6+Ee8y+E0MDfyW63HKmuDXO5gQej2TrrN46D9QSwMEFAAACAgA52&#xa;GFWnJ9UHldBAAAoQkAAFMAAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vUmVz&#xa;cG9uc2VQYXJzZXJDbGFzcyRfcGFyc2VBbmFseXNpc19jbG9zdXJlNC5jbGFzc61V73MTRRh+Ng&#xa;29JAQaUiG2IKJUmrSFswpaDFXaWCCaUmhqlfojbC6b9OhlN3N36Uz+AR3/Bb87fq06g51+8Ksz&#xa;/k2O47t3R4g0MB2GL7e77777vM/78/7+9+BPAIuwGVYt1Tbr3HV7bW6ZTVeIjsOlMHmjoaRnOk&#xa;7bXBdeh/biHnc94ZYc7nlTtY4+LEnu9Dzbq1mO8rquuGqAMYy3XKV2eybhtMxSeGNghGFOuS3T&#xa;Ug2xzbueGWm5XenbbWHeFlK43BeN/otjDJNDbF8JHzLknkOC4dpLOWUgyXDif5gMF/OVR3yXh8&#xa;5UfdeWrWIhFHV92zFXeaeYxnGkGTJTns992wrAyrKpGGYqQ10WTUdYvq2k2dctMhi1GiGslhjY&#xa;FsPoDVva/scM04MM1uqP6GXxsKSwmUYW4ynE8RpD3N/W5NcqrzS7xPFkTXV94ZYluSotwZA9TI&#xa;XheE3bD4/kSUOVuOMwLBzNk2GIhu2ttDt+L4E3Rqh0wXB5WGR32x2n27KlubtglmWjV5ZEtskt&#xa;qqYLDMm6Ur7nu7zD8P0gF1vuqh1hrgp/WzXucNlwhDdVUWqn2ykeTv/zHm70OmKIerlw+IGOR9&#xa;X2BZXO27iYwluYGhvFOxSrUIHh0pBYDYlMGtPIZykgBYZYvpDALCXf4h6F/fQwhK00LuNKluJn&#xa;Mpx6er+slCO4NDBPsd7lTlesNRnO5LcGbUZKZPR9XE3hPVxjSFjUsy3lUj+OdpQtfS8goNN9rh&#xa;JlhSIuvaZy20+bvJjAWZ3IGMMP+VdcpS9ZZDqUi1nEQD03PtUSfjXoZsotD+wxTOQLlcHZ1r+i&#xa;As08i2dgmaJDMNHj8fygzfBZGp9iJYUSbjHMv2g4Vi3X7vjLPV9ojaUG71BdG7hD80pPiQGOs0&#xa;PrZjjrND7D5ymUUUnjJMaS5PtdhvxRR5aBewzpJx6GA28xf8jJwtFnYBrrqKZwHxshcJ9qGptY&#xa;0hdfMqR0bsLmZCjkh3TX0D5mOP9iRQNfUw07gXYa32IrhW/wHVVziajrQaeorDe5a/O6Izb0h6&#xa;JPNWLt0D8gOo9VbCnudtt14UaSifUwhZu2Z5NgSUqly4pqmVwsSxkVs6Dj2IrUNUwzI+RFrlZV&#xa;17XELVsjZZafTK/w2sM8JSxOrTyKWCalMwhkfkQGp6ixjpGc/gf0fUin6xiBbjdjZnbuD5z+NZ&#xa;ignL4XAvEoziCnxyrtXscE3endJO1itD+LcxHMQ1q1fm7uADPAAd4FfoIR/wXxkX18sEdXI6gH&#xa;1mPZmwxWgKPRFgas5frWcvgwspYjjdDadbIWC6wVI9JJIn2AT4C9Z2gn+0DJPlAyAmpEpj+imM&#xa;RxE0uRC8t0F6N1euYxbmdjPyMxs4/Vvd/oXzn7F8a0dB9fPKj8jrXZx/gqNFkPgGMn/8G4gfsZ&#xa;hgfYivAytGq78X3U9gIucQj6pkiq7SQoG81AmsIJtPTIg4FtWifJh0t0Oo83g3UuWou48R9QSw&#xa;MEFAAACAgA52GFWhp2ed1nBgAAQhAAAGwAAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9u&#xa;cy9sbG0vRGlhbG9nSGVscGVyQ2xhc3MkX3Nob3dDb21wYXJpc29uRGlhbG9nX2Nsb3N1cmUyJF&#xa;9jbG9zdXJlNCRfY2xvc3VyZTUuY2xhc3O9V+t3E1UQ/922ZNN0oW0KhVV8YSxpCkRUHraAtuFV&#xa;m1JsKjWAxm1yky5sduPuplAV34KIT3zjW4/f6wPogaNfPce/yeNx7u6SpnSpPUfhw+7MvTtzZ+&#xa;be38zc/fPvK78D2IkfGIp5s5ycUC1ruqzmk0WL84quGjypFgqmYSd1vZzcram6WdrP9Qq3Urpq&#xa;27GcPWmeSJnlimpptml4Arm8btpViz8Qu8Y9VOO2SGAMHSXLNKemk2SglEx5XyQ0MmwwrVIybx&#xa;b4pFq1k76UVTUcrcyT+7jBLdXhhZrGMoY1C5za5KkxjP7/EUkIM9y5uAzD0Zu5lRJaGJprwzp+&#xa;C0OoYKZUXWfoiqePqVOqt8MjE8d43unrXjgloxVtDLLNdRrywth0hTOsTtefzygvcosbed5Hgg&#xa;VeVKu6I+RshpZ81XbMsj8K5U2jqJXII48Z4nQIbTHbUR0t7wY5aBRNhkQ68JR5UfigmUayJksW&#xa;pVyOVhhOMbDDZGKHZmjOLoYLAfEFzATHcTOnuw8xrF+Sc92HZKzFnRE04S4ZUXQ0owH3yFjpcf&#xa;fKWOVx98no9Lj1MlZ7XDdDkzOp0a5Ppm9N4tJZrMiZVYdbgwYdKcXKEF0YFYEiJxzzhnT+10tI&#xa;uF/4zk86YVCuNIwMhUEoXu4ja6DqOKYRxlaG9jnVAdPUuWpI2E6ImFL1Kh8pMnTGD9dj2hciUP&#xa;eiL4KHsYOhVXUhdZBbRdMq80IYBJ7KrdmxGrdVwqMUYYk7Y3U7szIemJADSAlI7BbguCOCfuxl&#xa;2LxYWczkLa3iDEw7XEj0F9QKnZGE/SIPLU71clitMMTiR25YEaqOpidJiqw/hqEIBpGmVJvwT+&#xa;JAI7WIBoaNQU5MlSt6taQZyantyUGjMD1okPGimqfi/Dg5MGGaju1YwoHT9UmhGVPmcZ4c5s6k&#xa;WdivGgWd27G0aR6vVuozJeNYmlHqu5GiqDsB4oPdCxVEVcxoDqcQMxiLYBRPtIZAuRryBBjOxW&#xa;9VIl236YEoeBLZKG27KHkpkWt6GEdvPXC3SXiaYdd/qbVelXsmghxUynaNgN9KiZCZ13DWXlMm&#xa;qBi2yNS5Zk8VZVXg0hKoBDTSWjImRc6UoHlr757Xo6LxepSnNVvUqIZ4dxhlAWxQMcqrtiMyZP&#xa;EEcVVlVPBslJQsKodkK1XfAJvFhN8D5RrvtsH5ye4D9d/btC8orJ4UVqcjVPvb6QIVE3voNlZK&#xa;BdU9aAaFjNRvVe0TWQoLfzyxjnm+eAIyXsRLEWzGy1SoRI+tW7Yn0MlgQzJexWuigrwuYw0U0a&#xa;pOM8SX2vAlvOlv3dx1YWd8gbfdS79ByHgL5yI4i7e9hWuuyngXp8SH9xgiYju98sPQHQ+oH4GV&#xa;iq6CiwtK+JASWHelZXyM8xF8hE/qrmxb6/hthMQUhSTaqplX9UOUr+qEzsfEi5Cd1gx+oFqe4J&#xa;Y/o4x6HeCQZms00W8YpkAEVQI6QwJH/jiVF19WHjQMvyAIpLbuMYRVwpbnL21Bxqxaeb5XE9Jt&#xa;A9fqtvfZJmA0UFOiYCC1NYjLCkB0pU9X+bTTp6tdGhEIIHoWt+F2yrQI6VNPo/cFGs2gEcuJph&#xa;M9Gy7j7o29YSWcyF3EOiU8rjT1NivNYhRTmseVZb0RJSJGXUpkXAn1tigtYhRXWsYVqVdWZDFK&#xa;KPL4T24+f0HvUYTpPYQebBBJTtxGbKJvgksS1+ByIo5GlxORNLmciGWZy4loQi4n4qEfF3FZ9r&#xa;2/SL6LNU4l2kK/YXO2MfpgJtsU3ZLJLotuy2RDTbPYmclK0Ucy2fBV9GcTiUvYk/gV6+iJ0dNF&#xa;T5yexGXsy8xi+AqOAOMJqW6tp8RapB+6ityc/mVM1ORnRGPGl+7WCmf6MEyZJ8Lv9JyrhX8KeT&#xa;d8hgJS9E2E0OWOgbBY9hKOzdQ2T/bmfe2v6AnRDHe/H4fu6/f4+stFSKR/BbbnUv0iywMXcQKd&#xa;6FqyE9VA/fiS9adwIiCIhBvEc0sNorXmRIyokAsl2CU8f712aKF2WxNeoDPxoDRA2uK01pP9V6&#xa;INP1Iss3hj5mecSff8gVYxO4t3sulfcKbnEt73lv+a3lRcV/yFDgln6RfuA5z312vzQyIIfjrj&#xa;nn4TvqF3gmDd7GKlnTwTUbW7dlcQ7Sf6GdEc0c+JfutqycR952JMwvdEo8SN0zOCgy41YP4DUE&#xa;sDBBQAAAgIAOdhhVpQM+fH7QMAAFIIAABPAAAAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRv&#xa;bnMvbGxtL01lc3NhZ2VFeHBhbmRlciRfZ2V0QmluZGluZ01hcF9jbG9zdXJlMi5jbGFzc61VW1&#xa;PbRhg9azsoUQQ2l5CSpmnauuALiUp6TQhpwSWExkAKKWnoxbPIa6Mg77qSzJSf0B/Sd3qjTB/y&#xa;mpn+pk6n30qKw8XN0Jm+rKTves6357P//PuPpwBm8C3DoqNa9ib3/d0Wd+yGL0Tb41LYvF5XMr&#xa;A9r2UviSDgTTH/fZvLuvDztaYI51xZd2VzibdrjqeCji9uGGAMw01fqZ1dm2o07UrsMZBmmFR+&#xa;03ZUXWzxTmAnUX5Hhm5L2AtCCp+Hot7NOMMweqzv9TiJ4eK/AGCY+s9kDJxj6D9Sj2G8UH3Cd3&#xa;hMYmXziXDC6eJJk4XzsBgyklgRquph6quiIXwhHTHNkMsHIQ9dp+LxIFiUDcVQqvYch2h4VNhV&#xa;0u7GUr5Rq1GFpQoD22Dou+1KN7zDcKcHyh6W3qiK6wwTpypQXLcwglETGVy0MIDsOaQwRrTDLT&#xa;dguF/93wREVAdqqhMKf1HSxAgmw9BJQAzna7p3/EkDqasK9zyGCz2pGniDIU0dGUYKPW/xLeRN&#xa;vIm3ST8vE+ma47vtcG43FDpits7bodbPBEOWRtDmvlhW4fx3He6derQbFooomSigzDD4wj+nlC&#xa;e4NHCNbn+Hex2x0qCFKGwcxp8EEQEb75i4jimGlEs0DSK7HGny8vPbD30ug4byWy9WjfKuwjLp&#xa;Mj+gtc1Tzlqk0iUR8kh9DGM0r8Mz7bq0qI+zMXCL4SyVSZKHjww7TrNwGzMmpkHy7dcyPtSs3H&#xa;Ppere38Alm9djmLOQwqBX5KUPhtDtl4C6D9RxqvJEzhRNoi6dfUgv3sGhiAZ/FhbtQLVRxUzuW&#xa;GEw95KpS2x36jSkeGY8rd9S20Ay3VP0ebYkngnwcSrO+8vJAA5/TFnhRtIU1PDCxioe0oZVIBE&#xa;NV5XBvnfsu3/TEQ32QZKuuFMud1qbwE8vYaqzzdTdwyTArpdJ6oB2muyJpONu0q0mstShJRRFB&#xa;Qe7svNQ7rNc5wkVU11THd8Rd1xOYotvJgBAinUvpHxAgZ+pro+cPGMIw/RX1kX8EF+hcp68HSO&#xa;MMPUdK5cnf8cq1W5mxTKn2Gy6NZR79RHaGR3SWqCoo+1VcBqK313CFfPrtdXpLRW+6X5qspPWk&#xa;eoU82pctl37FpX2MH2DyADf2yJTClwkYUIJuMhqHdptk8W7UhOE95MmnC45H38DZpN5eF6IV25&#xa;Psx0nt9yP/1W6+fuq4vhLbx4fHs/tOZucy+Ag3EzpzCZ2J0j4+Hkr9SDAOUNn7GfPV8jNktfUA&#xa;9x9Xf8F8eR/LcfkNOmlrBv7CsIGFHMMKDT2ul0vYZA7wxV7EOY2v6DTJmorYDOJr7SdLP76Jpm&#xa;b8A1BLAwQUAAAICADnYYVasK1snC0IAAB0EQAANwAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUv&#xa;YWRkb25zL2xsbS9NZXNzYWdlRXhwYW5kZXIuY2xhc3OdV2t3G1cV3VeWNGNFidXJU2mapuAmsm&#xa;VHTcMjxG1CYtLUICclMhFKKWYsje1JpBkxMzJJC7QEKBTKq7zfECiF0pD0lbgKDeXV0vL4wA/g&#xa;G3xgLb6yFmuxgH1nRvFrnKasxHOu7j33zLln73PumVf+074M4Hb8SWBH1W4UJnTHOdXQq4VJxz&#xa;Cadd0yCnqtZltuoV5vFEYN19WnjAMnm7pVMxwFQiBzXJ/RC9ScKhyeOG5UPQVdAhumHNueORXM&#xa;H/THndWEwLpFhrYH2jTW63q6Z1aH67rrjliTtkB/0XamClW7ZkzrLbcQ2nWMyTqtmbZVuKI7JK&#xa;CMj9PC6LCAOCbQ3TA83V8WWF+c79FoZ4F7kreZluntEejK9R0V2NRR9Bzdcidtp1E4aFiGo3tG&#xa;bSiNVehJIY7rBFb3ThleyXd3dO492VzfMm9KYzXWpBDD2jTSWNnN0XqBuDdtctvO4muOPl1faf&#xa;jjcEFgV644h0bJc0xraqi4GJ+hvqVTAmvnO33EmDQcw6oaCm7gUi7CxlEZihtT2IwtjBwjIbAm&#xa;F2E5jdfh9VKtVyDV1L3pMfuIbXsqtnaReBAYjIJ3ptGst6ZMqzCzqzBi1U6NWJ7hTOrSoT7iOk&#xa;ELLvFpCjw43znTmrFPGDLm03btTkambri9Rds+0WoOXTUyCzaOnWoaEeojfUs3DOv1esn0DB4z&#xa;j4EU+jHYk8R2gRWMyF2O3TQcj7TeGhXBqFjdgh0ao3IrmdwwCazeVPEGjVHiTNzx4/ZmjcSRPz&#xa;3jJH/u1tDl/3TNew0Vt5PPgW9p7JXG4nirQILGWq6K/QLbIlwZifRlL96mIYED8lX6Cdo+uIhg&#xa;oeY1Hm0vRjQk8XbCR2ab1pjvfnFBAQkireAQq1Fk1rcsz2wYhVLVMZve/lOeITX21fSmJ6vRXZ&#xa;LGc3EvNR1Dr5X0SWbGyHzHg3y86klCzCNPcgSlFN6JMRaZlAqWjPhx27RUvPtV43M1q3txTIOC&#xa;uwViuT4V99BsVXe9VydPaDSNcbxPgwpdUsANkqyqoVsSIDKFj8ktk3LLlACfJjc2deY9N57QkJ&#xa;K0UqvTZr3GORWWhhVyauQ1V6re8QV1arxat92WY+xQ8H6BPddEqWJkeQrLkJuCA0ZKmWTO7KvX&#xa;VcwIDEXZnW9lOPBiOTROaqzSzF1Vpl1A1vuY1xYJN2yzHMkofUjDShmSjE5nXM92whWm2gMCPa&#xa;45USc0c5OnSf4qSekZo7J29ebuXhbalmfWC9SiLx/DxyXfHhTY0rma6E6hZLJIGmMGnzR4wGK5&#xa;ZHn8pIpVpI680gRuXsr6yNN+Gg9rjONnBFYF7nWsqvichh5JynjDrwGPaMjIHFY9O+Cdii9ruE&#xa;5yTGl0riFtKTtpQEZu8T08h+TCXVeuJWWCkNIAqWn4J5SvDp3j/cds3x8o+AH9f6i5wESHmrcq&#xa;+H4KZySpVCqEd/vqBRdc51b/IR6VHcGP6I6M+rxeIB+Zuct1Bz/GTyTMj6eZit2yO3hCIHetvY&#xa;+CnwmkO64GndPtUehfczOVxnk8mcI5PBUYvuJqGs/IPuYcnhW4fmmz5F/Vll4neOuC908YXCuM&#xa;SQ2TebC42bhiWMFzfJVrzA/hxtwy8ZKtWkp2YMH1LtCXi7ifIzsBgc1XV1TwC/Kt7mun8UtcTu&#xa;EF/IrcXaaOyZVoGpH2wz7ttaJd1etHdcfUJ5i08sFe8Uhwnx01ZaUw9lmWLdtJUpVcYmdZPUFb&#xa;oW5PkeQ/1GpMGE44kx6x2Jb60TC4IVWyW07VuMOUa5n9nQ4pOJiLm0ioOBuJJLoyKckwIPMQa/&#xa;wKytOyH2XbwX5e9rfUfJG/bqGMUWr9F/l3gWjm+8efxYZ8+Um/cXuJzzQlmP5ZbKT8Hf+SnMlQ&#xa;duN6bOKYlsRfaDlFuTZ/CZuPjV/ETaMDF3BzGzuBQ4PlYPwmoI23yMdtwO54Nl4eHGxjHxBv4w&#xa;45/Q6gcqisxQa10RdweBbv0sptvEeuTHBDIpsIDRlyahr4OlTt+GPYqcWC+YacbwKX4FS0GGcv&#xa;otXGvTxglL1kNlnOqM8jXunSPliq0J9SJaF9uFRJBtbuB0oVRftIqaJmE6VKJql9lE8lmyzN4h&#xa;O7laxS1h5q47O0pGbVclbtb+MLQFZp40uc6852l7PdbXwVzDKwg3uZzxsR+y9aSCo4rCCuYLP/&#xa;5P/DABM8jleotJWRlfito9zO0TARHCcO54jcP7AW/8I6sRLrfXQmg6jja4wFB2INvoFv+pgKjr&#xa;7F5xp+wG3lqIvt699xH0dxhuA5PMAdCTwBE6c5SnItj29zVcE/6eZ3OFKF5M53Oermv+9hR4j1&#xa;Seok+Ya/9XewLuY7WI8OlPNLsZYMGFiC9CiRHohERlIjvwzS+UVIn/GRzl/ED5ZHWjJnPtKDHa&#xa;DzS4COzwM6IYGeA2+TBM9FYnnkNjIuKeqtww0Y4AfRPkbyHmzBWX4hSbT2+LnzVx8jcQUjYA3+&#xa;7GMU49fFz32MunAMD/sYxfE4QygxSmTi8vsyQAH7w9zdxrx9TIs9CrV/Fj89/xTOFvMvoUfOzu&#xa;LpSvFpnOUpL5z3X/eyn7axVf/GaoV8ErLOh7WgQCl9Wt//DDZUXkT8fLm/wpLAciBn5vbzCCMK&#xa;AytLwSo6KkvBRf7N+hqXeIDAoBY6mOzP04YsKEH5kN/H4Z5MN57H5fBAGf/1pMgsfn3eH3Xh96&#xa;Edh/I3LEJnKH9L+QfKGGn4R8pHqCGd34acL98Yyl2hHArlnlAOh/LOUFZC+d5Q1kJZD6Udyg+E&#xa;cjSUnwrl50P5xVB+Bbn/AVBLAwQUAAAICADnYYVa/ekYBaAHAACYEgAAcwAAAGNvbS9iYXJyeW&#xa;1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9CcmFuY2hHZW5lcmF0b3JGYWN0b3J5JF9jcmVhdGVH&#xa;ZW5lcmF0ZUJyYW5jaGVzX2Nsb3N1cmUxJF9jbG9zdXJlMiRfY2xvc3VyZTMuY2xhc3PFWOl3G1&#xa;cV/z1L1ozlsa1Mtk5pGjV1YstLRNqmBLkttd0kdZGdYDk2cgrOePRsTzKaETMjpypLoUAX9h3C&#xa;voWw47TNgkOAb3D43D+H08N9M2Nh4onRF8I50dz77rv3vnffXZ1/vLP+ZwBP4q8MVcOp5hd112&#xa;1UdSO/5HJes3Sb5/VKxbG9vGVV82OubhsrJ7nNXd133BO6Qd9G74Lhct3nEZ2HXNxbMCzHq7v8&#xa;SO8G9kgTe1QCY9i57DrOaiNP5yznx8MdCQmGIcddzhtOha/odS8fcbl12zerPL9xTqUp0c6wL/&#xa;5uh0NZhvL/zDoJMkP2v3ExGPfgfSV0MnQ0l5vwRxlSFWdctyyGQ/3F8/qqHj77qcXz3PBHcltJ&#xa;CnqQEWKmbjnLDHuLm901zZe4y22DjzAkbXIVg+xyr0a2ELqHrJokojWjL09zo+565iq3yA/tVU&#xa;ElraRymbsMmV7P133TGLd0z5uwlxyGgWKs+/mSRdcyHTvf5KWzpYUF0jA5zsDmSe0Tpm36TzFc&#xa;jbExhhJv0f+BnJtl6GvpzrlZBfuwP40ksgpU7OxAGw4o2BVivQp2h9ghBXtCrF/B3hAbUHBfiA&#xa;2R2/wV02Nwivc088ln3QtO3efuhE2uJ+MZ1K1mMnQuiPuFS4bdse8mgQI7scyJYVd/bAwfxeNp&#xa;PIb3UKRUTApPj8t4b4KKHhiG4+JstVqz6sumnV89lp+wK40Jm666pIuznqCEWnQc3/Ndvcbwym&#xa;Z/mfaqc4HnJ7m/4lSe1e2Kxb3eouNcqNc2O7Hku6a9PHI3wZlGjcewT+S2CohcLpk+JxufwvvS&#xa;VMSf7klhlHIgZFAwjoxKdj5DmWmsmFaFXkzGCXpYeq/TrlPjrt9Q8KzgYpig3PSdEvdlvF+l+C&#xa;ApTa/VuF2Z4S/4p+q+Zdp81AtdLGOK4Vhr4RrnlHGcVpHAB0Q9MO26J6OkUjzTWjK949Wa35Ax&#xa;q6Jd3KKtPyejTNFq6J6Ig7jiNa/gLJ5XkcKHGC7e03BuYkclLDB00dvONMNWgS7CL4lFBuveVa&#xa;SwRFTSOAdKriTXhceogo/EXSGmB9/NaaYKCeepUG3bnsOYnaA0kkCVPnOnKgk2Feu8DEohtiCD&#xa;moDkCh8ZlJrk4ee2f6itGRRR7nLpVRUyLtIzeOaLdEBDRYcIq8yd8hI+xnD/HZFRyFIDy/YVi5&#xa;MFGZ8g9/ZlKSksk1eyvpOV8UmG/VmbX7QaWQqvgFobtjj1uqzoif1e7rCMlxly/We33u5sjA2B&#xa;5z6TRhWfpSub1ONkvNqC505u/wivq0jjc5RMJj3wjo1qMMaXHJeXRPXMbNBGl6jcBaSewK5RYd&#xa;YU2UKdooOC+5loGnhg43iqhbZHeqr/HsxEWybWqWAqENVmujkYaLQavctsINPeZDgeiJOKwYSQ&#xa;plq0g0bFXqKUgkmBKqUeTACkjWr+5ldobo2E2iK2nf/RGkIGBd/F99Jw8H2GI9vFc8lwzZo/1v&#xa;C54Bit6DV6IAk/pGAQs8am2wzGzlXx91PwY/wkjR/hpwo03C868s8Z+lsdfCT8gkHZsDAcm57s&#xa;32JkrvVJSsEv8as0ruDXoeLmVRX8FpfExu8Y0r2BX0RTEzEd05Vi+x/Dg9szSrgajISCW8GbWE&#xa;vjDby1aXw9SskwHoSTWnQM3ZrVXVNftPiM+JAnKDKMC5N6LVr3FKlZTdWri9yNKNp06M5Z0zOJ&#xa;MGrbjggmCkoyd8KmwA2MFVHec9wWp1I2hXcks0tO3TX4CVNoyoxtTADhtocj5LwktdAU5EybmM&#xa;gAgrsiuDuCeyK4N4L3BTAtvE/wdbwLD1Cz7iQ9+/AgfW/Q6u/UJHsIzg8MDt3AQ8OFDq1jYOEa&#xa;HtY65rRkIa2lxeqglp7T2gudWqdY9Wmdc1qqoGiKWOU0ZU6TCl1al1gNal1zmlzo1rrFaljrnr&#xa;saDEI36fs81UWgjMPIi+mIsHeTZSzAHglsFJiwLhFgwr5kgAkL2wNM2JgKMGGlFGDCTpn00B8T&#xa;oVWsTCcJ/rcH3sLD13FsHceBOVocDBbPAeuYBCaHNmgE+oKt6Ti+qeG54aF1nAEKSS1J77KOD4&#xa;qtD4NSXEpeQTJxiV4seQvnygMD12GQhhz9Buk3fANL67gQqh0mtbdQLbffhlNOCA4iqB9RvXW8&#xa;AJTKSaH6o4SlbuPj5YT6EpHUT5XK7eqnSzfwyjo+D6yRXQn8kb47kHgHKxKc8N/T7ADdCThAjw&#xa;GcRhcZ8xBKNJ+ewQRd+AzmYZETvkBNW7jjsfCJmu54m3aEO/bjGr4YuOMkwS8RliBNL+PLhIkg&#xa;/Aoepz0RPIdoJdwnR8+81nS1EtIj3bfolyLKV4P9r8XKH2xZ/uux8n0ty38jVj7Xsvw3Y+UHW5&#xa;b/Vqz8cMvyPU35XoKCLzXAruPbd0qntkpnkvgOLkWpP0bSIuX6KGJ/oLZdpmvcxM/W3sDl4uDf&#xa;0COoN/GbcvFNXCbjfh+qF3FHraT7n9gp4Qr98f4HCshQXyayJnkT19aCiEriT0E8JoPET1PAKg&#xa;S7CIpzuwmeI3id4O2AWyFM/G9RGyX2X0RRomIlblnASABPRrAYwVMRnIngXATnI7gSwXoEX4zg&#xa;axj5F1BLAwQUAAAICADnYYVaJxEAmC8FAABqDAAAWwAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbm&#xa;UvYWRkb25zL2xsbS9Ob2RlSGVscGVyQ2xhc3MkX2FkZEFuYWx5c2lzVG9Ob2RlQXNCcmFuY2hf&#xa;Y2xvc3VyZTMuY2xhc3O1VmtzE1UYfk4Sssmy0JhysYhYpUAuhRUVRULRtNyiKSgprQE1bjYnyd&#xa;LNbtjdVOPdccYZP/kr/I43YMrgV2f8TY7je3a3IaVprc6QD3tu7/uc572e/Pn36u8AZvANw3Xd&#xa;7qh1zXH6HU1Xmw7nXVOzuKo1GrblqqbZUa/YDX6Zm13uzJma607V6KxoaWbfNdwFW5wW3VlHs/&#xa;R2TTdtt+fwlyUwhvGWY9srfZXwWupccCIhyjBtOy1VJ7221nPVUMrpWZ7R4eolbnFH83hjoLGD&#xa;Yd9jHE4ESgyHt0GG4eR/NlJCkmFiU2wGM1O+pa1ogXFX67e47hWCnZ5nmOq81i0MCVQ8x7BaW+&#xa;+sAxneyS4q2AmFQar3DLPBHYb95WHfXuNN7nBL5wWG1JTraZ6h+1aUrKbNkCuP9DdvmoRu2JY6&#xa;kCV9qVYjhPk5BnaDIX7WsAzvHMO5Tc1dtzOaVXaR4di2AISpe7BPRgz7FezGWBIRTDDEvLbhMi&#xa;yVn0i2ktm7a3bP407JIu8RZYb0RnIMO2uCR7Ak5zTsOc00GU5vz7ZRiHtHekzCCwzRFqdL9mRG&#xa;6CmYwhEZh3GUHLtlMQVpVup0TQkZyo7HoSTk1u0G8hKmyeeT9EvgBGWCnMCLDNnMzY1Ubm7M6S&#xa;CIL8nIgmovrnW73GokcCpKPQcMx0cRXiGGvZZhqSun1ZLV6JcsikZTE644zZCs27bneo7WZfhu&#xa;2NmGtWIvc3Wee227cVmzGiZ3p8q2vdz7l/Jbp7jQ7/IR4qXsRgUR8IrhcQrBGRRkvI6zY3HMkJ&#xa;mBAENhVDIMR/nSmptGxfUNvJkmLxUZak8k1afWZqckUI3vohxbGKS0ggsirWK4KAK4V8Z5XKY8&#xa;4JreTuCtbZgWtuzNTCunKfzzDAmd+nvLdqh/x7u2YXlU2jHdL6WDa3gUbMtt2k7n0YNQSGBS5F&#xa;CE4YfME+oE/7OQhXXX09SrqNPJ5NPZtUY9PkWrit+RKdc0nwg9LFTUw34bHFFHSJBCKDa+rvYD&#xa;AQU38b6MPD6gZ22r0q/ojtH1ZvseFxLFhtalipJQo6CLnj7EJj8irJvxU6ChLuMj6ApSeEq0Z8&#xa;r5zHYfGAktBmXNwuB5mslsMDK7/RdLgYFbMtpYDoAHVBV0cEMcWBQSEYWgLYg2NqKuR3YQhkNb&#xa;C0qgEMdNX1qBh9syXPSoXw2qjBJ7jswQ74lNGb6oOYZWN/mC+DCMlQ2LX+l16twJdyauBeFbNF&#xa;yDNoqWZYvkoZSmuFEe6cv0zyKUVUqWFeY2p+OxC5a4lVpLwJHMrtg9R+cXDSGdml3rocGxi5MU&#xa;vBhVZBzRVEQ8tkBKFlGl8XukMU61FqdzagX0/YRW7yCKHTTuyeWn7+Hp42diE7Fc7TccmIgt/e&#xa;Q39z59c4QK0n4GB0XHp9mzOERnYvYczSL+TNwXpd1JPB+if4sERH0Xc7/iwF0ce4BsNfYQ+Wo0&#xa;X9nxEMer0bRaqcbSJyv38MoqZoGl6Qc4X83l7uKS0LmH0iquAHdEk8Cn9JX9y84SpRmf2mRwwY&#xa;BaEVdDakUyTlBjeJcIRXxCBZIW8kkydxVLATAbAkoOgJIDoGQI9FnovWu+zns4EoIepZWQS4RW&#xa;PsJUgv0Qc0g/FUMVN0IvzRKOMOoYWf1hOvIjAd1H487PaJbzf2BM7N6HWS3/gmb+LuwA/nOfWG&#xa;T3XxiX0E4xdHE7xEuFfGL3sXLHtyWGL+ibDu9JUD6cp/FjGr/0T2Xswle+iyV8TeMB8sU5Wr2K&#xa;1/zx7XCsYOEfUEsDBBQAAAgIAOdhhVr7lfPXcgQAALQJAABeAAAAY29tL2JhcnJ5bWFjL2ZyZW&#xa;VwbGFuZS9hZGRvbnMvbGxtL05vZGVIZWxwZXJDbGFzcyRfdmFsaWRhdGVBbmRHZXRDb25uZWN0&#xa;ZWROb2Rlc19jbG9zdXJlMi5jbGFzc7VVW1cbVRT+TggJTKclXEpLxVoVIQnQEa+1tFXAFqLhIi&#xa;Bt0RoPMydhYHJOnJmwFn/AtfwhvuMNWX3w1bX8TS6X+8wMKUJk4YMvk5l9O9/eZ39f/vjr+W8A&#xa;7sNjeGKrurXFfX+/zm2r6gvR8LgUFnccJQPL8+rWknLEgvAawp/zeBCMVPa45zo8FDPSmRfhnJ&#xa;JS2KFwdFxQsT0VNH3xVhaMob/mK7W3b1HJmjUXe7LoYJhQfs2yKWGbNwMrifKbMnTrwpoXUvhU&#xa;32lldDIMnoJxO05iGL0YHoap/9xqFt0Mw+eVp+Pz5R2+x+MWl7d2yDddOGsycQkmQ6ekLMJyrX&#xa;xyMquiKnwhbTHNkBsJQh66dgSgJKuKoVhuOy1R9aiyq6TViqX8bKVCFRbnGNgmQ+aeK93wAcOD&#xa;NjDbWNqjKmwwjF2oQGHDxAAGDaRxzcQV9HQjhSGGdLjt0rA2y//XulHnVyqqGQq/JGmAhJqh7y&#xa;w+hksVDSX+pPk4ao57xINMoJq+LbrwagdRAwyT7Wa+V294zZorrb07Vkk6+yVJB1a5TSs6wtC9&#xa;pVQYhD5vMHx7clyu3FO7wloU4bZyFrh0PBGMlJXabTZOznAt9F1Zm/63xPX9hmgTXiqcTdA9rb&#xa;mhoLUbxZiBN5DvyaBA3ddEuOIrGm64b2IcZh81O8Fwte3FZ3GboYNSGAbybZf6TUwZsKDZdR6j&#xa;12zfbYSz+6HQETMOb9DcsniHwaSFaHBfPPymyb0Lb9mmiffwvoF3cYeh94V/VilPcJnFXSIC7U&#xa;1TLFdJOvKbJ8EnQYT+Hu4bmAbRI+VSj13U6VLMz+FjJtBtyqCq/PoLVaLEWzANWmwiWf8IJa1F&#xa;jKVb4tHKMgzRtE5OtOXSBD/dThbz8dlJcv8/Rh2nmSjhEwML+JThsqb0icPG2ypQ++NNLGJJz2&#xa;3ZRA69mp2fMeQvqi9ZrNGVHUON1el+/gzawsUFy8Tn2DCwjsdx4RZUE0/xSDtIxQw95JgvDIV8&#xa;m4VvSy2Gm+cHZvEVMd+Lok18jWcGKuCkVnMEXeuHsrm3wX2Xb3liXT8YesquFEvN+pbwE8vQar&#xa;zlG27gkmFGSqX3gfSM7opWw95d5I0k1iyResXCpv88eh5KLWBE4xgXtboW6dAjV0fnZo8FJXYH&#xa;mKILS5M6ZdCRS2l9BXKGvkn6/Q596Cc6Z8g/gKv0tOlrBR3opN+B4vjEr7g+eTc9lC5WfsGNof&#xa;TjHyKlc+hZpKqg7JcwrOWP3l7GTfLpt1foLRW96fM6yErrn1RfII/2DYw/xySV+Rk3DvH2ET44&#xa;wocHZE9BJIiA69FJg3F866QBfBSdxDATdaerjkbfQFdS76CF04ztSXY1qT0b+W+18kfoV8dliu&#xa;wQH5/OzpzNzqXxEI+SnmaTnsaKhyj3pb4nGEdYOfgRq+Xx39GjrUd48rT8E1bHD/FFXL5GT2LT&#xa;lT/Rn8V6juFLPEvq5ZJu0kfYOoh6TmObngZZU1E3vXAjq4HL2ImmlsVuElGkr9fw+t9QSwMEFA&#xa;AACAgA52GFWndYsmWiBgAAnBAAAFgAAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9s&#xa;bG0vRGlhbG9nSGVscGVyQ2xhc3MkX3Nob3dDb21wYXJpc29uRGlhbG9nX2Nsb3N1cmUyLmNsYX&#xa;NzzVbpc9tEFP9t4liOoySu0wLippjUdlpEy51wNWlLDQ5HHZKmQIMirx21smQkOSXc5T5a7vu+&#xa;P5erdMLAVxj+Cv4QhuHtSjVpopbAwAyjkfbt7tu37/dO/fL74o8ArsUXDLtMt6HPGp630DBMve&#xa;Zx3rQNh+tGteo6vm7bDX2bZdhufSe3m9wbsw3fz834c+6BMbfRNDzLd52QYca0Xb/l8S0KGMNA&#xa;3XPd+QWdhNX1sXBHQSfDRter66Zb5XNGy9cjLq/lBFaD6zdyh3tGwKvtE10MZ6xQ4OLwGMO5p9&#xa;aE4dJ/AE9BN8PaOMEMD+fL+4x5I4R16+w+bgYjf3OlEniWU49WWoFl62XLj+MorFxS0QOVQWlw&#xa;3zfqnOH08lI77+I17nHH5CMMKcO2Jxaa3GdQfW6TErwq5jSt8prRsoNot8ds+YHbiGZJ03VqFi&#xa;HtDombOZk5k/MDI7BMaZ6SU3MZiuVYP/KauMlyHb3NS7ooMzMkYXyMge2hK66xHCu4juHn1Rkz&#xa;HuH/Z7kwybBhVVAKkyrOxNlpJHCOij70d6MD56nIhNQFKtaE1IUqsiF1kYqBkNqgYm1IFVSsC6&#xa;khhkQwZ5HfJsr/fiKT5/pm3FbAvZJDAUBYGbIrUVEIzQglwin5t+qOUfAxDMYYpRB3PrN8TcFl&#xa;JMc2Fuj2FK5gWCc5jAOBPup6Ve6V5ZaCq1I4s5NqGRg2xQXkfKNpt+qWo89fpZec6kLJITQ1w6&#xa;TKcg3F+KzrBn7gGU2Gp5Yqaznz7n6uj/Ngzq3uNJyqzf1c2XX3t5onTeWVB0VKxbCXCisPCINV&#xa;rIBThl+H69NUm2/oT2IruVfkyrL4kr4bKZVibKliDNuyZI/tZL9ZaaoUbmTQBOd9un+AFIhMuM&#xa;MwA9dbUFBiWGN6nMru9kYzWBiNTt1MEkLtGApx159EgXHckiV33Mqw+VSlvmJ6VjMYXQi44Nha&#xa;NZrkGQW3i8ojlRkXXsnl7zxpDMnaSVx0ZwUTaezCHQx3/ftpkDtOXaZgiqG3zoOJJeG+Nh9rhm&#xa;nsEXl+p8j4s9LYjbsZupqkip3CjAjZDoZD+f8ia5dZpxzTiePSUHhuNktFxWToEDGXJqDjxxvN&#xa;iSijSGY4+7h0SiLHr7le488eTtvrYiumAouhk6Sr2C+stA9ULDryhRQcCnjT8IO/rh3thtjEvV&#xa;l0wqMqRBK3tpteP80qJ/Q9sbLthNaXzReWt2ERcqeOOMkm7r1P3EvdsY/kji3tod1iIWqjapum&#xa;TqpiCy5Nk4kfph+knFBQtlWqFob0LOUpabTUZu0t0dGFqJBt4ARvhAwqHsPjaVyOJyhGRdVYIn&#xa;YoFlP8RSqewtMim55RcRpOF23mOYb8atu9gkMR6j9/Fq5dWT4Kq/9/UPECXkzjMF4KBbdVVfEK&#xa;DoqNVylYhTnDCi3KVUyJjS3m9At5akYFb4pOJLlVvI030ngL75CP20WBQnaMYIjW6JqGPUlJac&#xa;zafEJ8KOjKlsNvaTVmuRetaLvCCjhp+RYtbHUcV0QBpTv5jQLC3E9ZG/GqJceJsl7G9HZH3EqB&#xa;H+pIsCtuyzP5DktwZ0aPt7Nw28dmcl6CinES3ZkO8cMB0JiJxjXRmI3GgWhcG43r5JgWUUDjsz&#xa;gDGtUtleRRSaPv+zT7lXJgDY1zxaGN3+HcTcNpLV2c+Rbna+kpLTHco/WI2XqtZ0rrGlY1Vcxy&#xa;mjqlJYd7tV4xG9R6pzRluE/rE7O81jelpYb7tX4xK2r9U1r3cEbLiNlGLTP1pez1H9C3hjR969&#xa;iEi8UPAFE6LqE9QW0mqkNSAnOnpATqhKQE7i5JCeRJSQnsiqQE+pSkBP5ukkhJG6F9Bb1S7t6i&#xa;8gMun+7MXlmZTmSvTqUWsQOoTHdld1amk9mbMunwWcRttHwMk99j93SxeBR3Fb/B+fSupzdH7y&#xa;C9eXqL9JL99i6iChwR3QEf0jcp8WySeE8Lb27j3Qsu8TKyRJ32hH5Dcg70imuOorEIPxQXmkwN&#xa;NyMRH0UXzMn9AHsiIYORkJTQk4QsP5+KPd+KPZ9b9fl5HIgBMShB3L9aEA/EKpFftRIPxp4vrv&#xa;r8Q7Ge2Pj3PLGlrUSORsGXLLKjeGT56eTK05kEHsXBKFhH6bQImQ2k/5PZjs8JyzE8e+QrPF8e&#xa;+gn9YvUYXp4uf43nh47itVD8x/Slkt/3GwYUHM4wvI43InmZCFLiGN49IkMwgU/om43uSVFi7a&#xa;bxPRo/lbtpQviZDGYFn9O4ntaEVsMYkWM5Gu+BIUcXI38AUEsDBBQAAAgIAOdhhVo0RZOpWgcA&#xa;AFUSAAB2AAAAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0RpYWxvZ0hlbHBlck&#xa;NsYXNzJF9zaG93Q29tcGFyaXNvbkRpYWxvZ19jbG9zdXJlMiRfY2xvc3VyZTQkX2Nsb3N1cmU1&#xa;JF9jbG9zdXJlNi5jbGFzc71X+3cbRxX+xpa1K3kd2+u0iUJJaesmkhxXtDRpcOpgR0kTt3Ja7D&#xa;QmpSDW0kjeRNoVuyunhvKGQoEW+uCRAOVZAqWA+4ibmvfjHM7hr+B/yK85HO7d3SiKtUn1A83x&#xa;8dw7M9+dvXfua/Tv/67/GcAk/inQKNn13KLhOCt1o5SrOFI2aoYlc0a5bFturlar5w6aRs2uHp&#xa;G1hnTyNcN1R4vukn06b9cbhmO6thUAiqWa7TYdec/oZe7eFre7xe1RIARGqo5tL6/k6FPVXD7Y&#xa;UdArsMt2qrmSXZZLRtPNhSinaXlmXeYOS0s6hifLLYk+ga0d6t0ViAnM/f9tU6AKbL8+RuDxd/&#xa;NSFfQLJFpTgcqNcaGCTW3f3d3G7xGIl+28UasJ7EgXThrLRuDZhxdPypK3L9O5pEHHiIDmyhpN&#xa;ZfnYSkMKbCm0x8WcrEhHWiW5j4BlWTGaNY9xrkB/qel6dj2cxUu2VTGrpFHAPCTJ+UOjrmd4Zs&#xa;k3d8aq2ALZQmR0yQrrYNpWroWlLyrFIp0wmxcQj9En7jct09svcDbCvoiVaDvezeXMcYGdXSmX&#xa;Oa7hVtyWRAy3a7gJNyfQg1ENWwJuh4atAZfWkAq4rIZtAbdLIOYtmXTrTuFGlw7yyqai3fSkM2&#xa;ORc8lqAb3TPgqPIqsYTCkqPAoT+uSireIDvVT4KIXHoyJhud6oNaumlVvem5uxyiszFn2qYpSo&#xa;0FCIJxZt23M9x2gIPNV+0aa1bJ+SuVnpLdnlI4ZVrkl3tGDbp5qN9tuf9xzTqu67liDHcgR8Jt&#xa;MpwJk2b3qSsmgvPpjEfZgYjIPtrkrvEcemy/ZWfCVvuIciU30S+3W69g9RGsmy6dmOimn2A3hr&#xa;RIfAQYoqMqiu4gGdgoymqmcHN6BihrHUNOKB+RoKLNSLWQ5FxyShh3WKZZr2pDMq5mi5ZLjk+J&#xa;uiatFjGo7hUR19oISBio8QLjKjFFDe97ryWgdRFj2OjyXxUXyccFXGbU5H2v8JGAxbpKJiuofq&#xa;DW9FRVlHnFUevXa9bHpmLVcwXT7iGKqs8hJdDNU4zzAtV8VJgT3pjdguy28BNR0K6gJ7uysa0Y&#xa;fYfAglRC+FlApHpwttvHMTCGObzWqyWctUZJ9U8QR57qRtWio+9Y5qhUdcQ60ndSTwGUoI90pC&#xa;qPicwINdndq1+V/QkcQXBbbx7hM597TJh/D4KDnE9EzpKvgyha5rN52SVPGUjn4O72GKlwXTKt&#xa;unpynUXD8nnha4r109Px271+UbOuXTNynGyqbbsF362LM6Bvy0MCk2hzYKKXheYJD0mL+qB99y&#xa;ub9QpbPciu3Ur7y79gUCB6/qxXq6I16pThMs396jE7wQtmmtxfud+uqsCV2QpDKwmR6Ko6yg38&#xa;ipTBr+lQikSKI9Z1tb9GWVDw9gI1cdHAA0/Bg/SeIF/FTg7us9NudLjtnwDqx4khHTZaNBzUDB&#xa;zwUG+CnQps1YZLRH66fhZfwyiV/gnIb34BbuqL8WSHf7LlHwm/D6rrxqJjtjJtP9Q0fDb/G7JF&#xa;7F74ODW6pqeA0v8cbrAkn2QtDRBDLpiJYU2fzopXx9oII1yo2aj9ZwAeeTeAtvUxXIk+rc2+2S&#xa;UTtOfchYrMljPNDtUzSUTs0ajXA+WDAtebRZX5ROuJKaC1x43HRNWpi2LJsDiDoemThjWWGj46&#xa;gcPGRx66KAC/QiU+f9TH3A5JOGDlxu+cG2i7vJYTFqWHEoQz38dgKIbgnp1pCmQrrNp0n2NNGn&#xa;8V5sp1aWJPlb8T4a/0CzVepkA0QL2bFdb+GO8Qk1pWaL53FnSl1IxSYSqQTPdqYSC6m+iWQqyb&#xa;NMKrmQik/0p/p5NpbqX0gpE1pK49l4Slt4jRsm/kjjHBVk4CHchRw3XOLeTzYIn7vHt4Y5tqPX&#xa;59iSmM+xLX0+x9bEfY7tod9v/HYPtBdFQjP+YnYdU8A6DvFwhIejPHwYODG7jgXgDJRd59Cnnz&#xa;g6nn0TdxbXUBxfYG4NpXVUGEyos1Bi5xDrPYPnaG+nv2cCLZzVgcvSXob2WpBPdkAu0/0boR7A&#xa;KowFa+P+2mn/awzTV9bxWT7sSwTTvzK2jq/x7Bkevs2OA13an2jcjv5LSCt4YZr+L+EOGqfEji&#xa;lx25SIT4lJ8I/tbf4VTmIP9pNTpqgMTONt5PEfHPYddbPviostR13Ec76jBF6EQXscKjv8OT1a&#xa;QgNWW27WgvVQ+i/0H6eV7/j738X3QvmxUH6g/Wo3HjIQecj3I5XIdK3EmUj5sa7lz+IHEUa0PN&#xa;adEXpLiVGijItnxRp+uFE63ik9FMOP8FKYsgdImr21M7uGn+k9L5MtF/Cr1dfxSmHsXxjk1QtY&#xa;PVF4A6+QhW8Ex3OgULnfdAkjCl4dEngT58PzhkKTYhewvup7P4a/0ng70YRfMIZJM7ZqGIM+ft&#xa;j//jD9/c1HD2Iz/k5cD6XnP4g62IT7aXYvdvv0AEUa08MhfZCSmekjIZ0P12VIT4XUDemnQ/r5&#xa;kH41pF8P6beQ/x9QSwMEFAAACAgA52GFWjhXpaHTAwAAEQgAAFMAAABjb20vYmFycnltYWMvZn&#xa;JlZXBsYW5lL2FkZG9ucy9sbG0vUmVzcG9uc2VQYXJzZXJDbGFzcyRfcGFyc2VBbmFseXNpc19j&#xa;bG9zdXJlMi5jbGFzc61UW3PbRBT+1nGjRFVjk5SWlFAKNY0vadWUFlrchCamF4PTlDiEy4tnLW&#xa;8cNfKuR5I94z/ADD+E9wAzIdMHXpnhNzEMZyXVpETtdBheVquz53z7fXsuf/z17DcAK/iGYcNR&#xa;PbvNfX/U44696wvR97gUNu90lAxsz+vZWyLo01484X4g/JrHg6DQ6uufNcm9UeAGLcdTwcAXNw&#xa;wwhrmur9RwZBNO167FJwYmGJaU37Ud1RF7fBDYiZc/kKHbE/ZDIYXPQ9EZR5xiuJBy97U4kOH8&#xa;S0gw3PpPogxMM5x5AZPhcrHxlA95LKYZ+q7sVkuxaRC6nr3B+1ULp2Ex5AtByEPXicDqclcxlB&#xa;upksWuJ5zQVdIe+1YZjFaLEDZqDOw7hsm7rnTDVYbF4ww2208psnrSUtqxMIs5E1mcZciGe5r8&#xa;ZuN/zS5xnGmpQSj8uiSp0hEMsyepMJxu6fvjX1LSUTXueQxXUpSU0uKz9M69KbwzQVUKhqtpjz&#xa;js9b1B15X28LZdl51RXRKvXe5Q4VximG4rFQahz/sM3x+/1pVDtS/sDRHuqc4jLjueCAoNpfYH&#xa;/erJTL8scHvUFynu9dLJAC296YaCquR9XDbxHgq5SXxAzxI7WFjEwizpLDJkXHqus8XUN1loJM&#xa;JJlAx2ld/7p2UI+20smMjgKrVfoSvCZlSJRJZHGWWYJ9TjfTk+Iuj8v68zsMwwRTBJ8NwLlOIw&#xa;Cx/ipokbuMWw/KrGbjq+2w/XR6HQHmsd3qdEGfiYek1X+DGOldT6SGdt4Q4+MXEbtJtBbpq0rz&#xa;AUX7fdDHzKYD1XGDfrSvGEyNLr96+FNaybuIdaDDymauE+ruuDBwymzk1cbQylYkq5pBYmw8VX&#xa;Oxr4nArKi7wtNFA38QU2qJFqRF03qXK4t8N9l7c9sa0XhlzDleLxoNcWfmKZ34pTtuMGLhnWpF&#xa;S6jGg6UK6oopx9mnaJr1WXMhkXgo5z96WeEtQEMS+S2lQD3xEPXO2dX3/ejvFxgGVKWJZ6exKZ&#xa;vKkzCOR/QB5vUCecIjvNMlo36e8OJqAHgVGuLP2KN3+KRsITWi9F5kmcw3k9J2j3FubpTO8u0C&#xa;5De2qLBKZK34yGqTxDCTigbQZfRs465GYEeS52GUMaKEeQGqhCZxqoEAFTXJkd4trBmI6VXB3H&#xa;biXIS6QrCxvXExrrFK3vWCwf4qPZzI+YKh/h7sHPWG1UfkdOW4/w2beNX7BaOcTDGL5JK1X4zJ&#xa;+YM3Avz/AI9QQvH7EDskd4fBBxzmKbVjORO0Uv+lVkNXEGO5FqA18nHlfo7yLe/RtQSwMEFAAA&#xa;CAgA52GFWjBlDJ7lAwAAKAgAAD4AAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG&#xa;0vQnJhbmNoR2VuZXJhdG9yRmFjdG9yeS5jbGFzc51VW1PbRhT+1rgIKwIcQwq50ZDQRpaTKKRt&#xa;moakLdBC3NqkBULGefGs5TUIZMkjyczw2rf+kL67t8A0M31sZ/qbOp2elWRwsWkzeZB2dfZcvn&#xa;P2O0d//v3rbwAe4xnDA8trmjXu+wdNbpkNX4iWw11h8nrdcwPTcZrmks9da2dVuMLnoeevcIve&#xa;BwoYQ3aX73OTDLbNp7VdYYUKhhimt33P2z+I5avRvnv6FsPVwf7uxEbkcy4IeWhbyw4PgqLb8B&#xa;iMkudvm5ZXFzu8HZiJe180HHJqe655rLvAoFSr5KG8zMBeMGSaIuTRMcNUqRdYuXtANsOPbNcO&#xa;P2EY0vNbDFe6iiFBDRqe3zQTuKK+oGEM4yrSOM8wMbctwo0IbvkkzkU9f0YkDROYVJHCBQ0aRj&#xa;O0m2JIhzs2mT0sveldUAZvW74geF2YsZ4gr/f0UnRJ7dB2zDJvLZz6zJdO3yF5u9ALf100hC9c&#xa;Syi4Skd6v0F+SxblHRUzuMZQedM05qqDk6hajhe0fTGv4DrDswEABkgGZnCWOE5gTsUNvMswks&#xa;Tro8yJAcP4qTrSNdZFi0xGiBIJESb03up2KVDALUmf2wzzA2nddkO7KcwNy7db4dJBKKTGYp23&#xa;QuErMBlGJVl7+FYYdCVnMnAe91TcxfsaRpCRDPyQQX/d/lLwEYPWzTDuzsd6X5L5129YDR/joY&#xa;oHWIgdH0PVaEBNygNqy8v9DVl0qRwudyT34/g1QWfmptSwhdtH42PHCpYoVCB6S3hJP6Nechyo&#xa;sstLnrfXbjHk/3Wntrvv7Qmpv+PVn3C37ohgLlal+DP/rajgCY0eJ9LW8CVWVRTxFcO1/+sD4t&#xa;oy1ZYhV/Is7mxx3+Y1R2zKF42f9ZhBW3Zgk2DRdT05oaj3JGttV6y1mzXhJ9qjNL6sPWJw8q0V&#xa;XYoaJS8bQN3w2r4lVmxHYJbIkgZBxlBWlewBst9BxTlav5XzjH4qw3RO85E01+jrLq0pWnPGIT&#xa;0v6aYKRvUXTBee/0BShqf01mgFzuMiLtH6deIjS2sGl3GF9tLTLknTtF43XmHmRfUQs+VCd7f2&#xa;CjcquVQudev2Id7rkFYK3yR+JgmdjGJEyGdxE3qEiNEuT+s5TNGZjqFob5CMZdNySidxl5IMbh&#xa;L6O7nU9xgxjvBB50fcLxX+wLiUHuFRpfQT7hde4tNO5Ho9Ap8a+wsTChGYSSYnFTFplflOGT9j&#xa;uvI70p3nRoUKQ0WRkhN7Al9UsBwVZIzgyYJ8Rs9ipPE5vkgc5hKAw0aBfMiyxkWUf5nEJpvBCl&#xa;aThLJReCB9hFIn2qWwEekzmn5Ama5iM5Iq/wBQSwMEFAAACAgA52GFWtqyMAXzCgAACR0AAGkA&#xa;AABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vQnJhbmNoR2VuZXJhdG9yRmFjdG&#xa;9yeSRfY3JlYXRlR2VuZXJhdGVCcmFuY2hlc19jbG9zdXJlMSRfY2xvc3VyZTIuY2xhc3PtWAl4&#xa;VNUV/m8ymTeZPJLJSwJctlIaNQmBEUSLA1IJAgYToExgGrWNj8lL8sLMvOl7M4F0s6tVW1u1i7&#xa;Wb3eymrbiRNFShpdRqbbWrXey+r3ZvrQs9572XMIEHTr+v5fv6ff2+5J1z7z3n3HvPes888PTE&#xa;vQDOE00C6bSVje/UbXs0q6fjA7Zh5DN6zojr/f1WzolnMtl4h63n0kMbjZxh6wXL3qCn6Tva3J&#xa;e2Db1g+POGR2U4femM5RRtY1nzJLZcgRBoGLQta2Q0TtIH4+u8FQWVAu2WPRhPW/3GkF504j6V&#xa;XcwVzKwRn5TeP8VRJTA/+ERLPV6B3v/anRREBBY+E5VA9dTdBcL91jo9kxG4vqVrWB/RPQ1s2T&#xa;lspAurTuVM6/FTKlTMEKjKkvrphLO6So20zRgwbCOXNlYJzHBGnYKR7TYcRx80BGqKjmEfHdFS&#xa;nnVBN6bLZ/U9PdYuI+cQX1bfZfTpebMv7eogkretEbPfsEkvNHuRQeYKZ6zBQZ6pTe42c4PbC2&#xa;bGLJiGw6ozdVoUCOXogAIzyYLdfNQefXCbkS7ajjliZEhERdEUiDU7Bb1gptdldMfpzA1YAm1d&#xa;gc5lDGTo9qaVi0/R0h2Vvj6S0L1OQFxMe682c2ZhjRBmeWYL1tz/p8uebt0hcEZZum7doWIRmq&#xa;MI4TQVdYhVowJnqKj3sFYVmoctVtHgYUtUNHpYXEWThy1TMdPDzlIxy8POVjHbw56rQnrYuSrm&#xa;eBjFy1wPO0/FPA97nor5HraW/LQwZJLfGl2nIKuSx9b2WcWCYXfmyPFJhQLa8cqi6OzjU3lDgd&#xa;MDVByQGSicjp1T0BlBnUBToP0UdAlUDhq0RWNLYKrZjC1RdGMrZYGslzmcCLaR0mwrY0TQQzHn&#xa;ZZkIyBWUtJUrGLlCBC8QWHayGpFM22a+0DFaMJhibb+eJ50ooBiu9pTZrecFmlsuOeHFi5Ry4k&#xa;RFh7wUL4ziEryIjsUpLoLLBKKemC7Tocud9kxymIwE7USaBfVH0EASKCX2FdycGAHnM86GEZiV&#xa;VIYhsCToeiPZfKY4aObiIyvjnbn+0U5Shz2gs6YpkVbvtKyCU7D5aleUmtTMjdA+8W6jMGT1X6&#xa;jn+jOG09xlWbuK+dJQShZsyrWrTsTYM5o3Asg7W49n4OKWNAsG3TkHK4os8nVhvJis6REIXPof&#xa;K3yBfuWgoJEai+QzprM+my+MRrCbpy/USLdcHVpaI3ipq3W2YFNQBFys4uV4hUZhfDnVQd8Eww&#xa;6ViE30SWaKdp6d6lURLCJBXBrYFUoEuZUk+ICvxes0VOIKslpetx2jx9hDbn2lwMry0l3wpa/W&#xa;KP+9gQNlyDLTHEvXUKxTAG61LTprYVTFm1kFVbiWKjzNr6VNrw/OsZ0n2OOtGsJ4G+3hB2wEN2&#xa;hQcK2GCEsN1KSbnN/Fkf5u2uykjzvPqzrJ0RW8d1rG8VYUvI+S3MatPQttw8lT5jQSCyP4gABt&#xa;/yGB1qBQvOR4r/WO9OEobsJHXOMNWBF8TGBVkPpLk9vGSQHB2rlFQzVuFciegmw/hZ2l4JP0ri&#xa;J79kxldRV7ObeGcLvA7f9jzxXPOHdGcRvuIv/1ckYXKYNy774ybOQ3Biey0biGKD4lULd2a+dC&#xa;zroLB3QzY1Ba3k91qGB5Fo7gnmMq48ktf0BDDQ5SU3N0df2etJHnN6WCz05b6Bmyrd36zgzl7c&#xa;8J1HsW32oNWylK3nl+9yZPbrLJzHKyUNrtyXLivlA65edxHxegL5DH79btXAQPCAyU5xz/1k4n&#xa;UNGDGvUWXzrFwbFCwUMCmVMXAp73fiWKh/FVKjRcFaJ5fTRj6f3uq0OdTFyc88m9h48WE1rk0T&#xa;afgLzRnkIF/c+Y9jRR8F2ioKjv9lq1eZMHoidAzhmw7OzRXpkfb0SZnN6y1dLU9tKujSd6Shs3&#xa;lcUf7d1i7nBa++aXF7+Dq+ai4jdxjHf5fVw9b35MK8frF/jdnEL4ZrehkyzhBD0dl6ztJneoF0&#xa;apLP+WgqqZBbs9Hr1SdDcuSAa9NkuNM7W0ylOYT9Yw7VHqEaj4A/4YxSb8idTNNb1E7OLAd3Lw&#xa;Rir+gr9ysP1NxQI8i5uBfwi0lNt7Kvinp/ySzvW8oLdF2c2siifxVBRP4GnfqpNHVal2PkYLQp&#xa;CjNrs245ch19KAp13gI1JgwckJFVHlNvVMrQpFhKIiLCIlP4qcVYKvoPS0zvUFrcsiJ9uh2yYn&#xa;yx7+kFXI3Old5P/+uK7LzBmbi9mdhu3PyG1eYtphOiZNrM3lLPYQiz1Y7cxRSLgXZx+sW5/jXc&#xa;kxvfOSCpJW0U4bG0yWFOuYfFJ7yw6WkSFD9IYMIxar4EYTIFjvQ82HDT5s9GGTD2f6cJYPZ/tQ&#xa;+nCOD+f6cJ4P57swyp5E8CosxLPpedtA51iE50AIlVqGK+k9Sat4oG1x+xhOX5Kol/VtfXejRd&#xa;anZCihSY1HbVJLyapEg2zgUbtsSMlwolE28mipbExJJdEkm3h0pmxKyUhippzJo+VyZkpWJ2bJ&#xa;WTxaIWelZDQxW87m0TlydkrWJKSUPFopZUqqiTlyDo8Sck5KzkjMlXN5tFrOTcnaxDw5j0dr5L&#xa;yUrEvMl/N5dL6cn5KxxAK5gEcdckHqdu6ExAz63koaBu7HOlzA7RFh67GBbs/YRsIqXIytUeli&#xa;bI+Qi7FFqlyMbRJ2MbaK4mJsl4iLsWWqXYxtE3Uxtk6Ni7F9VBdjC81wMbZRrYuxlepcjO0Uo3&#xa;NRgvKsUvEISWDrHIxF7sGm3krtomRvqO0utOzD85O9VVoy2RuuclcUb307rWspXuqlJaJsY8px&#xa;9NF8KYleQtI+STIOI9mraAPJ3ghNL3X3iIW1IfoqNHGmT9fdnqLRchoRWOGBcwi0T2AE2LwktW&#xa;QCLwEm8ErgRtSIBOlShvZqr57A64FElawiHyKaN9IgLMPkQhO4DqicwNuZ60b+vBPYj+6L+8bw&#xa;noQiFd5wJW2xHzf1htxrSIVPQ3d/P13pg3ylm5Nj+OgEPgEwdcKlvq23jRRwB41X0/8aydc4n/&#xa;XH8sZw9wRthQTZUEb2Tu1X7W+mfXoCn6GlasIP4tBBHNYOj+P+CXy5dIuHp23RIavH8DVPLLmB&#xa;jO49kKiRNQdcPzkg0jhEr7w+huIykXbHPL+fvjxP0J1nmBb7XDgmJtz1SsH+cjZCT+GQgkcVbD&#xa;pC/UeFwn+bIBQcOoId7PMKDh8hWLJyWLCDLXed8FxyvVXUyF1AmtpASt5IR9iEh3ARHuUfXLBZ&#xa;LMUWkUW/uA6GGz7b+PDi4GT4EPZ1N3yuwTfxDTd8bsE44RsofB7EDXiEsCp8G1fjW4SF8RQGaE&#xa;RBQ1I34ztuqAh8D1tQwU6O02nEwRjxHXvvVOCq3ry3s6AkRtIEvu/+xPGDQP62svl/GMjfXjb/&#xa;jwL5l5bN/+NA/jPL5v9JIP/ysvl/Gsi/omz+nwXyn1M2/88D+VeWzf+LQP5E2fy/DORfXTb/rw&#xa;L515TN/+tA/vPL5v9NIH9H2fzqFH8zRTDThdvEPvzuWO7w8dyxEH6Px7wShQ7i5gJ6BoXen7WK&#xa;m+kY4/j73jvweNfi+1DHs+M40tt1Jx5fvE9UeOI5k9GjtvZJNCh4IiZEpQj58mL+bULjopqJCR&#xa;NcvhdRSeYSG6XyzPvVELyNZPH4YYI0FvyrHVPVigZOgJRxGgkOU8m1aTSMXS7c48OX+fA1PrzK&#xa;h2/y4Vt8+A4f9vrw4z4c8+G9Pvwidv0LUEsDBBQAAAgIAOdhhVq7DN2Z0ggAAKYRAAA1AAAAY2&#xa;9tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0NvbmZpZ01hbmFnZXIuY2xhc3OVV4t/&#xa;FNUV/m6yZCbLAmGQpyJSI2w2bpaHFDRgCwQwsgHrQuhC2+1k92YzZHZmnZ0NxL61tbXvd2vfL2&#xa;trXwgIaSjW1qqtra1t7ds+7NM+/oT+ar87M4HEbBB/v+TeO+eee8655/Hds4/9b/wBAFvwH4FM&#xa;0a1kBkzPG62YxcygJ2XVNh2ZMUsl16llbLuS2e46g1a5z3TMsvQ0CIG2w+aImSFfObN34LAs+h&#xa;qaBZaUPdcdGQ3pu4L1xO4sgUumiOkKeQX09iL1+O1rBBZlA7EV0x/KbLPKPbJoVUy7m+raa77p&#xa;W8Xttlmr9TqDrkAq63pl2l6SQ2a9lok0e3LQpj7LdTLneHleKxQooW+7gDgo0FqRvhlsCyzOTr&#xa;a5b2KDZ1o2W47lXy/QnOzoF7hsgtH3TKc26HqVzC7pSM/0Zak7gTbMjyOGBQIL2svSzwXm9p3X&#xa;szTZMYOmBBZiURxNWJzAXMxr5WqpQMwfsnhsbfYFRoeGz7Vds7TNrMlwQ+DKZPa54eruCEl137&#xa;IzfWaVx65QXknbtlkhpxrT67vWpdcOpC1Gx6sXfR0rBC4v0YKalMOZiUXaW5u+VXrudco4HSsZ&#xa;6EY8Oq6kt03HH/LcqlXMFG2zXpLp9Wm3Wq/puIouarBZcx1HUvNqJleD7SHTGq7r6OCl3ap0TC&#xa;vjrk9XGDcdnYzEVFp6yCoP6UgLtJddt2zLTFkG9HVdG9JVz03Lo9X0mvXpdRuiq2QE5k/lJJeO&#xa;tQIrpvsqvXHNZFetF5hTrvr04Ya0X/cGeG6DwCxFukbHRka2YfrWHd+qyEyu6FlVf9uoLxXH1p&#xa;JZ9VXhXSsQL3qSKZe1ar7AVclDF46sYmOCdWNzHNdhC5ParFq75aiOl1BU6J6uYfW9VQA6WCCz&#xa;mb030c3S80ne0UyYgEC6kbUjlapdL1tOZmRTptcpjfY6tHLQLEoNN7DKBlzXpzvMqsAdkzPQck&#xa;bcYakqYMgt3WA6JVvW2rOuO1yvdk9iy/me5ZS7Zzq4b7QqG7D3dkw/sN207ZzlS3riRuyOoxfZ&#xa;eS3oozdCBoEbG1TIBU2JKB3TjyWwFzcZdNrLGO4KPWbryBHBImczAQoRdb9CIvPoPlrgsAIOCC&#xa;yLmEgteLJWZYXLgi2dss+8zQtce1Fm9s5g1SFl1SuY0+d3VcQCSH+VSo2a8qmOVwtsvLCiELhm&#xa;UDNgMF+KxHXL8ftNuy4DBO1NQGIwjgIISNqIou8dJOInp1gb2UM5Fg4r5mEmpC8rVYWzdY/GVQ&#xa;SMyEtT6G6C6duqwPMWgT0vIJzPfWxmuFVNOc+f8vD1uPUBm7k+QhtLwfr8dXsSOIrROI7gVoGF&#xa;yZ7JUsNzwR1fqzheR18RWEaskvR0vOEcbnWxVgvnN94UVazn1n31fTs9URut0Qt9slYj9rME5V&#xa;EdbxG4NBIQbhcq4X7BChneKjCPxli2STP6VC4y++4kOE+ondgLE5Wb7xDYdFEuncF571LOezcf&#xa;37iO97IsalXbIka+X4GLMBgz7jUlO3R8mA9f0VTQtrDRm3UwgY/iLgPN+BhrJ0TCPoUv7c8HhO&#xa;qJS+AT+KTCwU8x2YvR22hMP8fHpGfHzq37s/sKfXt7dmRZvXOnQqqGzzNKDVRquFsgQQTdGjzP&#xa;PZYnsGrm13ey6wRWX+hF2BWy9RJyNXyZhXOuFdhfkx4VUazrEbG/8vwaz0VmB75msGn5+pS0Dh&#xa;VpOEYlE20Gs7BS9bN2hffa6+g4LtDRyOWHGqREv2qOTsZxL+5Xp6Z0Qbsa5E1EUqE+rUI9xvKg&#xa;R6M+akGyYxoQJTCOM6r7+hYfXdW0Teq7Ohv6YqZO7AF8WyXIgwnEMVuByXcFkhfbZ2r4Xhj8SV&#xa;3qlmQD2LzoxjWBR/BoHA/j+6Hgc6Ym8JjqGR/GD1ns0xvT4CF2gs45aqkHJPcy+xSHJR2V4wsb&#xa;+kDDT6iqJie7cFlyBn+ptjiuut3w8VbRbfD6Nnzn2UhemFHDL1ildsCdwK/wZBy/xK+JtKqTP2&#xa;JWexlmdpqNIFzD74jBa7o26vj9c4BkSk7+MY6n8Cdm1+aiHbT6CfxWdfFN+AthaDsDpODBLZp2&#xa;v+lZChD3qYGN6s1hUfZbNYuErY7jqnafhcL8Y+dfHCbcRLzzspYj99QrA9KLKPGcW/eKcqelPt&#xa;q2TTRJ4e1rWEn9Mb6gLYi1xdWbBnBmOnK+EwnM4Xyb+qFA7GwlH3948MTf+LWGcxNnI3Ual6RO&#xa;YUm2M1W4H8s6D9wX9HB/55jgDJ64FJdx/gf/W0gxAlnLcTnXlCROkkpsFqvb5pxFLN9sXJHLx4&#xa;wX5fKzjPZcvsVYlctrRjKX141ULt/WYlzNUTO6OOrGGo6txjqOceMajrONF3NMGJtyY7g+23mg&#xa;bW4o8qUUmTK2GT3juBlQovdRdMroNzZFFM14OVWkjIPztSfG8UperDCOEvAgCqcwNAY70O0o3S&#xa;mjehzeOOpkOhIxHTmF14zh9YFRb1RGpYzbjDdHsmncHcq4lPG25plkJ4y3c5yTMt45jveQ433j&#xa;+BCQ7xvHx4G7oF19D2KdvNWnj9F9zXiG43o0PStWollDTMMXOKrlF/knnlU858mxiKzW/+TWKh&#xa;VnaMhhMbueJbgFS3E7luFLjNTjjNXTWC5iWBHEcJGKsliNz+Czqs1kXXyOKz6IuIf8QQR5SS2I&#xa;dPIM7s3HAo+nxvENXn3WWdxH9/eoiJ7IncapcXwTUFdoCixpCc61T8qWZKipLaZ+qEbyt0W5tp&#xa;p5dtZouht6agzfOXYcD2U7H8U8RR3DD/LZE3io8xR+dCxIwGeCNGua+18s0IhdQoFYlLsZzkrX&#xa;4tRJLMs/gtixA6k8U5jpqyjnz9O8Xg1PBKk7l15Xqfs4/38ccPwUP4sEGpGBLalOylAFEKa7Ku&#xa;/oTFsrfo4nowu1BeqB2Bh+o7SpXaJBtLucmoLCOYOn8sYfTuPp3akT8FIHQsE6/nyOtQ2YEPTX&#xa;cLcJ/wpGDf/mnMIs7OHXTuwKZjOaP4APBvNHou+vYtf/AVBLAwQUAAAICADnYYVaU+NoMU0FAA&#xa;CfCwAAOAAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9BcGlDYWxsZXJGYWN0&#xa;b3J5LmNsYXNzrVbrcxNVFP/dJM2my0JDCkJ5K1XyaFloUWtLi22FEkkASWkNIHGzuUmXbnbjZl&#xa;ONrw/M6Ix/iN/rq+3A6Eed8f/xm+N47mbT1nbLoPIhOTfndc/5nXvOye9/PfkFwCS+ZBjR7bpa&#xa;1hynXdd0tepw3jA1i6tapWJbTdU06+p0w5jVTJM71zTdtZ22BMYQf6StaCqp1tRb5UdcdyWEGY&#xa;7WHNteaXf4c965K+1hOLLT0/mOOnkbbLqaa+izptZsZq2qzZDO2U5N1e0KX9JaTdV37PCqSe4M&#xa;21I3dScYpFKJPORnGdg9ht46dzVPTHfmtoeU7wrIJnrZsAx3iiGcTC0wnOgquo5mNau2U1fnuM&#xa;UdzeWVCQUH0CcjgoMM/YM17ha8cPNb9wwkU3vcpKAfh2SEcFiBgv29dDrCEHGXDDK7lPv3+FPs&#xa;fbrDKbBNCcPZZM6rSMs1TDWvNSZSuZ0VEjmbdq3GnRhOhukBgGE4COSVesNs1QxLXRlTs1alnb&#xa;Vc7lQ1nUs4Q+iWbdttEkoNhq+T224xrBV7mYvMl+zKdc2qmLw5mLPt5VZjYptawXUMqzaxl+F8&#xa;u8ED1LOp3QYi94LhcoL4FZyV8TIG+6J4lWEfVei2Yze447YVnMOJBCWbZDi8vUJ3eJU73BJZpU&#xa;mU3I1XakHUfUhGBsMMoZYRg5og0MjTfyjbYGlH0Uq6aTdbDr8oYYThbkAAAZzADPZidxK4JGMU&#xa;r7/YmEckvMkw9X9i7gT3lowxjL/Y4EYlXJZpvJHb/XVtmZe0hlHSSSWGK9Tu9DgYDiUDGkTBNG&#xa;ZEuWmQxD1LekOW1jW+SmabXMduueJKTzLHcDFwXLUs16hztaA7RsOdabtcaExXtAbZSshSN3Vy&#xa;yItuGkzeD3iEO/pawQ3kZLyLPEPMT5gGSd8OtZ2Tbwt3hkTQaIgRLP4s6/8HNt0pVsC8mIB3CV&#xa;QxOLfNvkxQ7+w5DRfxvgi/qCCGXjEN71NHPe+sl/ABg9INtbMpJpO7ok09//JQUMKHMh5C6zje&#xa;DFWBLub2Q1QYju9eDt5QtDSToHupc3+Zk0ydFxoGtwSmhwMxkLBEVzX5dgiPJffAS6wmWWyczi&#xa;BlSCUDJmHgzGU49WxFCZa3EoS2ggbqMmx8RLtsz0n1DNnIM2SjtO9mqRji6dnUMQuaY2hlk8+L&#xa;L7K702mTBaNpEGPasmyxXqnvxbs2LH6zVS9zx9feT7tXX6Y37v9WshataQ8t0QhywW45Or9mCF&#xa;l8prurOok3aUeE6BFT2gjHZfECgfg3kLGP6GOxn2lTRElO+540V+jXBaIhoon0On3WqNqZdOkn&#xa;HM0sfuet0I/pWyEKHMQAjhH9xPcRJ9qL4zhBZ+HpD+JGiX6VfoIU8BSZe6V1nM9lFolxcYuRH1&#xa;p8itFiIpQIDWXW8UaXf3OY+GMef3gdE+ORgQgxJruMqfGegZ7FePRnRIrhxNuFYmR4De8Uij2J&#xa;a4VidCBSKEqJ64VibKCnsIGbqxRICG36PuYF1Uvhy7RHFYzTm7+BMh6g6iU31Qkat3CbaB+lch&#xa;LvUUpnwKHSKUQTPI8rdArjOo3dq7hDEBcxhDk69cQj4g+QD8GMD+Y5AnIhEfoWsfQG7q1+jwe5&#xa;zG/oE9wNlIu5H/Agswa+6iH8qRde6MCf6JcoNiYa0y+OSlRAfyT9I44Wf0VkdTFdpBpRfQRny5&#xa;7qkZVgeLU5QIGK2lTpU/M0HmHZd5jwA4ymM+RDVLhTT/EHzreJ98JE3U8o7l0PRDbgrHqnMD7z&#xa;QA3T1gWaBOsYUZfoJNEW0c896CV84d/3Gn1O4bRHL+D031BLAwQUAAAICADnYYVaJWDHttcEAA&#xa;BPCwAAdgAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9EaWFsb2dIZWxwZXJD&#xa;bGFzcyRfc2hvd0NvbXBhcmlzb25EaWFsb2dfY2xvc3VyZTIkX2Nsb3N1cmU0JF9jbG9zdXJlNS&#xa;RfY2xvc3VyZTcuY2xhc3O9VWtTG1UYfk6SshC2JQR6oa2V1ggkQFe02FoKCumF1NAiodDW1rhk&#xa;T8LCZs+6uwH5A874Q/yOVZHhg1+d8Tc5ju/ZDTEtK8MH7ezMub23573uH38d/AZgGtsMTkXUtT&#xa;XddXfqekWrupw7lm5zTTcMYXuaZdW1u6Zuido8txzu5i3d8zJlb11s50Xd0V3TE3bIUK5Ywmu4&#xa;/MPM4elG6zTZOt1UwBj6aq4QWzsamapp+ZCiIM4wJtyaVhEGX9cbntbkchu2b9a59oDb3NV9br&#xa;QkTjFcOALveijGsPTf+6agk+HK8TwML/7PoCroZuhqXRmqbyeFCs602Z1sO99k6DBEXrcshqGR&#xa;4oa+pYeZfby2wSv+VPbok4o0+hhUj1t05cbyjsMZzhfb62KJV7nL7QqfYkhlPF/3zUoAvmBXBU&#xa;OuGFkrvCo1msLWWrwkr5TLpGEhz8CeE9o7pm36MwwzEWgjXqJRZVcYhk+kILui4hLeSSKBKyrO&#xa;4lwXYhhkSPjrpsfgFt92E1JEzpRFw+duwabAkjcM6aO4GbrLEmJ4ZTgbGQgFwwxxj0uGqOyT81&#xa;nkkhjBKMNFSf9W87ZN4ijJ9YlvWqZvck/BOKXGEw23wjuhxWlEgWE8Kstbdcdq1Exb27qlFWxj&#xa;p2CTK1VdYqH261oTwvd8V3cYvmtHZNpbYpNrC9xfF8a8bhsW9zJFITYbTnvWSr5LuKb+TVDWag&#xa;R7IXtUQPZEyfQ51fsNTCbxET7u6QD1S3eN+4uuoGT6Oyo+QV+anL3N0Evvq6ZtiO1ZiqznC7cT&#xa;dygqoT6Gm+3uBHUQVW5R/TaDT9MUzs+oFwzTc4RHMZ6Tz2Q6hrsMMZMS2EP2S6/1ZP9IhDqGy4&#xa;dNQWG2vapw6/+MZyLHSY+Kh5iXaf88SRb6aepnpPagjymSegCfYYAMtNdViyTb/k3LChYZOklN&#xa;U7jvNXShmIollJL4AssME8f9T0oV13T8uR2fS45ZQ3eoihRQW5+W86EN42jkVItGreIpniWxiu&#xa;cqzuOCbPUXDCMnHVYKvqK5eOhhOOqmj2Y9e/Lpp+Jr6EmUsRYqbkFVYeCxJFCakzI3YSswZEci&#xa;ajmya+hneDyjApPK1wq4VWxiPYkN0H8ikSfocuiIim6t0AjT1yy+LBcqwqJp80eN+hp3my8DS2&#xa;HKVkzPpIdZ2xayjGg4Uq6ooiqbC7rT5FULtt2ckZzIPfdsOfWoQ0Nc5GopGDH3TcmdmjucFSHZ&#xa;wwQlLEGd0oF4KiaHNZBKykzS/j0GcJE6tYPol3CZVptui4jjFO39udGxX/Hu+O3EQCJX/gVXBx&#xa;KrPwZDTNCaI61AH67hPTnZ6JTB+0STpyE6xYKTtBenV/o9NrU/JYqchYNsYSz3M66W9zA2tpq+&#xa;PnqAKeAAs3K5B+wSTwwOrclA10OcRjGwfC64D7YsD+J+YJnhAeaJJq0MBXegU5rYQ3G3hVsN35&#xa;vS3zS9LwT0dEs+Q7vk68ixPSy8Kd1xVDqVwCM8bvo4R9IS43BuD0/SsR8Ixj6+3H2Fl8XR39Ej&#xa;X/dReVb8CS9H91AN1bu0Uned+RN9CsophhrWm/pSTW8S+6jvBj4n4NF6jfauIEK9hAwUoV70BP&#xa;y9gf1e+vyAuwf9aAQRVbBF+0XKwS26fUD1Iffp5p7HxN9QSwMEFAAACAgA52GFWp4VR8kRBQAA&#xa;wQsAAGIAAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vRGlhbG9nSGVscGVyQ2&#xa;xhc3MkX2NyZWF0ZVByb2dyZXNzRGlhbG9nX2Nsb3N1cmUzJF9jbG9zdXJlOC5jbGFzc7VWa3cT&#xa;RRh+JgndNCxtTLkVEBUDJCllxSuXUqWhQDWF2tRiAYnTzSRdutmJu5tivOEnz/EP+A/8jrfSU4&#xa;9+9Rx/k8fjO7vbGOiCfJAvM7Pz3p73Ovvn35u/AziPrxlumbJlLHPX7ba4aTRcIdo2d4TB63Xp&#xa;eIZtt4yLFrdl84qw28It29zz8jXTFdwXc65susLzQoaaaUuv44rX8lun0xoYw0jTlXKta5Dapl&#xa;EOKRqSDCek2zRMWRcrvOMZEZfbcXyrJYzLwhEu2aj3JHYw7N8G5WQoxjD///uhIc1w+Mk8DIM9&#xa;bxkG6rLMbZvhWKFyh6/x0Odry3eE6Z8rbr/SoWMXg9YixbwpGPZV+oM1LxrCFY4pzjFk857Pfc&#xa;sMgM84DclQqsQGUDRs0m1Jx+jxkrxWq5GG2TIDu0FAJyzH8icZJmOAxtzEoyouMhx/KgXFRR17&#xa;sC+DFPbrGEZ2EAkcYEj5K5bHcLvyLKuQvB+qyY4v3BmHgkjIGXLbMTLsrCk44SdF/FEODS8Rj0&#xa;mAfJdbju+l8TLDnoCN3/WNKenWhVvhXbKl4ShFuTx9dWF6Po3jSWo3MIzHJWyt1bY7Tcsx1k4b&#xa;M069O+MQ0gY3qeRLVF7LUvrKYJvhm/5YW86aXBXGrPBXZP0Kd+q28PIVKVc77f4EVH3XcprnHi&#xa;e40G2LGPaZ4nYBVdlVyxdUtScwnsEYTg4PwKCQNIVPSaC8+NSIR/tBBomKr/xTeDVHQaEOOvWk&#xa;OVA1XavtT3V9oTgu1HmboqPhDYpMmP5ZFZl84eZjG67jW7ZBXGTzLZzO4E2cYWg8y4Lrnc5ooL&#xa;LaRfFZ6Cus3YXYgJzHpOqPt1Wn7M1gAhcYMp7pStueI2hplFUVJaiswoQwfFd4tn3zSPwqMYM8&#xa;PreXcDlH5X6FIWGRwxkKwOzWiHvY+6jeGA5taadSd7yGdFv/PgFE3hM7gTRcZUiSdh1zKnrX8D&#xa;6ZLBTTqNJsMbnn//cojhDo+ACLOZpK1zO0DNGzlSe91WDmUqvwIHQMo4S+H0qPRBjTJBCxjTzk&#xa;ZMig4xY+yuAIblNJqPHbp3YsFmS8IR0fg6syXtbxHHJqktYZCk/7FmhoMOhbUMOX5Hxczz7146&#xa;JjBVYGTdwJFfeg6rBxUxFaVAMqnOF4YigWYuZL7CSjB/jJjBo+oY6wA24dHtoZuPD7nmVq9lSZ&#xa;3FAzX5rcXuSuxZdtsaAWhuGK5YirndaycKOb0flw9CxankUXFxxHqiqgfqK8UUGYq9QMEa8+4z&#xa;hRWwkiD087yirVU4iR3K7KjmuKS5bizk5tzfKQ7NEQTFDLkwNIZhPqXQSyGZVV2r/FCHZTxw8Q&#xa;nSYCrXfpaw5J7KB9d2nsxAOMjp9NjaZKtV9wcDR1/YfgkfmU1hJpBckfwvPq5aHTYbxANHV6kU&#xa;6J4KTsJemWfkIi7RxaQBsv7fgNR5aSuXx1KZU7tonXgeoGzv6KiaVSaR3vlH7GwQeY2sQMcF+N&#xa;JXQjqMBqAGFvqKgHYRzvBhAY3kOFaMrcWPAN7FLq1jG/iQ9DdaEXekiMVHwWGZgN6DomIyV52h&#xa;XfQImtY+lR6YHt0tkUbuBm5PEUSSugx8mrWi7xPdKlDZj3f4SojP2BYXW7gdWlyk8QY+twQvWf&#xa;00p9N/QXRjQ0swwS7UhfNnIptYHO/cDxFL6g9QBFepB2lV1lbyftE7Sv0f5lwDWIIXwVhFLDvU&#xa;jiFfoqoBjsFzEd7Aso/gNQSwMEFAAACAgA52GFWqDhfi6XBQAA9wwAAFgAAABjb20vYmFycnlt&#xa;YWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vRGlhbG9nSGVscGVyQ2xhc3MkX2NyZWF0ZVByb2dyZX&#xa;NzRGlhbG9nX2Nsb3N1cmUzLmNsYXNzrVbpdxNVFP+9Ns2kYUpDyhZZVIiQpIWRRUUKKClbMG2x&#xa;KcWCGieT13ToZCbOTApxAUVFcfsv/F630lOPfvUc/yaPx/tmpjGl08pRPsxb7rv3vt9d3/zx1/&#xa;JvAE7jW4YJzaorFdW2W3VVU2ZszhuGanJFrVYt01EMo66c01XDql3iRoPbI4bqOOmyZnPV5Vds&#xa;q2Zzx/EZypphOU2bH5PAGAZqtmXNtxRSVlNG/BMJ3QxDll1TNKvKZ9WmowRcdtN09TpXLnKT26&#xa;S52pboYdi5BsBhX4xh78ZIGI79B/Mk9DJsDVPMMJop3lTnVd+s8cpNrrnDHZSSa+tmLYSS9Ui3&#xa;FecW7ZTLvrphGZsgM8geNd/UjSq3GXYUO303wWe4zU2NDzNIdYKi1jhDIu24qqtrHuCCOWMx5I&#xa;qhnuUzBoHULVNp8wpN5TJpGB1hYNcZoqd0U3fPMFzd2LwVSji+dcjZKYaDj6U3OyVjG3bEEcFO&#xa;GZvR34suPCUj4a92M0TcWd1hmCw++awlp2wuW02X2wWTfEvIGZJrMTJsKgsQ/pZcV7VGVMNgOB&#xa;BiYjZMfluomyQ8x9Bd46RyayZETsZBZOI4gCwF/9FTCYOExFBbhD+GQ3SHx6HecpW8ZVNSFb0j&#xa;CUoM27qp9MFwKCxb5usNo1nTTWX+hFIwq62CSf6YUQU8KqbeimW5jmurDYb7nebq5rw1x5VR7s&#xa;5a1UuqWTW4ky5a1lyzsXF1rBKcbDV4CHshu1ZAuLyku5zc8gJejOM4XuqP4gQliEjkR/LNi/5w&#xa;oRDq1ZMYTpI/TpH/Kp6rYqA6SHVWq+/CC6rmWnZLwqsMW/xMOl9vuK18IJUnDT46hmzY9esAOI&#xa;fzSQrHBYYjG3XGkmbrDTffcrngOFtVGxQZCZcoKj6YURGVdObGulnYdHVDIS668zJei6OAIsOb&#xa;T76Q0iurExLGGPoopyfbBSPjikjjCF5nOPN/mo3fK0pxjGOSoadBoI0YqNVcXldr2wHFkLcprF&#xa;ZFcN5IUueZZugSadVPtpRW9erdK7qoKkxnxrLr/7xhVOtxEhhd6dmr6zrIbtKcycbwDqWupjru&#xa;v/eRQE5GBVoS3ajK2I90nFDO0KubFgi9l4FqSvXCRdlMF3ea3D6i22MkELANrMLnM8i4ibk4hk&#xa;Adrk/UVofawVCk4RfJMGGJnGvI2IKkaOfkvczjvlgSyDPyClT/vTu9tsiyj/8EypjHrTiauO0r&#xa;bkOV8R50cfA+hU+40+9joqhDGlFoy6P/ko0ZJdwV/drjlvEx7sTxEe5RKbdLh9JhhMwQT5Clqc&#xa;aUautqxeCTYqA8LOomH2vWK9wOKKkJv09M6Y5OhLOmaYksoBqmuFFCaHOU+AGvXDDNoJQ5Hfef&#xa;N8WtlFQ+RjK7ZDVtjV/QBXciv9L0/WMHRyh4EWpZUUQSXeKZBmhOeHNcRJfmBxjAVuqr9C9IZb&#xa;qdxs9oN0v5KtG8Lzc49BCpQyd7Uj258s/Yleq5loqcjKaiYrcnFb32vfdG3afxOHpofBZ78bR4&#xa;uGj1DH3MW+2jr8tbCRTd3krgEOioKIJb76HX4xrL/YRdi8hJv2Joujt5uDQdST6fiCfiy/QrjN&#xa;J0T/KV0nQ0eVaQfPJFIi9h9BeMT+dyi5ggBXse4uoyrgMLpLELn9MY9dDoHtrt/k1ttGO44aGl&#xa;TosMnQk8B7w9EAvwLLRtlX16IP1FoPst7/xtlAP5wUC+T8Ah+WVwH06nkr5QJfvbINI0C75oji&#xa;2i9qh0dK10IkLh0wOX5klaGHqQvFJPdn1Htizh3YUf4BQHf0e/oC6hNV38Ec7gIj7w1T+gkSKx&#xa;+U8MSGgmGD7EnUBfIjApsoRPFjzHRfAljcngnhil1TjNn9L8lXcaJwu/9kIg4RuRUkR7mXZHcN&#xa;SbR4L5WjCrOPo3UEsDBBQAAAgIAOdhhVpaWj+mzwYAAAsOAAA6AAAAY29tL2JhcnJ5bWFjL2Zy&#xa;ZWVwbGFuZS9hZGRvbnMvbGxtL01lc3NhZ2VMb2FkZXJDbGFzcy5jbGFzc51Xa3cbVxXdV5I9sq&#xa;I66oS8mjR1qdvokXhoCK2Jm9SO3aQGyQ2R46AECGPpWp5kNKPOjNyYd0sJtLxbCrRAeazFgo/m&#xa;1WaZVcInWIs/xJcuyr4z41iO5JDFB82Zuffcc8/Zd59zrv71n/W/ATiJ3wgcr7stY9H0vNWWWT&#xa;eWPCnbtulIw2w0XMc3bLtlVKTvm01Zds2G9KZt0/c1CIHcVXPFNKjcNJ5bvCrrgYakwL6m57or&#xa;q9H42fB9Y3ZAYH+vrbFoAe2N+oEZWPVwdNZZcgWKZddrGnW3IZfNjm/Epj25ZNOg5TrGbd0JAe&#xa;3KFVqoTAuISwJDLRmY4bTA3nK3U5WNCa4ZfMpyrOCUQDJfWBA4uKEYeKbjL7leyzgrHemZgWxM&#xa;ZDGMnRmkcL/ArtGmDKqhu5XNffbnC9vslMUufCiDBHZnkcV9Q3zbK5AKli0ue6L8/5wBvdfpxH&#xa;npux2vLqddJ5BOIPBYvrx5MNXAs5zmRKF3iDF0rZ7yOSzNVhoPJskMCBzth/xKq213mpZjrIwb&#xa;s05jdZZ7ektmXWoYIeSLrhv4hK4tcKPbC8tZca9JBcey23jWdBq29EfLrnut057o9Wy7hfOrbd&#xa;lHfbbQu2DatO2qFUji/mE8ksHDGN05iEd53pGCwJPd/kV43h22iMQ0eBh5nQgVBBL5QholHmPd&#xa;9An87nyveuFSFkcxphNQg4hvzj9zvS7bisIaHhc43JfmHSewWtI4G3kzS+w1fHRL3kUzGj4mcK&#xa;Bi+T4/Rjz5fMfyZIMv0dmeGEnjSQGk8XGBQv5yr5eX+4S+oOg+kcFxPJXGMINUiSJwog9uWzL+&#xa;btA9jUmdzJ/agsT8sue+YC7a5BBTd+DC/Jmj42k8w3wmP+fl9SCNswLjfcC95wOb1ZHEJ1S+eR&#xa;YpXr4jSTbOqv/iOZ0p/9z/XhK7oM77U+q8z3O/thksM037Zd+gHybc1tnYLPGxmegzcsns2EGc&#xa;+n4aB3QMKOJlN472XGh/j1Kedltt07N819nQF3hke5c7gWUbFbPNvYb9VT+QrXlJgrHQpfE5Vk&#xa;yyUdmTcySlXw0VxgJ1Fp/n9h1fepvqi6ybW9QvcDp2IlrToMEGqez4JHz1jt2WSH+jGVfZKAqW&#xa;1RU5s3VBZInRPn63XKnWPasdnF4NpNKYaphtFigNV1mc6oQ7kBVVnEb7JcGdwGRho5XBNTikYi&#xa;sKJw2u3kFenvPctvSCVZVQ5T5Z3Z9MHnwdg2AaPXrGtGzmaOCOqMMbqd8+vZEgRsZXebtCotRd&#xa;Z8lqsquxbO3uu5lAmj7FTWhXvtCToll8EV9SrevLAvepRO5qWqW+JNmujX0VX1OYvJhlORlSbe&#xa;zrAvl7bdIavkH2bLgatfiTvQWlcO9dP4tv4lsZ3MArkeHbrmbxbdVwb+A7LI29XT1sXI5pE7o9&#xa;0f6LknPGvNKw2Ec5sbsvBhp+wK182Q3hA/lt8FJ3ioy6KkTNTrGlT7fq2xcFDt1dUcOPSQ471M&#xa;7ip3gjg5/gTRadaQKnyopbN+0FkkrV1nn14AXlfJQnC5ZvcWDKcVx1h+Elg7zgdaZ+jcyPdXeW&#xa;LUfOdVqLzPVoJFMNi84ZS33kTm80+8grn002QYbRJyRzGUUPIPcKMthB+ZK69UD1IKFuUdT8Gb&#xa;8+Qpmg1Ivv8vcOj6JUvPIX7Ctd/EN4B/k5n1lK4H7sxwOUv+BvkCM5ygwO4CDflaXf07KydFFP&#xa;FNdRBMqli6V1boC3oKV+h1TyTZT0Y3/F8VrqPaRqyWJ14D08UUvq49VaSj9RfRcn13Ea+Dtmbp&#xa;X0M+v4JLCOc+pRBdZoOom3+dyB5PvYpyE1KYr4pfKdMYMx7WBUB+nXDEeU33sifzCPC5RDmMMC&#xa;v1iH8OnbXo9TR0U3HHp9qWuzRGh7MJw91IXDMC7H9j6Dz0ZWRJKxKx+83GAYmn5FhZTQzdBktT&#xa;ag16u1QQ7IeEDTm9VamgNWNHATbhkorVW6ATqyjg7nYpRe6EXp1tzRW2xH6m/EJI7hFJ9Kqm+X&#xa;T/Wt5CScUEbwPYTkvzGp4dgHbJP0XcPMB5FMhR9h2HtCswWGXMSDKGEMRzAFowtWD9cJJjg6hl&#xa;V8AYlcSl2wY1hPx7Q6TEp9RU/8FuniTby09ke8XC79EzvV6E28Wiv/CS+X3sF310KuvR2imhh+&#xa;H7s0lg2h6kdMUyM+pr3FP2Nf7R9IrV0s1shWMlWNbK7nec1q+GHI0mFGrFj6Pf6+H2q8htdjg3&#xa;rs4GCxRBuK6xGz1R+EeE1uCD/CG3FAuXB7IHUTb62Fbwn8Knxq+DXlCcrH+HWI+Cp5JJanYvls&#xa;LCuxrMXyeTz0X1BLAwQUAAAICADnYYVaA6S1xYwDAAChBwAAWwAAAGNvbS9iYXJyeW1hYy9mcm&#xa;VlcGxhbmUvYWRkb25zL2xsbS9Ob2RlSGVscGVyQ2xhc3MkX2FkZEFuYWx5c2lzVG9Ob2RlQXNC&#xa;cmFuY2hfY2xvc3VyZTQuY2xhc3O1VV1vG0UUPeN8bLrdJm5SAoFSSmsaf4QuhUIJbgq2aZvAJk&#xa;GkBNEXa7IeO9uMZ6zddaT8BH4I7wGkEPHAKxK/CaHe2V1cJ3Wj8IAsjWbvx5lz5t47/uuf3/8A&#xa;sIJvGL7zddfd4WF40OW+2w6F6EmuhMtbLa0iV8quu6FbYlXInggbkkdRoUm+muLyIAqiJ9p4a1&#xa;E95MrfbfpSR/1Q3LXAGOY6odb7By7hddxG6rEwxrCkw47rU94u70duFhX2VRx0hftYKBHyWLQG&#xa;GRMM86c43E6TGG6egwzDnf8s0sIFhoVXYjPIoveM7/NU3ObOM+HH1dTSjwPprvNedShgKw4D1T&#xa;nbcgJk2FLadnARDkO+EMU8DvyE4Zpqa4ayN/IuRVtSZqCVO4itMljNJiGsNxjYU4bJ+4EK4gcM&#xa;i6+UcprFLOZsjOMKw3i8G0QM33v/S/sQ1+mm7sciXFMkWfmCYfZlSgwXm4ZH+kmKWrrBpWS4NU&#xa;JRaVT+5Re2utZScGXhbbqofS77YrNNjVd8OpyYBVUdvIPrNq7hXYZcQEdfKY7Ev+plFYlJYNTW&#xa;YfdFfxPIW7hqI4dbNCuFjoi3kuqui5gnN0UNSKjDQzRwEXT+9HEWygxTBJMlz52glKY5WML7Ni&#xa;q4TUNx1hRu+WHQi+sHsTARtRbvUTEsfMBwyXTNEMfKyLsezdrBh/jIxh3cdTCNmQuk/ROG4nlb&#xa;2MKnDM6/CtMBWCm+JLJ0/plw8BmqNpZxPwUeUHXwACXj+JzBNrXxtN7r9xhKJ241UPt6TxiFu7&#xa;q1ylVLiqiQhlKJrp0daIEmcVIm0Q4eom7jSzyi2WoQddPw2udym4cB35HiiVkYZrxAiY1+d0eE&#xa;mWXh27Rk20EUkKGmlDZtRNNHtaKO8vfoLcpinTWlsjEU5J55qMzE0TuU8iKpW7of+uJRIAVVKU&#xa;ezTgyRy9umXED+R+Rxmf46JshOjwGtq/S1jDH6AVa5svQbXvuZtgxrtF5PzJOYx+tAsnsDC+Qz&#xa;uzdpl6M9zcAAhobJgI8f48YhbXL4Kgk1CV4COJ8GDAAncDMBNDAF8hmYQgJLeWV2hMXDARknOz&#xa;jN/TpDfo9UjaOIUkaiTtnmjMXyEdzZ3E+YKh/j48NfcM+r/IkZYz3Gyg/er7hXOcIXKbxHKzXz&#xa;9N+Ys7CcZ6gRToqXT9gBpOnxYcJ5DOu02pnYKbrPDeMnyyVsJqqt51BLAwQUAAAICADnYYVaWL&#xa;A7W4wKAAArGQAAOQAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9EaWFsb2dI&#xa;ZWxwZXJDbGFzcy5jbGFzc81YC3gcVRX+775mstkk22kLnYJtgVDyaLu0lYr0IU1K28A2wWzpsg&#xa;WNk91JOu3szDIzmzQVAauiVEEFRfEBAqKooC2PJm4FK8hDfKL4Rny/RcU3iuC5M7ObbbNJQ/3q&#xa;55fdOTd3zj333POfxz372POl+wGsxgsMy7NmPtGvWNZIXskmBixVLeiKoSaUXM407ISu5xPrNE&#xa;U3BzeqekG1OnXFtgUwhvh2ZUhJEO9goqd/u5p1BAQZ5gxapjk04s1vcMflt2F6O0HUEo+fxDXb&#xa;juJoWXe2yxgwGdqSpjWYyJo5dZtStBO+ZEsd0EmeZhqJCu9KBqGvjyRs6mRgWxnq8qqjuK8Zjk&#xa;9W67Sp/ILWRFZphuasYQi2tG5hOLHM6FiKYQ+YVj6xQTVUS3HU3MoYGtEURQgzGGY2D6pOylV3&#xa;0/g+ckvrJDvFMBOzoghgdgwxNNTR6HiGkLNNo2VnJI8CAVJ+lr3NHO408wXF0mzT8FgYLmtJHg&#xa;7Myhc5k3IszRj0Z4qOpieSml2Lo3XiFMO1x0qBVRM51kxXqdnVwPSqA6qlGllVwDx6VUPf1i0c&#xa;7gVRzMdJ5B2ENtm7pXUiYwynoJmznXpIQHj7CjiNASJaGepJxPmWSfA5IyLagxR9YFhcy7+H8g&#xa;W9OKgZiaEzE11GbqTLcFRrQOHaLiHH7jdNxyYHLTBcWa25ZgyZO1TudNvM3EbFyOmq3Zw0zR3F&#xa;wqSmnbhw80hBrcHe1TpxQaei6ynNUckGp2NpFAksa4pgOUWVx8Bw7tSeMFGVGghW7HwGVkhktJ&#xa;cxBFpaRbyc4ier2M4k+G2NYSVWSWTj1bTg4ktFvIIhbBd0zRGxluHMaak2iSKdEgXwOjqoY3K/&#xa;FLGeYWEtLWov3yghiC6GpTWzW9FwtLyaSGUtreB0jDgq51ibUwrkBQLOY4hmLZUyEt+Z4dSWiy&#xa;bddzxyY9iE7iiS6GHoPYps09xXK9f0ZXXTLlrqUgGvZDhtWmHvBVYqil5sppw9oBm5tbougrLv&#xa;yloCqsO209tuMrNeKFFyzlC02qoTw0Ve9F7M0HioMQS8mlyHQswW8RqGFS1TpLmpceyXEEaW3K&#xa;BoaJcUVRGqhAgHVva1toc17kv82VHU9BwHcJuIRtqf1x2OXpVkL6/X3GsHdAkC8uTCjubotBVV&#xa;x+PWqWQ+dcE4LAt49Iq4hNjyZk4hs1J5mTEur8M0dVUxBBTJ9EOKXlR7BkhOy9bqTX0m2nUYO6&#xa;MYAtXmsDlMZVDEaxli2aJFudNZbyl52ut1MbRzhxZxObeqkt0h4vUMkm5mFV6ie1Wd6JC62RTx&#xa;Bspenu9u4tmr+UiuS1ykxZtwJffcNx8Lz10m4CqGR6dXsGpWkP+jaS+03hrFHryNnDLnnlTENV&#xa;Pl4YqdX0ygvUNCHd7JXUiztX7ujddRgbPHC9wRM7/n6tPKwHSod+N67gHvOXKS9Rfx3H8Dz/3v&#xa;o9xf1MgdJy4jC2VNY0AbPPx+OG5QOhSxOOpOp5tSMJ03r9q2MqgeKq9yxYjl1AGlqDs8CCnu4o&#xa;fnFe797o7nqfy6aytDqltubU8C361oO2beXy9SefWHMVvlN16PnZexYZd/lhdMZPVBizQrXwA3&#xa;/VdVd6eftc71xHGtSbi2S3GBvpPKrX9M7iRqT4HfjinORXyK4YRqAWlK7TzyDLrWGw61DPvo3r&#xa;yup6+7Z/PGru4NfT3dfZ3JntQ5Iu7mOYQSXBT3Hm2Q17JEOciXCxhluOAYBLkXcZ+OYgwlCfU8&#xa;9UuuSGXYIS3zqmGTaQTcd1h19Ny/q2uSXP9ZnusPkj/kqUrki/mUtotM/wDZl2LMO1uyRnr9/B&#xa;HDbvKqXDvQH5aoW3mEoXXSsDvcW3jkfYFH3mPca6sKH4N+zPqSmhf+K/6nXUhNFeYVLKo7TlLP&#xa;r83leowl2UoVcuNaxFdjOAEn8r7wcYp36hD8RnLmIZ1GuYX8Bp7g7ec3GRr47aGq8Wyvic9kre&#xa;i38R2eTr8bo6Jdx1vR7zO0TLfRFvADQrasqtemr651i5l25x7DD/GjKJ7Cjz3BFVVj+Clvmp/C&#xa;z8jzJ3bmbltkKDoZ+jhv/366ttiJzZxDoxvK4V1fRbCAX7k5tdqEc1smsRf/XSDK232vleLBUK&#xa;MXqtl1kQdMzSjg91SGdJc7hj/i6Sj+gGdo2dTX7SMxLOMMU2ZEuqp1uiVN4olE30JSeH7fzB90&#xa;fe31epAtXnlfaxim42YbslNDyqE7Ht0YfN6mJF1Bu4v5ftXyZ+pS2qChOLQNGbnLMPwczetYNG&#xa;UWray6XuN88Y5yI+vZxMZJ5Ishyh0RBONR7pxA/CqqCvVEd/PfTcCbacZ/hyHOv9F/pxMNEJXa&#xa;Rum7nxyhva3vXsxpT+9z++u/0zNGFJgBGXOJ/oO+EZqJE63j0edJCuwk6TNoSa79AOZv7RvFyW&#xa;dFFleGghyqjEU5XBnXyZH9WCjX0eMgWqS2Es4EzorK0bQcLWENcANmyVHp7BLOAUo4F/goosH7&#xa;EBrD+RUh9XJ9Wq4nEQfQm5ECUmAUF5SwFcjI9Qcxv28/XpWWRXeLPpevhByXNghUZMTkWJpV/m&#xa;uQG9KSVoJByjTKjWm5MR6lTTNBqZDKhCQrlQlLTioTITV2pTKCdGkqI5LuVwCpTDwi7aan4L2L&#xa;i9Ib6Vnnvx3DWw5gj6ukLMgxuUEW5Xo5IteN4uoSrqXtmuSmdGhFfHacljO5SXoX2WUM750dT8&#xa;sNrurvB/aS7YN4lp5LEHgB/agXECp/WgT0uc/5VZ8QsJ4//0lrFhJuSwi5DYTdEF6C67GAjHEy&#xa;HsUpeAILWSdSLIMtLva3cJxZDh/AB7k/sCxuxE2EP/eNG2mOuW8/RKMAYuxC3ExvBddnbqa1Qc&#xa;xhSdxKcyLNzaHRh0mHZnY2bqM58k400+gWagLXsQX4CEmJwsYzhPFN5LOjuBO30yiGh+j5Mfo2&#xa;4HFch48TXyPJaMY1NGrCv0hOgM5Rh0/gDtKIvJEtpx25Hg8uKmPa7eNZwTgkh9JyiExaDW07R5&#xa;bQjJTRFDjOYtDDMiJ98hBk93JkpbtK2F+GdsyDNrR4FAc8PMNyOC2HS/gMkJbun8EWzcD1JXyO&#xa;3kTkCJPD0oMewHIk3SaHvW1LhAXcVV/0wA64wM0lw0cJ7XnIUlM3jKsxQgfeRUe61AVrjQvMgz&#xa;5YfGSScRn9PeACE3Rh48AECP7b8SWaC2E31rqGDLvh/GXi4onhDpLFQds4Hs7h8XCOVIWzQGqT&#xa;FRe5kUxnoY8seMFGH+lr7vG+vreSTno9uWWXIjfkLhWudil667sUVrmaR6pdipLWrb6blV3Kc4&#xa;GvVCeneIj/ZOy5Azr8NHcapbhvSYHbILaN4Xt778KTyfZH0MRnx/CTTPJuPNm+Hz/3lH3WzXCB&#xa;xucwU6Aiyng19dNmgijX8/i2ezAn8zBCe9NtGcqelDn5zPh6UqZLwK9dxRpJeZ41f0HfX7ocv8&#xa;FvfYGSr2CkrZ1k7HPh42v41cZfE6/D7/C0f6C4uz14HvzTXncUxHOuiwTJwMCfKRfvIfoXomNE&#xa;/0r0366RBDxPdDvF0kvpv0VY7NKzfNrh0w0+TftU8emAT7f79DKfvt2n9/h0t08fwuL/AFBLAw&#xa;QUAAAICADnYYVabxo9mIUEAAAoCgAAZQAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25z&#xa;L2xsbS9Ob2RlSGVscGVyQ2xhc3MkX2FkZEFuYWx5c2lzVG9Ob2RlQXNCcmFuY2hfY2xvc3VyZT&#xa;MkX2Nsb3N1cmU1LmNsYXNztVVtUxtVFH4uCWxItxDDS8XWWi2lJIGuqFUsBQVsIRra2gCVVhtv&#xa;NjdhYXM3s7thhj/gjD/E7/hGO3XqV2f8TY7jubtLpM2W4Uvz4e6955x77nPOec7J3/8++xPAPJ&#xa;oMFdNpGlXuuvtNbhp1V4iWzaUweK3mSM+w7aZxx6mJVWG3hLtsc88br5BuUXJ737O8dUdpF70l&#xa;l0tzu2Lajtd2xYfjR7vrGhjDUMN1nL19gzw3jOVQoyHBMOW4DcMkD9u87RmRlduWvtUUxoqQwu&#xa;W+qHVu9DKMvoTmWniJYeO1BKIhxXD5FIYM/Z2YGfpqzjK3bYbZydIO3+Nh5HerO8L057oluW6R&#xa;Dh1nGbRq27JrwmU4VzqexPuiLlwhTTHHkBn3fO5bZhBUUdYdhnwpNrGibpNvy5FGx5bua5UKeV&#xa;hbZmAPCfpNS1r+AsPCqaC/AlVuk+Hq6WLf1DGCc2kk8aaOQWT60YO3GJL+tuUx8NJrJiglYKDi&#xa;tH3hFiXlkcAzZLthMpypKEThkWEiJriYMjKMxCZIw3sMiYYgT8OTseUfx5U0LmOC8nhik5R915&#xa;KNYrNla5gkMrzsSkP+BWlor2GKIXUp+qVwjYqfTuF9htzko244x0Whg6huH6SRA5G/j7daQtZS&#xa;uJ6gyQKG6TjQe4Sy3bCksTdrFGVtvygp7XWu0jFLDVR1HN/zXd5i+OF4ei255+wKY034205tlc&#xa;uaLbzxkuPstltz3cBedXF9vyVizIu57guqd8uWL6gMNzCXxqe4OdiHeQozNGCYi+P28UqvHKUp&#xa;rraf4fMsZWmRobflWJJIkCYqLB21+oUjT5QL6dUdt/n/LCRGDY2TcTloeYqMB5xnGCMaHQfQUd&#xa;GNFF2IzIZeYFtooGMVxTQK+JJh5iSylU3XavlL+75QFos13qL6aSgxnFVD4xiaQmx7xOPTcQd3&#xa;01jDPR1vIKv6/z7D5GknmIZ1Bv0ownD+zU92BZk7/UjUsYkHaWzgm9BxB6qOh1hRikdUMVWFkI&#xa;SqaWJYFMtXhosnG2qoEM/swFoHx+M0vkeV5uEyQVejyTG5vcldi1dtsa4WhsGSJcWddrMq3Egy&#xa;dj8s2ablWSRYlNJRhKGJSbUi7pi7a7wV2epFKaPRKUg9eEuq2UjkDXFRqGWn7ZritqWsM0tHXR&#xa;qqPcxQwZLU8n1IZHrUBAcyaVVJ+v6IIQwT1XtJP4JRWmt0uocESYDhfGHqCcambyTHkvnK7zg/&#xa;lnzwczA+BK158gq6fwFvq5lCu4t4h3Rqd4l2PcFOvZcgqY53I++PkQp0+fxvOH+Iq38gt5V8js&#xa;JWolDufY7prUTWKG8lszPlJ/joGZaAA7LuQZ3WvsD/QvD+aOil834ey8H7DF/gCunUWxPBGUhF&#xa;bx100OuhPLrdiHzfopwkcRsrEdYl8qNeuZo/xFfZnp/I0VN8ffALyqXCXxhU0qfY2ir9inLhEN&#xa;+G7rdppS4Z+AdDGjYyDN9RzKG/TIQn+RTmQYA6CYvWLL3ST19VF/XeGfruBNp+DGA3iF+DHVjQ&#xa;Xz+dPsYn/wFQSwMEFAAACAgA52GFWn8M8SEzBAAArAgAAFMAAABjb20vYmFycnltYWMvZnJlZX&#xa;BsYW5lL2FkZG9ucy9sbG0vUmVzcG9uc2VQYXJzZXJDbGFzcyRfcGFyc2VBbmFseXNpc19jbG9z&#xa;dXJlMy5jbGFzc61UbXMTVRR+bhq67bJtQwqtxQookealsCKgYFqkrQWCKcWmVKkv8WZzky7d3N&#xa;3Z3WQmf8AZ/4LfHb9WnamdfvCrM/4mx/HsC6HYhWEcP+zde8895znPOfec8+ffh78DWESTYc2w&#xa;O3qDu26/ww295QrhWFwKnTebtvR0y+roG8JzaC8ecdcT7orFPS9Xd4LDkuRW3zO9umHZXtcV1x&#xa;Qwhsm2a9u9vk44bX0lulEwxDBvu23dsJtih3c9PdZyu9I3O0K/J6RwuS+aA4sTDGcTfF+JDBmm&#xa;X0KC4cZ/CkrBKMPYC5gMF/PVp7zHo2BqvmvKdrkQibq+aelr3ClrOAmNIZPzfO6bRghWkS2boV&#xa;hNDFm0LGH4pi31gW6ZQanXCWFthYFtMwwvmNL0bzPMHWWw3nhKluXjksKWhiwmVaRxmiHt7wTk&#xa;16v/6+sSx/G63fWFW5EUqjQEQ/Y4FYaT9cB/dKRImvYKtyyGSwmRFJLsFdNb7Th+fwRvDVGhgu&#xa;FyUh57Hcfqtk2p927qFdnsVyRRa3GDaucCw2jDtn3Pd7nD8N1Rz6bs2btCXxP+jt28z2XTEl6u&#xa;atu7Xad8/LFfZrjZd0SCeqVw3CCIvmb6ggrlHVxU8TZyE8N4lzITKWiYw2yW4swzpPKFERTpBQ&#xa;3uUe7OJKVsW8M8LmcpLVcYTj2/X7ZtS3Cp4D1KYY9bXbHeYpjKbx/lFCsRl/dxTcVVXCenJrk6&#xa;nU98i9lqnG3KpPRattt53qoE8iZmVaRwi9o+1xZ+LewAyhAPK4lhhlCPzoPBFUFn/u1OwSLDCM&#xa;HExpMvUIrMNHyMOypuY4nh6qsGSs1wTcdf7vsi0FhqcoeqQwG111jQWUc4lhLrMpm1hlXcVfEJ&#xa;7mkYx8QoxV5hyL9umyv4lEF7FmE0JBbzx4IsvP7c0LCGhyqqWI+AB1Q1fIaF4GKDQQ3eJipxhk&#xa;I+oUYTu4Hh3KsVFWxRFVuhtoYv8FjF53hC1btC1IPhYBvc2uKuyRuW2AwWyj7ViLFLczM+T1RN&#xa;KR52Ow3hxpKZjegJt0zPJMGSlHZQVjSlKMSKlPGYEnScWJXBdKLOi3hRqDW76xrirhkgZZafzY&#xa;Do2qN6T9GIJNJIZdTgBYHM98jgFLXfCZLTDKX1SzrdwhCC6aMUS/O/4czP4Rz6itYLoXgYU5gO&#xa;hhPt3sAM3QW7s7RL0Z7aIobZon+K/tOlQxSAQ+jAD1DSPyE9dIAbe3Q1hK9D76nsHYZvQpwA7X&#xa;robSqyHnibxgeht8DHh3QX+MiFPsmuyPbx0d6AqRazimzrMfJNCjmNMhZihstkHfiYK+5jOZv6&#xa;ESPFA9zf+wUPqqU/MBFID/DoSfVXPCjtoxbBB4yp+Mf/wqSCaoZhE49jvEzIDkgfYHsv5JzGt7&#xa;SqcSZGKNk8lKoYQ4N2KSgw6J+l3SX6zuF8+C/h/D9QSwMEFAAACAgA52GFWqGu65tfBwAAWhAA&#xa;AFMAAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vUmVzcG9uc2VQYXJzZXJDbG&#xa;FzcyRfcGFyc2VBbmFseXNpc19jbG9zdXJlMS5jbGFzc61X63ccZRn/vdnLbJZpk2xaypQaUpq2&#xa;e0kYiiIl4ZILpQ1u2pqErL3AOtl9dzPt7MwyM7sQb1RBBLwhiBq8ICiieIu0pDHnqOf4xXP86A&#xa;f/AP8B/wEVn3dmcmsmYfF4TjLPe3ne5/29z33/+p+VPwK4H79nmChZNXVWs+35mlZSKzbndUMz&#xa;uaqVy5bpqIZRUye5U6cxP6vZDrfHDM1x+op1MRkxNWPe0Z1iybCchs2PSWAM3VXbsprzKsmpqm&#xa;P+joQIQ79lV9WSVeZzWsNRAy67Ybp6jasnucltzeXltRMxhv0hd9/hH2TYtw0Ihrv/p0dJaGfY&#xa;tUkmw6F0/pLW1PzHTLm2blaHMv5Sw9UNdUKrD8m4CTJDR6lh29x0x+gVVcsWCPMbVTHJK5z2S3&#xa;yIeOuWS6y6Zpy1dNOliySbOw1DjDr7HFdz9ZIHatysWAzZfKjqeMXgJVe3THWNl2RLxSJJmBhj&#xa;YOcZ4vfppu4+wGBsfMmZ2Ut0cihkJRzxh1vOzDAcbem6zIyMm3FLElEoMnajox1tuFVGpz/6iI&#xa;wuf3QbQ9SdExY5k/+/uiwpbHfRarjcHjdJ7wSfIbUVKMNNRXG/PyW1lq0xzTAYjoS8MxN2PkrO&#xa;U0sgHaHQA8NAmEWbtbrRqOqm2jyujpvl+XGTcFW0EkVDjqF91rJcx7W1OsNzG6/VzaZ1masT3J&#xa;2zyqc0s2xwpy9vWZcb9aGt7rvdwen5Og9hH89sPSCePqW7nFx/AHck0Q+1I447SS0+g4y7cDRF&#xa;7/wouaPunKjV3fkE7k7Ru2mlLZ1J4DhppKQ5pMq9YRo8L2MQQymy/H3kx4MJkAcnuFl2Cro7l8&#xa;Aww/GdHWxzrG5kEuBGU4iAImR0p5TkkkLmhDZJkPoQr2gUn0JJ07ZmOhXLrmki9iScYJDJNAbX&#xa;zEfNWespGScxlMTDOEUKMbhZFYgfSZGP0+O71vEI61a5LWGCtNTUjAY/U2G4Ob1J4wEToT6Ds0&#xa;mcxicZju2Eeqpk63V3dN7lgmOkrNVdcccUuTUFDgUBP2lzSlH2NL2t5TglezyKmSSmUSCLhYa9&#xa;hHMMkSonk+5Jh+r9Ai4mcR6PiVzpQzltuSeeaGiGjKIv/dMMsXrDHXETmGV4pLWc1UoACquXU4&#xa;iB4jtW082Gk0A1/Pnj2xzXU4jjEsWh05h1PPdKgDLAvWEiWsZkpiCBUnzE4dvFAuXIJ2ALzYnq&#xa;cOO+hAZDsuTZNK+LgDqcvrDt9V7REmx0+ZN4SqicCtWpD6HndQnbvOizQsufo7T6+IWBbO4fV9&#xa;788/XHLjrZBL7AgASuEFpbpOwSHzGMBL70gWbemrd2Du5nU3TNl0mlVBES+MoHpoqdDfRCCu14&#xa;kbIVpQHhO3VRsKnLWWeenrOtJ7VZgyLgGxRlFAFjN3YCB1YrpbuaO9YbniH/zNkbO4IkLU6uNg&#xa;XdfTSb8voCytaaV9IYFIqzjbG4tkUyEwKHz9a9KRx9BhnfwXeTaOJ71PSIFmGD2FxoTQu/SMZr&#xa;+L5wox/ISKFb1OofMaRb7Vck/Jiy5ypUv9u5P70Fbab1BkjGm/hJEm/gp77gNagyfoZXxcbbpF&#xa;uhTr9CMmTSISUutJgy9OzMKOGXIud73DJ+jXeS+BV+Q84zRtBFY2GVNGNGs3XhLtPiQ9ons5Yu&#xa;UyMZzDvy5GinG7VZStH+ijLp5/YZ3dFpYcQ0LderPWQredw0gxaH07TjhCk6G4oOHxc9dcpq2C&#xa;X+sC4kdY6uthD+toNjZLAo1eU4Yp1togMDiHYGtMujSWFZoi9gD/ZSVac2n7q2ffRdpNkVKqXt&#xa;RO/M5vqvY//AYFyJZ4vv4YASLyjRQUmRxKxHkQpKbDChJMSsV0kUfuf1QeL7AN0OqDiI20VzRK&#xa;ND6KM9MTpMozZvJLBFvJFAF/VGAl+MOI/gqI+G/Y12JKK53Ao+BpzLF2hwD7BCv3ewQD8qFnOp&#xa;B1fwELCM8QXso908EF3G5DI+tQAp+jaikQVczV7DgSU8zpahLeAQzXpoti7ptTXOVXp7wDNBtJ&#xa;doIKB/BRWg0F/IRYKrVnBZCKmLDyE8PSA4i0twBwqRP6C5jM8MRjfLUOjM50mIEl3jiCkxcZ84&#xa;psTo3X/KpZ5OfXEFzwVShREKSjwMcCoAKna/CiwyYcQI3qXvPdilHBxm6WEWH2YH36eCTZqU8M&#xa;1/o00Sf833SdOSP4TnCESGWReu0uQuyPTdQ76wFwpuwYPYT3XrVryEHlzDbfg7evFPHGIR9LH9&#xa;OMwySHvW7xVWpVlgfRp9TVifzJ/B12kUJ8u+hIvkBQLoEZoJz0gEullc8yLZXw/kXKN/cfJb3v&#xa;7Loed7Wj7/Suj53tbOd0bxbbwaRMsoyRH+fDS7hIVU21skaBk/XHwXr+dzf0GHWF3GW+fyV/F6&#xa;bgk/98UL21Bm3f0vdEt4o5PhF3gnkNcZ4CEP/u2iFz1RvEffJK22eXi6sOStJrEL12nURmZbJj&#xa;pJKyL6M8h69OMBvTegIwH9REBLAZ0LaC2gzwT0eWT/C1BLAwQUAAAICADnYYVaUzSt7jsPAACR&#xa;IgAAUgAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9BcGlDYWxsZXJGYWN0b3&#xa;J5JF9jcmVhdGVBcGlDYWxsZXJfY2xvc3VyZTEuY2xhc3OtWAl8HNdZ/749NKPV6hr5yDhxuont&#xa;WPfGsePYK9uJJMu2EtlSdHi7dlpltDtajbWa2czOylEphLaQtrSllDaEcFMILoQUt0ltszkMKb&#xa;SllKvchVLOAuUKV6AkxPzfzOzqWikK9e8n7ffmvfed77ve++LrpReJ6DAXmYbS1lx8SrPthTkt&#xa;HZ+2dT2f00w9rmUyllmI53Jz8d680a/lcrp9TEs7lr2wczJt65qjV+Yn0zmrULT1PRIxU0vWtq&#xa;z5hTjIZOP93opEQaZOy87G01ZGn9GKhbi/yy6ajjGnx4/rpm6DaKaCEWbaupJ1t4fFpK4pA9Md&#xa;b14liWqZGleQZNrROnROm9fiRcfIxU9q+Z4279tVbXjqnJ52eqJUR1GmQNGAvENLdR/Vp3VbN9&#xa;N6D1NNzspmBcmmnQVHc4x0f04rFAbNaYupfaiqYfTpHOgblhmv7AUhaXISFE72M/EZkD1kmIZz&#xa;hGmidbVkVWaqi7fGdNtppt0bott2OkqbaWuEQnRDlBqosZYCtC1KTd7oJqaQM2MUmE5dV3eDOR&#xa;omraKj24MmrAqZmZTV0jHVTQr23ieMlrEEIabjS5Ubc2zDzPasNbOeCzDN/T8oHVoXxSd9pDo/&#xa;kuk2+NLKFYlamfasF2ZjadvIO30Lji529Ga0PKwnUTtTrWdlCMa0s/VslUNeYYgodVJXhDqoGy&#xa;a18rqpGTLdzhTFEec1Wx94qKjlNuxBZ6J0B+0V5PYhImYcJ19IxONa3uj2SHcLx5nfE0/PaE5c&#xa;cMjpIjYKMu1HUPTpYGjHZDoAV8vniphOBJHiiKmrmjnmgV/MGmZ8/kB80MwsDJoww7SWRto5DF&#xa;NMWZZTcGxhikeXim+Y89asHj+pOzNW5oRmZnJ6YeeQZc0W82se92rE8YW8XmX7YNtqBOGnY4aj&#xa;w9h30z0ROkK9jTXUB4N7G5gObMjzquatozSgwETHmOp7ixDMNt6hCZvKdIIpnC86vY5M9y6GSe&#xa;XkN+K4a3AcUnAkJ5ki4lRtN3ZlGsYplU98cb5bM8T5Vz/0+5HmyyhZw5kpTnVXzyyTnvtMuglG&#xa;pjH454nx8ZEuL82B+cSbVXB9kyaFgm9FFTxWliB2fGQ81pvJDIM9Urb01q5xw8npMj3AtLlq5p&#xa;Xo7UzBrI5ctam1Kp8HSYvQJE0hvNYtqp6sgzCcRJllCcNbkWiaaduEWSjm85aN6hvrHRmM5W1r&#xa;3sjodgIBNcPUVi0bnK1iEbcKnIuQTrMws27bln1SLxS0LJSdY+qplgmWGuD4+qa1FNQShGTUXT&#xa;V1Jz4xOiQRznAzol4UQqa7lvJw6+ZGj65I8woF6TxqinCZfss0vfIrE/qN26rIvoaY36agDL4T&#xa;Z1sNxTXRd4izewQyjwyPjcv0LhxMQXdG9YeKOkq7myNkes+K2F6dOte31ncrFKZHUftA+qg1XH&#xa;QQ0DK9r3pCPrMGke9RqIY+AJPDHI5uOl0id8n0IUis5fM5I+0mjPi5gjDTh1F9F/UYsWFG21mQ&#xa;6SNM925Ikw3r9lGFJPoY0+nr2U3sLI/2SfQDyImIv/FK1xClHxQhF6InmI58K72W5wE/HKHH6U&#xa;fgAbqWnpHpxxbPejEHVWmj17LHTyhoCH4S/aePI84jfi9++opGLiMK/E8x7VsrNNbvbov0pIiL&#xa;n2GSHcs7Fpk+oVCt8PFGGMlzLazo2pxMTykUESvhifFjXQdk+iTwsEl0HEjbFxV0y3DK8HkbVU&#xa;2mZ97QydePtc8oFKVLnhyjeiGPU9f7kQxluqJQvZAjKhKaOOmYYyGdPYdOPdYq0wvI0G2xrlgZ&#xa;KSawRL676qaSaUumX1bQySLd1OiikYHwv1I9dgbXkO1zCjXS58GvtU2mXwPZtFZw1kgL6H5+nb&#xa;6koGH+DeQfKDNoLrHpbynULHSRhEvqDyOMv6yQIuwYcrRZKPv7CrUIVnUx29dHqPJHKCLd3d0y&#xa;fYWpeZGn6HWywif+FBTntVxRH0YR2NK6TA9/ExT5M/pahL5Kfy56jkK/VtCj9Jdeo/ZXTAcHTV&#xa;AwMjENDQTyg58QYpYdM8y0ZdvQzi0ps/pCuaxkYtOWaNX+BlcYCPe3osC8YRnwp4SZ/l6Y6Rso&#xa;W9VbBnDCWf0jrpvldeQEByznlnaSWjptoUiKBqPLw/hnuOKAmclbhunETMuBlEUz0x3rn9HTs7&#xa;EFq2jHhoE/6jKKpS1z2sgWbVddaPEy0/6UVYzNGdkZoOvQEoVZM/2WKjanz03pdmHGyLvaC0q9&#xa;g8IywP03WGAUKSmWM+YMB0eInODixx4qWo4W0x9Og17Fbv8BH5owZ9zuMxNzq2xMNABYegWRAH&#xa;ynaJtiu23NYfK/EW4+p/9Z4X5lQ7vu95qw6/+WmwTtvBM/qhdmHSsv0TV4Ssb7kBlX/Do4Yjm/&#xa;M+1anViqhQQHOaTQJg4vr+CDEkvwrSnbOl/QZa5VkB4R0bFjmiH0Q9SKY4t567ZrA5R9+Dfj1t&#xa;2yyGZ8Bju0qZwucQP83cvyI9Y5K4k+Pi+u3mPrZ5qy5Os1VOc9WoW4TxRaNXEzgoEVBON5zTZl&#xa;3sRkbLTTeXPMqica3qLQFt66zBgDcJm8cDyJVdE1PepllQHhLH5W4ZsU2ur2Ke5sJXPEpqzMgj&#xa;DvW0BW5L/tFWKxTFFI7QZ0upxS+dYNBfASeXeiePAupumN1dHrYaLdwkS4G0tzfj/K7a7UVSy2&#xa;lu92KnQDd+Gmckp3zlv2rIhPZLQ0CAqbeHG4wkDCjHEUwHJDvfx5wrcSnB9Z6D4dkRTJaws5S8&#xa;u4l/DGFdUZYVM+I1EEPLQJG1dsaUbXQL0g7r6WqDGSTwd7xMRoP2Tw2vFCVlxv3VhyUWVvPPAw&#xa;/KCqNRDs+qLXgLSRNS1bB2nG7bN+mYgS97tlTryt3FT2CFyjzYJIv4tPfD0y7RC38wDTY63X90&#xa;Xo+jzoCJcZVEhl3H7DiJsJA1YDHPIf8Vp24mPMfcdDu665mYNJxV1taRhUlnq8Hsjf1rLsSudt&#xa;iPII3x+hNh6FTcVNZgnZjqpXj+qMojzOEyIdoctsJqUWJsZdtHWj74uSeFOMlkX1XicPV8vuG3&#xa;6wjPID/LYIn+W3e4Qrokb5QR4WCxrcfqdrW/GMIqKyyjtI1RcXppvX3ygJF63JubujnOVMhKcZ&#xa;F9raSqcPdxWNn4hLC357WrMNUULGxQ9OAkecnoWP+N+NQ4apnyqKSu7P1I4hHDTUW4zVUS8pnT&#xa;YKBhZ7TTQRbvHHGUYHcZu0XcV1fDYOmEICOKMnL0wwhgYjrR8zBNWmvvL7k7dcoD3I4SGCMhRq&#xa;CogHViLAJhdGxEkDvh894CZElYR9m5G6mWfxNYPeXQK8tb2j8zKpXYmwGm6f/AzdqIaTaihRo9&#xa;aIr+1qTfJT4rmMc/jdh5sj0S10M71FvKFhFMM/u6Nb8R9wR0KKoDsScgjpdtBOOBy4Sl/CfeQG&#xa;otB+ZXcipIaSLNgmgy9Q2xWKC6bJDmXPFbrzCdql3JVKhJPKwc4SHSdKSGqNMqhKJTpFlFSl5A&#xa;V6V4cy4m69TxldtlV2t8r+VjmpjCdqMXVarS1RSkzVJpWziQim3qZG/KkICN7e/izdeInSz5Ge&#xa;CkGkVLBjLPwCZVNBxRhLhZTdY5cpV6KHsF/ZfVEpqOESPUxUom8neo4mz0xepu9M1Kl1SbUOVJ&#xa;R3l+i9grT4CJXog+Wx8r3K95XoMfFZ8xw9nmpvv0Q/pNZdph8t0ccF7Z/uKtEFQffnoExUjXpo&#xa;JXqaSI0qv1CiT4vFy2V6JXxQol6tT0L+7b78Nb78qZAaHkuF1foxydPkeaHJi5hSfmksVVPW6b&#xa;OCWH0zfaFEXxDEf5PoiQr53yESXH+PKJUILWUSXmQScnH/kGisxuOzW/D5Y8HnTxZZXODPcqJB&#xa;bcC5N6qN4JhoUpua+SNX6C+u0F8/Qf1VTP91QejvBI1Uif4BmjYkywcvK/90gcLKv6QSjTg+WP&#xa;SqoPaxMrXti/v+Vez79xRwL9Ccv+/p8r7OKlz/czXXC7R3UWkYNBXqKCv7X2L3N4Wyry5DURtL&#xa;9Low5YMtTCWuIWphWUwKt+E6YRE6nGheYlJPDLXRl6OF6yuepza3cOMVbikxIigJDwleIDmhqM&#xa;pV32/VhhLfWPEKvhkitKgtSbXFP8/9q/m0+AdbYRdbdHS+xZWvNrGpzGuzuvnqBbITW1YR6qgQ&#xa;2LGEwG1w2C1lodtAbVWAqVtK3L2E/e0r4qzMeau69aoaukj1gZeDdcE63ubCE0T47XPhA8Gngk&#xa;/xNhc+i++ngp8UkF4KjAefx/5k4J0ufCT4vIBiPgTOYt6FmBcQv60CUpDhJ/wJ2v46HZUoG5b4&#xa;6Ks0co06SZIogBnxx0crA8JlaD81rLEmsu+kRG34I3jE/S5FausFvIbkDU4SN15DAm1+YwLhsE&#xa;ulvv5bwm69RvGN7PdnBU5G4m0H+8Aq9DqdEVvaNshzkQYE3Rbuc6UNrTRWW1VjCRZS9Y2C2Ktk&#xa;uhKxCbTPoR5CNaA34LeRVFTAW1EDW1EBj6IGnkT9G0MFzKEGPYLVx+hGuko30UuoY19FvfoGdr&#xa;9COzhMuxBIrdyFxusYmqYJ6uSPUjc/SXEu0e38TdrL12hfIEx3Bmppf2Ar3RU4TAcC99PBQJIS&#xa;AZ16Agt0KPAIHQ58iI4EnqG7A5eoN/B16g+8TAPBejoePEn3Bh+gk8FZOhUs0nDwRTodfIWSob&#xa;10xq21H0f1RJ0s19rQft7Dd4hai9FejALuaB/fiVobCt0B37sFJo2EOvkurIZpSyjGB7BaQ18J&#xa;fI0Pwhp13B74MCewL8qjgSz3YFTPr/ELfAgYDYEAX+bDGDVCvjv5CN9NzcEZuofvwb6W4NPoAX&#xa;oxtwmSnuM+jLawJXp12oWVAVT4oNtXHIMUIcAI+oquEt9HdLHSP7R7K5X+IVLWCSNfJ4xcncq0&#xa;OQ9YA/xjLpUh0rxOgm4DnsCU/ZyyyCXqzXtcVuCfrIq/fWP4TSE+xcN+/9QH6YS8u9sv8ZgSeB&#xa;KErnDy4qc5NdTxeWoUs1d4MjX0DKc6LvGURx4phdB7N7xGLRKfbWJOc8an1+TLE7rCxkXXOiFG&#xa;BiTF5yPDlx8HjXPUzLZYhR3rueBaSWIH8Mu0jfrx1UOHXHifD00fOj58hw+/y4fv9+H3+/DHff&#xa;izPvx5H37Kh8/68Bd9+JIPf9WHX/Thb/vwd334Bx7kgA8jPtzsw+0+7PDhcT7xf1BLAwQUAAAI&#xa;CADnYYVaX0fWy6cEAAAJCwAAUgAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS&#xa;9BcGlDYWxsZXJGYWN0b3J5JF9jcmVhdGVBcGlDYWxsZXJfY2xvc3VyZTIuY2xhc3OtVd9TG1UU&#xa;/m6SEpJumxColVorWoT8gK6g1doAChHa2AQqoVRabbxsbsLCZjez2TCTZ2ec8Q/xHbUi0wdfnf&#xa;FvchzP3V3SAIGi04fs3j33nO/8+s7JX/+8+APALEyGgmbV1U1u2+0619SqLUTD4KZQeaVimU3V&#xa;MOrqfEPPccMQ9hLXHMtuj5Y1W3BHdORlzbCaLVtMh8EYBmu2Ze22VYKpqTnvJowgw4Rl11TNqo&#xa;gt3mqqvpbdMh29LtR7whQ2gVY6FhcYrh53fcuzYhg+NQaG6f+eUhgRhtgxSIabycI23+Vqy9EN&#xa;tcgb2ZT37aa2srktNCer4CIUhkt1viPKvKGXNTKm0AvdZVgVVWELUxNZhvho0+GOruUM3mzmza&#xa;rFkC70LI2oGuRBt0y1o0v24XKZEIo5BvaEoW9GN3VnjmEueTK2HpLeUaXWGcbPBZBaVzCEN6II&#xa;4aqCy4hFEMAwQ8jZ0psMy6+VT5Tt5bLVcoSdN6loFClD4mRMDBfL0r33STWpWDm3Cbe7Uyo5tm&#xa;7Wsq/uKMPTV9rNnKbQDTTXG/1Kzx6EcZMhWBMU/1CyJ8/ex1gUoxinBK2GMLnejxQVXvKtH5kg&#xa;TTQYJnsxabfeMFo13VR376h5s9LOm1TSKpdObzFENi3LaTo2bzD80J25bu5aO0ItCmfLqtznZs&#xa;UQzdGCZe20Gtkz8z9iuNZuiB7q+dRJA9m1ku4ISvYDTEWhYjrWhw8pYU+BYeNskp4M5dxdV3Ab&#xa;Hyeohp+QO5rjB6J9lGw+EkO0wduGxStFWbDYMWSG64czRhU1m1XLrr9cbtl+jMhGBRi+T77eUf&#xa;m/OX+eINbM01oi6hWP7rDBUZKV3GVFreTuEqLVS+zsZnDnSu624y7CWGLoJxjfePAItT0zBfeR&#xa;j+IevmSYOus/oqTZesNZaDtCasxXeINoHEaBtq9cgl0xZnrQ5LSoFSxjJYoiHiqIY0Dus1WG5H&#xa;k3chhrDMphht4+n02eSDJ1/hWvYB2Po3iErz3gTqgKnmBRXjwlEsreeLPIkEr2GKaeY8tw42zF&#xa;MMrEf8PVVsDxLIrvsElrJkehy4GwiBvr3Nb5piHW5EPOgG6K5VZ9U9i+JFLSayZ3iJjEl1Wvfe&#xa;t6U6fLedO0JKWI4tQ3Ype2Q+z07ZS8SZPiJivoOrZoSn4Tmb0YKe2S1bI1saRL7fjC4eLyrpuY&#xa;ouaFiM99CMYD8t8JiEdlV+n9IxIYpNnro/shXKFnhb4eIogL9B5KZyZ+x5uTd0PDoXT5N1wbDj&#xa;3+2d2ogp5pQgVZv4Xrcs3S6W3coDt5eodOAfck/QVJOoJ3SSLRV8hOzvtA+jmu7SOZIC8vcAfY&#xa;k0sAVT8coOy6GfGUO24G8CnuuvcDyGKGLGqu3Xsky5CToOskS29pF3HBFzxw1gUY6QBGOoCRY4&#xa;Bbfiizrm0OY34GY/Ql9fv9DF5iK57cx+6yj4fwBRb9+i4QjqzOeHofDxKBnwjoAF/t/YJSIfMn&#xa;YlJ6gI2Nwq8oZfbxjQevuwEGLv+NwTAexRm+xTMfL+7HEzqAtufmFMI2PaMkDbjxDGDHlUZxCY&#xa;abXRh1eifo9BH9JjDpvufw2b9QSwMEFAAACAgA52GFWoZPnd93BQAA8wwAAHMAAABjb20vYmFy&#xa;cnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vQnJhbmNoR2VuZXJhdG9yRmFjdG9yeSRfY3JlYX&#xa;RlR2VuZXJhdGVCcmFuY2hlc19jbG9zdXJlMSRfY2xvc3VyZTIkX2Nsb3N1cmU0LmNsYXNzvVZb&#xa;dxNVFP5Om2bSMKUl5WIQsNZIk5YyFFGxhUpbSommgARaC2qcTk7SoZOZMDOpBC/gDeWH+F5vhV&#xa;UXvrqWv8nlcp+ZSQjNCPVBHnL2Pufsvc+3r5M//978HcBp3GeoaFZFWVZtu15RNaVkc141VJMr&#xa;arFomY5iGBVl2lZNbWWOm9xWXcs+p2q01lMFzeaqy4Nz7ktxp6AZllOz+ViqwR1vcickMIb+sm&#xa;1Za3WF3ikrM/6NhE6GI5ZdVjSryFfUmqMEUnbNdPUKVxrvFJsaXQwHw7Ed9XUZlv437yTEGAae&#xa;JcWgPYf4StjB0N3ctvAnGKJFa0Y1DIbD6dwNdU31w35x+QbX3IlM+5GMXvQJNV01rDLDvlxrui&#xa;7zEre5qfEJho6azsA4Q1/KcVVX12YM1XGyZsliGM6F5pKXDHpDt0ylKUuGpEKBLMzPkLVr9PIp&#xa;3dTdSQYjBHDISTi8/3acWWAY2tZzmQUZ+3EgjggOykigvxsdeEnGbp97WcYen3uFIeKu6A6DlX&#xa;uuPUYB3Vmwai63syblhdxjSLQ7wrCjIPD5W4Y9oZGRMMzQWeYksDsdWi1HMBrHCI5SGou6U7Uc&#xa;HsOxThovYBgNK4K1StWolXVTWTupZM1iPWsS1JIq3nqNSnfZslzHtdUqw73WjOjmmrXKlXnurl&#xa;jF86pZNLiTylnWaq3amqa8a+tmeeLfFK/UqzxEPJtpVxBdk9ddTj6+jjfiOIE3e6M4SQXqC8gY&#xa;R1+C/KRQDj11cvmPZMlvCaepXbZGUcLb1E3pTAxTVDSa6lC0M8/o1tlbGq+KTiJ4MziboGjPUg&#xa;oq3HHUMqVgjvJLabtkW1Vuu/UtBh9rh+Y0i3cSVMLvPoHV90LCPFmeupQdmLVtyx4fiOEiA2J4&#xa;Tzxxvd3a9fZo+z2Uj2MSVxhkLgzNN4BTJ06EdWJrec41DIWBH8f7CXRiiUKqUyC7KQpng1l2oG&#xa;GF6st0SpZdefxZoSx2kehVmmkRohTMfenwgMcpNLvoM5Yisbw3+Ki2VG+gMSRJqRVq84rsx0gh&#xa;EOt/wrYvIKMIHscZlBjGnlZQec3Wq+503eVCYqqoVqmDJKww9IjR2YJmJLSKwvHJuIHVOHQYMv&#xa;Zin5hhJkN6u3NcAnWs3PDQ/wqcTrc5mdn+h0GGDSeOm3B9w02oMtagiYtPGOIiC/4YEAUY0seh&#xa;E4Ph0NMFJXxKnW540jI+x+04PsMXVBszBF0MVEtTjQXV1tVlg18RC0NvTjf5hVplmdvBSfKyn7&#xa;IF3dHpYMo0LVEwNPUpV1Q72uq8Wg1k5axJpeg5yOm6d9YUE53K3MdFruatmq3xc7qQ7ptuzEn/&#xa;2sEYJSxCYyCKrr4O8WUCiO4O6B6PxkVmid7HC0hCtC2jTnyR1ru0u0tt00302PDIkQc4NDoeTU&#xa;aHC79iIBldTEbGpaQkdoNJaTHZNR5LxsQulYwt/ugN+y9pnaTXAQWv4rD4AhA3hDTdCS5DXIfH&#xa;CWydHifQRTxO4OsiSfrzEaC5Q+iE/NzwLxjYgLKJU8AibQZp8xsmlyKPcGapkw5S3u05YBM5IN&#xa;/1CBeWOhOX8kuRxOX8A1zdxDVgnUx14Cta457ZEnpQ9kDv9Z9pgp7DdQ80wwcYpTsB5rC3p4AF&#xa;YNabLsv+eaD9Nf2idPKhd/9RqP7gtvUL+DjQHwn0e1rd3WqkJ9RIbxNEiqiQiw6zDahbtaPt2n&#xa;0RLEML8jFN2iJQQ8MbKCc6fiBfHqKy/hP9vxn5A73i9CFqS7mfYY1s4JZv/htaaZLs/Av9Em7S&#xa;/8o6bgf2+gKXIg9xZ90LfATf0ro/qMI4dhEy4dUu792dRO95UjJx33nplPA90UE6e4t2Yzju0e&#xa;mAng/oIo7/A1BLAwQUAAAICADnYYVaZE8ZJc4FAAA+DQAAbAAAAGNvbS9iYXJyeW1hYy9mcmVl&#xa;cGxhbmUvYWRkb25zL2xsbS9EaWFsb2dIZWxwZXJDbGFzcyRfY3JlYXRlUHJvZ3Jlc3NEaWFsb2&#xa;dfY2xvc3VyZTMkX2Nsb3N1cmU4JF9jbG9zdXJlOS5jbGFzc71W6VcTVxT/PQiZIY4QBhew1m5R&#xa;Q1BTaxcVtQUUjQ1oCYVGremQvISRyUycmaB0UbvZWrvv/0C/041y6Gm/9pz+TT09vW9miFFGy4&#xa;fW+fDWe++7y+/eO3/+vfw7gMP4lqFctKrpac2256taMV22Oa8ZmsnTWqlkmU7aMKrpo7pmWJUT&#xa;3Khxe9jQHCdRKNpcc/lp26rY3HF8gkLRsJy6zfclVlb7G6sDEhhDd8W2rLn5ND1QSQ/7NxJaGX&#xa;ZZdiVdtEp8Rqs76YDKrpuuXuXp49zkNr1WanC0MfSsUmqPz8Yw/t9bJEFm2HZvGoZz/6crJaxj&#xa;aG9sm9YHGKIla1gzDIYdyewFbU7zPXxq+gIvugN9q48UdCLOIFXpRa3CGTZnm0Mzzsvc5maRDz&#xa;DEE46ruXrR0zZjli2GVDY0XLxskGzdMtMNWuKXCgWSMDrMwM6Qood0U3ePMBwJUTTkJFyrvkmG&#xa;nWsS0DepoAdbYojgAQUqutvRggcZIu6M7jDMZO8P+skPHQWr7nI7Y5I7yQYGdbW2DOsKQjF/S7&#xa;6/k0JCQujOL7sydjBsDHWPhCRDa4WTgA3J0OCn0B9DH3YxtCT7ZOxppWIAht1hYZ2r1ox6RTfT&#xa;c/vTGbM0nzHJirImntlLIJy2LNdxba3GcL05Iro5Z83y9Ch3Z6zSCc0sGdxJZC1rtl5rDlPOtX&#xa;WzMnA3xon5Gg8hz/StZhD4z+kuJ/P24ckYnsBTnVE8Te4qao7775kRiFawHwdUcsdBBtnQTT5F&#xa;tsk4xNB1i3bIsgyumRIIyNKcZtT5qTLDpuSZZoEBEUl8DoMxPIshhvWXSFrOnTf4lGWXZBylR3&#xa;hJd7Vpg8sYofyoajY5W8YJhk5PlnbJJb873HUknJTRQwaJFGLoazbIA+ZAhr7QgI9iTKUAnyLm&#xa;smUSeF4gXRriR+hIQo4hlhscyxVyx8YzIzJeJDQSiAjlBHyX6ur21Q+GPjaFl1TKsjxD2+nsYG&#xa;ZMxlkVrWJ/crWEtSTx3Ww6L2wqMOy9V/fIFW295g7Nu1xQDJa0GuFXgkbY9dN4VGA3kTx7V3jU&#xa;Xd1IExW9WUQphmlQ9soiCQdJgIyKSJ8Wip2PRIabyftVVu5QMNRPFzCrUvmj5tAiYBOjmI6ulP&#xa;3b60OQAgxbV+ouJbbplC27eqsJD8Qotl3UyxMkKOe1BspVzTOBoZcENhelxhVJlYkhIOu+7V2f&#xa;QEEdczFsxyXCpoB4k9j+0OQNf0jBPF4VUXpNwQZsFAX/DYbkWluWhKsMyoqqfsM7HIb8NfdABW&#xa;/irRiu4W1fcENVBe/CFRfXKSzCnX59FKkdUuBCSyn9ldybUMIHhEzDo1bwIW7EcBMfUR0YJtVF&#xa;E7KKmjGp2booQRNioMKTpbo3Vq9Oczs46R33s2lSd3Q6GDRNS0SesEyxIhAUZwl+Aa2SMc0A0p&#xa;yuO4+ZAq4ELF8vUWWsul3kI7qgjg+tNBD/2sFeCliEEjuK1niLaNlAPCYiSfMNbMJmyrYo3feg&#xa;l8ZPaHeaqksbzRtS/bt+wdbdByO9kVThZ2zrjUx973W2T2lMkVSQtIfwsGh3tHoEj9KdWD1Gqx&#xa;ZvJd5rpVP6Pwqk/4p27+5qKq78hu35VnVnLh9J/YRti9i9jAEgl29TD+fy0cgShnN5ST2Wy8v+&#xa;Oh5Vj9Motfo7Wc3Q2K4+L9O3THoTazymjtO4Tp1QJ5ZxBhDTy2SrsoxXiGAJ5WVUgQVRZPAZjR&#xa;0QBcdABhdxHrZn3CZfxYZxV2F6xjFYqNGdMKTf2wPrm3VfaPhH8S8DEZ8HXr7o3XcSsy8kQbOg&#xa;i6bYIuw7uaOrueMROHADXw4Rt1B0Z2oRl9WW7yCnlvD6wg+4ku3/A53idAnv5LM/4kr/It7zxX&#xa;9BI4Wg4y90S7hGv63v40YgLx6YRN7+eMEzPIIvadxCLmqnOYYu0kxY1eW920HzVx6VQquvPZdK&#xa;+MZDRxueoV0aj3tzNpgng/lcMM9A/wdQSwMEFAAACAgA52GFWudeFQ5IBAAANwkAAFgAAABjb2&#xa;0vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vRGlhbG9nSGVscGVyQ2xhc3MkX3Nob3dD&#xa;b21wYXJpc29uRGlhbG9nX2Nsb3N1cmUxLmNsYXNzrVTdUxtVFP/dkLJhu4UUKC2Vfqix5IN2xf&#xa;pRpbRCSks0FCWILVXjzeYmbNnszexu4uTFR2f8F3x3fKU6gwwPvjrj3+Q4nv1oimZl0PHlfpx7&#xa;Pn7n3HN+v/1x+AuARTQZNgzZ0mvccXotbugNR4i2xW2h83pd2q5uWS39nskt2VwVVls4RYu7bq&#xa;bq7sivirLV5o7pSjtUqBqWdDuOmFfAGCaajpTdnk7OmnoxfFEwxDAnnaZuyLrY4R1Xj7Scju2Z&#xa;LaE/ELZwuCfqfYtTDBcGANwIzRguH4+E4eZ/SE/BCMNknGOGr7Plp7zLw7TWa0+F4S38S0nFc0&#xa;y7GUk6nmnpZdON08gNijSchsaQzrge90wjgFuyG5IhX46tq2hYFN6Utt7XXWBQqlXysFZkYNsM&#xa;w7dN2/TuMMyeKLncloZxTKhIYpIh6e2YLsNm+f/vIwI6WpUdTzglm/K1DcEwPoiH4XTVBxFeKZ&#xa;26LHLLYrgWk04uzj5JxW2lcGmIhgIM1+Mq2W21rU7TtPXuLb1k13slm3A1uEEtepVhpCal53oO&#xa;bzN8czSsaXflrtDXhLcj66vcrlvCzZSl3O20/7EnBg03e20Ro17KDRr4qVdMT1CrvIJXVbyMzN&#xa;gwXqOyhAoaZjEzTnlmqQ1Md6XV9nop5Mcpb5IksrkUrlNFDO5SKc/FVXBbg47Xx5EAzdfZF+/L&#xa;UlqC2wpukucutzpivcEwld0+ijJSInRv4W0Vb+IdCmpSqMls7NfMlKP6U21ttyGd1guOICcvYU&#xa;YlILeJbzJN4VWCqaCa8aC/GKbJ61Ei6j+R6/Tfwyl4nyFFbiLjib9ACs00LKOoYgn3GOaPY7KK&#xa;4Zhtb7nnCV9jqc7b1C8K7jOc8aftCMZCbJvGo9awipKKB/hAwyjGRij3Mn3cSUdfwUMG7XmGIX&#xa;EsZgeSzJ2cSzR8hI9VrGMjdNyHqmETd/2HTxhU/2/CpmfIZWO6NnY+iN6PV1TwmPraCrQ1PMEj&#xa;Fdv4jLq3SNB9rpAGt7aIW3jNEpv+QtWnHjF213g7uo+VTVs87LRqwokk0xvhF26ZrkmCJduWfl&#xa;sRi1GKJduOyEvQdWzF9smKZjHERalWZMcxxH3T95Refs4K4bOLefqwJI3aMBJp1f9BIP0t0jhL&#xa;A3mK5MSrtH5Bt3cxBJ+PlHxh7mecexYwU5XWq4F4GFM479MVnS5gmt7800U6JehMYxG5eUJ7gv&#xa;aZwiFywCHm/OUN4DsoyR+QHDrArT16H8KXAYTEeZoBHjjzXV4KQk6FLvohZwidH9IP9B69+YEy&#xa;QWCyy7N9LO714WoRtNC2FnleoLyTuIO7EcxlsvZjzOb3sTKe+B6p/AE+3PsRa+XCrxjzpQeoPC&#xa;7/hLXCPrZC9z5imoDR3zGhYD3N8CkeRf7SATogeYDP9wLMSRi0qlE5UlTxeiBVcQaCTgkoaNB+&#xa;kUpxjW6XcSXYC9F+A1f+BFBLAwQUAAAICADnYYVaWbBFZ5MNAAC4HgAANwAAAGNvbS9iYXJyeW&#xa;1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9Ob2RlSGVscGVyQ2xhc3MuY2xhc3O1WQl8HFd5/789&#xa;tKPV6vD43NhO1rESXZY3PoIVyYktCVtRkOzYq1jIcS1Gu7PSJKMZMTsrWfSiFNNCSw+uNmmBhg&#xa;JuSyE2AVvdFJK2FFpomzald+l904telIaS/t/MrLSSd1WZ3y8/Sfu9fe973/vu73tPn/9G6dMA&#xa;7hevFjiQtWfTU5rjLM5q2XTe0fU5U7P0tJbL2VYhbZqz6VN2Tn9QN+d0Z9DUCoUYhEDLY9q8li&#xa;bmdPr01GN61o0hLLBj2rHt+UV/fsgbl1ejAtvWENrvY5NYa8HVXCPrzQ5beVugc8R2ptNZbpjR&#xa;ioV0QNfR8yapGbaVXsbtE4hNTpLC6KCAOC9QP6u7mrcssH2kkqPR8gL31B01LMN9QCDc3nFOYF&#xa;cZ0XU0q5C3ndn0kG7pjubqub4EmtAcRwSbBDa3TutuxmN3dOWcZHtHjZMS2IwtcYSwNYEEGus5&#xa;2i4QcWcMbjs0csvaJ+u75jXTyJGzfis3pLuDtmVRKXpOYpLo3e0ja43T13HzFJkoGG/QFewO0x&#xa;cg0F1N4/Ozc2Zx2rDS8z3pYSu3OGy5upPXsnoMKap6yrbdAlU2J/CWymMNa95+XJdqmLFzD2pW&#xa;ztQLrSO2/Xhxrq8CLeM6hjXdV2vj2OKcXgV9uOPmDYOaaWYMV6e+78TeOPagtbkOd9HOPkICbd&#xa;ilUs52gU0ru6U407oTQye9iGot6qfzdNT2VUcESCS9D91xdGE/w6aqexYt15jV05msY8y5A4uu&#xa;LjH6c9qcK8+4R6CZ9p7THP2U7Z54fVEzBdqqWKuK/c4ncBCH4jiAw/TBlfUTl7L6nAyIGF4l0P&#xa;WwqWsFPVXQZZik9Eta1jUXU+6CnbKkc6RcOxVwsF9Bj4ImeoGMA4EjlXz4nnaz5qu4UQJ9OKrS&#xa;fe5fxdfYjGMvaFMm/eSYQJQx0+8q6K8u73BVum0YVBktzFFbK0PrrJ7XHd2SHniSS9Wc/ZwM2A&#xa;fjGMKwQGPWjw/bKZwukofXCDSQnYcdmyHlLiYwKh0jjFMCr73laGydXC8WJ7OmXSg6+oEYHhZ4&#xa;YEOWHqkqayDT2TjOIENXzRtWrt80FTwi0FeNbiWVQZ+L6tZrw7jKzPZagcSKooYtBedVRF9JpR&#xa;yM4VviuCjFiTDHFBS8TqBnY9FQXZApFXXIeoJ4Lu5FWAK6HzeM61NjM7oXDH586LkgKojLkZvK&#xa;lhndnwoCiUKmtNSyYlJTurug61bKndFnGUEzAmpw2JCjU2BnbEazEnjMP/JxgfM8ktTlCbNF0z&#xa;XmTH2FXKGS3hqmllnQLakticFPo5CyLUa0bckAnmX1oisLbGmvqhIbczIIXi8Qz3rsjRgFYt/V&#xa;/mhNnRZdw0xLNG4vwJVSFBlDZd6CEqNWKydRyfeBAB5cW3tXXJnsMlkPLithwNcBiyi13W9p5m&#xa;LBKIzZ8qj+wgDLcZZqNms6hsfxqPb/1JWbZ2p7F9uBtvXS+5BPbJilMYbvlMVcv8TE8l0qYjJg&#xa;WtaeGsObBVr7XVefZaq2pmUW9hwrkFV+lzrrTSl4iwAUfK9ARzUjPVolJXuJ4W1xvBHf5yXzvK&#xa;3g7RvICkPr5fQ2/KBKPn6IqcYonCDbiwreIbC3fY3Oa2x+l4p6vFsg1N6h4EfIVlaTjlc1WbOy&#xa;PYEnVcTxYwJ3nrJX1MIMopV1xY5sWUfvJcEFzWGOer+KBsnk9rVqGSgaZk7W3A9Id7+pstWoYx&#xa;+UdexDTCCDXkwbBdtKtSu4QkE64gp+mt2ENjenWzkFH1HZzfHkR76J7FjTzcup8VAMH4vjaS81&#xa;6lp2RsG1ldS44u+3kOOfUdGITwgoru0rSMF1lX7TLr3XMWYV/JyKZvl170n2vpor89CyIQrelm&#xa;Ub0AQ/T1X0xru7u6mWT5OGHCp4ngdkZ6h5BrqCX1TRIuMhyjN1xscvq9gkT0j6Ohxj0LAgm4a1&#xa;LL+CX1GhyhQenTUsWRK+oLJ9zr5Caj4cw29suAHzwuw343gBv0V5Zf1V8NsqtsjK2ZMpZrN6oZ&#xa;AvmszNWWY3qb1aUq7y5d8VGFgv17hsgWdk/0wDpF+t5zUWEdkWj5WvKZrf/P0+vZbNOEuG9Yg1&#xa;ZV9K4A/xZBx/gD/yok+2Cl8SuLCxFmQDabOGn/2piq34M97D0gr+gmBSwV8xhzjSXFneNf5G4K&#xa;H2W0zU6+epv1OxDX/PFDBY7qxZoXpTY9p0qm1kZLRXwZd5z2qT5jANmmW5A/aie8q3CK+fjpeZ&#xa;Fwx3Ztk2/8SsfVIzTH+XJLDo+7+rTfM+kMoXLe8uquBf1ty61mf5KzLy/o33EL8oP2w/Zo870l&#xa;0cgcz6Fiqnr/VcZsGnVUgHRHnmf+A/ZSX/L4H8xjzglujXEPO/ZXL+msCx1ZY5Vdagl1ICFaYW&#xa;tILXgs059ryR01cn/JcEJlYTGbSLZs7bQGSyladl9AXah0HPzTdbmCK4Hs3yyVwqk/9fgaMnHI&#xa;eLMlDkYu3YraBQkQ5flvX6FqqrEHQBEeIFWhLgVeTSIm8l5Xw7Kq/TzWuyvUDTilQyA6zuwoLj&#xa;ZOYkRd4r60xbOqnAbVTJqJxjSJzVs0WnYMzr5uJJap6ROeUXSjpjvpz3y0lTOmiQzAd0ruoZ2W&#xa;q2lOf682x3valmT+m+gs5Sz4x7cre1grvlWyoZbFwlV0xsZpP8SjV3Mmt/O74jjpDYxtrEXjl4&#xa;r9m8qmEOXmrEDpGMIyJuI5PyUlzxvtNV9U2lxouP2CV2M9zE7Qm2UPX1PDwl0L7R96yYuJO5vM&#xa;yq/xp2f7UWZsMPZAnRKu6Ki73ibp/wMqsJ0Y4tcqFDYOfND2DeWw+dgUbb5p8/xfJSSHu1x2DY&#xa;9a25mi8TjoluHlXQK1V4W3sNfcl+Oy5f1fz3IRlKVR54qj4lCdy+PmJMHPJCQWInxL3iYFwcFq&#xa;9itt7YvX2jiLzt7N1AW7chrMMs2IOcl/FtMyGdY8jLh5Qx+cHu6ayfhs8ZBYMT/RaToNcDUMWN&#xa;GVfLPs5wCXCbR5i6ThVnp3gv9WcSw2Tfb5DkPS6esYtOVj9pyLWWgfJjnq/CAvYghAhb4jqEW+&#xa;LSl4GWt7JRbyB8k3zNhLysCPk6Sic/ym/3cEeIUO28wb/r9JuuzslPYkfX+DX5xiju52eCO8BW&#xa;MInbOPUAx3WcaSGsx07sIhYpiXnO1nHuC50ldADRJaSXcO8TaFGPqPeVwG3P4/hzneESTgAjXe&#xa;OdEW/0LIbOT97AQ6P7xrtKOC0nzkyoITW07wbGSpgATnXLlQty5WJ5ZdJb6Y0kI+PdSRLK8Us0&#xa;GR1PRr3Dw97h0/7hxvLhwWrEWzX9VWt5NfopRCbCXZmJyL7rcDJLmL9KccLiGD93I7z7ZXwb6m&#xa;KIeL9D5UGEi+I4UQ5ST6BeW/izm01wG1vN+7AdGezgvT7JzTvxdmrrSdyBjyCFJbR62n3A1xoW&#xa;cInwLnwYixwJHMG78AZ8K61zhvA1nAvDxCTOcxQhzllSvIQobcCE6dsg0sNvzUDoA8nIs3jjRM&#xa;STiPb4biBD8S5PhNXvoXzqWzM38P0l/DAgVfseoIQfB291+2vve1/Fvqe475r6kyXyumy/3rpk&#xa;3XiyjppbobCvvPmn5Oaf8Td/VB76LJ72TJmsu4GrJXySc97eEtVCZp6lOWPJ2LjPTrSSnYlIMp&#xa;ap88l+SpJ9LjMRVX9hRSDifUbS+BxpKEllvDMZK+Hzaxbqk/XjyfqkUsKvSxFe8Ji5gRdL+B2u&#xa;xpPx8dqa+L01GkzGl/DHdKZkVHgOH4tcQST8BBaS0WTc884/l1gVonSrf6n+dQn/4IsT96kHMv&#xa;2jpP7PUqaKI67gjt6GZET91xL+HUg2qMeX8NUS/odLuILwFSi9iWTiuSvIekzQ8e+pzf/X11jy&#xa;CrprI3/jJuTjvY010dkarOCLMFltrMJqU7LpuWuoE5fFi+JFHPHgV5hBXhRflhAvhS6ELtD/Ja&#xa;Rb8vM9EgahmEfTS8i+LHajQQag2BLDZe93bWB6sXlcfBWnYziycyCG45HQvR0vM6CUWhshiHrU&#xa;Q/Vi+iLjV0Z2Jw6hB4cxhXuRZVQvoBfvRx+eQT/daQAvYUg04EGxBQ+JVoyIAV6jTZwRlzEm3o&#xa;FHxBcxLr6GiVAI50NpXAhdxOtCT2HKi/83y6wcekpEvPiXo6iQ+VWOYkKR2Zmjeo7C3ijuxb8c&#xa;NXjx74a6RYJ5og6fEV8SjZzjLnFGNHGkiD2iRzRzVC+OsU1q4ShObraLTWxoG8hHjzdqlFlEbA&#xa;1qwgXSihJu6+x6XmzZ9zwud/MvGRFLYruoqAuHPaytZc45CjjnKOCco4BzjjzOK+tHS0T+r83P&#xa;XdSiX4naOq+LnWroQ1A6l8QdVz8u9ox0fQ7NcnZJtE2MPCP2dF0XnVc9No55RSjU9HVsjom9nG&#xa;B/FEiRJjXJy/bOT2DHxGcRuTreOcECx+ImZ1b2k5nhmNjvMdZEVsmY6OLfPg8jLe4JCKoBg3Wd&#xa;XaRxzfsfnNwj/1cY7GmpFwfEwUCgFu94WW7EkaveKCz6+XknzXeG+D0sqRcJ7yN8mrCX8AXCPm&#xa;yiA9HCNOQgZMbajrv57XYWDgl7AzgQwJEAngvgowHUAvimAP5AAN8ZwB8N4E8E8GcD+PEA3ghg&#xa;KYC/FMDPBvBXA/hrAfxiAP8kgH+LO/4PUEsDBBQAAAgIAOdhhVojx9ArgwQAAKoKAABcAAAAY2&#xa;9tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0FwaUNhbGxlckZhY3RvcnkkX2NyZWF0&#xa;ZUFwaUNhbGxlcl9jbG9zdXJlMSRfY2xvc3VyZTQuY2xhc3O1VW1TG1UUfm4SCEm3JAawYmutmp&#xa;YkQFd8rU1BIRaaGgolSFt8iZvNTdiy2Rt3N5nJH3DGb/4Jv6NVZPrBr874mxzHc3eXEEvoZMb6&#xa;ZffuPec85+05Z//8++nvABZhMOzooqlWNdvuNjVdrduct0zN4qpWqwnLUU2zqS63jIJmmtxe1X&#xa;RX2N10Rbe55vLefUU3hdO2+UL6+PReFIxhomEL0emqBNhQC74kijDDnLAbqi5qfE9rO2qgZbct&#xa;12hydY1b3Cb4Ws9ihOHCs0Fc960YSi8ygSjGGKbPFDPEehkyjNaElDOsZUqPtY7m51l2bcNq5M&#xa;+6abuGqa5rrXy2T2Oj+pjrbl6BgvMMkZZwXEq51F++LV7nNrd0nmdIph1Xcw29YGqOU7TqgiFX&#xa;GlhSXjcJ2BCW2tMl+2ilQgjrBQa2S2ncMizDXWJYypwOacDN4KiyOwwzQwFkdxRM4UIcEbyiII&#xa;FkDCG8Smm7e4bD8PCFNvSEkZT3eEW0XW4XLSofxcyQOh0dw7mKDMT/ZLgxXE6DgKYGViqKNxnC&#xa;DU7Yk5mBJEjjahxv4RrF53B3i3/b5o67aYsWt93uGDJhml0wzA/qeKfZMtsNw1I7N9SiVesWLU&#xa;q4rkm3s8TeqhCu49pai+G7/sQMqyP2ubrO3T1Ru6NZNZM76ZIQ++3WmUw+bbjdbfEB6sXsaQPZ&#xa;prLhckp3HtfjmIOaGMXbxEZfgeHucGwcphUK3sG7KSoaDW14n9PSGOloZpucRHRvgC8dk5pKYz&#xa;l1YTdPtlB+DIqseIjhh8z/xc3/kNitFHFhkYaaKLXpLY6JNB3L3oagvmje5NNWI7L1E7Inkgvl&#xa;WeQoVhjGCCYwnvgXU30zBZ/idhwFrDIsPG+hl3XbaLkrXZdLjeWa1iJORnGH4bzcPH0xzg7o+V&#xa;lRK7iLz+IooqTgJaTkErnHkBl2DUaxyaAcZ+gv0cXMqSSzw+9VBVsox3Ef2z5wL1QFO1iWggcM&#xa;cdkbf7AYspkBkzFwBhkuP18xii9odkxPW8FX2I3jS3xNBC9Q6HLRCWL6jmYbWtXk2/LBkCgZFr&#xa;/Xbla5HdxMb/kt2zEcgy6WLUtIGhG1qVfEKH2f/lyBrlK0aEK8BDmJE7ctyWaadz8uSrUs2rbO&#xa;Vw2pnVw53jy+2MECNSxC1B1FOBmSvwEgGZedpPf3mMAkzdwoyafwMj2/oa9NhDFC78nc7NxvmJ&#xa;6/GZmO5Cq/4uJ05MFP3krU6JkjVJD9Jbwm9ySdLuN1ksnTFTqFvJP0F6ZbBW8E6Ov0Lec8kfsF&#xa;Fw8xMzv3FO8DB3L0UQ2CAa56Tq74qj0nCXwQOEngQ88J/TkIOuRB5wPoWE6CLvmgrA8o1gOK9Y&#xa;BiAZAeuP7Is/mYAvBBr9GX1BsL4j3BVPz7ALPPPhnBJ1gO8l0hHFmLmdwh1lKhHwnoCOsHP2Oj&#xa;NPsHVYFuj/D5o9ITbMwe4qEPX/MCC43/hYko7icZHmE3wEsG8USOUDnwcomA0zNFXmL0lr2V/s&#xa;7Ru+5JYxhHwytvFHuBpmRFlnoo3zeR/wdQSwMEFAAACAgA52GFWhxNN1Z0BAAAtAkAAF4AAABj&#xa;b20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vTm9kZUhlbHBlckNsYXNzJF92YWxpZG&#xa;F0ZUFuZEdldENvbm5lY3RlZE5vZGVzX2Nsb3N1cmUxLmNsYXNztVVbVxtVFP5OCAlMpyVcClKx&#xa;VkVIAnTEay2lCsglGi4C0hat8TBzEgYm58TJhLX4A67lD/EdtSKrD766lr/J5XKfmSFFiCx88O&#xa;XMzL5+e5+9v/njr+e/AZiGx/DYVlVrh/v+YZXbVtkXouZxKSzuOErWLc+rWivKEUvCqwl/zuP1&#xa;+nDpgHuuwwMxI51FEcwpKYUdCEfb1Uu2p+oNX0ymwRh6K75SB4cWhaxYc5EmjTaGceVXLJscdn&#xa;mjbsVWfkMGblVYi0IKn+I7TY92hv5zMO5GTgwjV8PDMPmfS02jk2HosvCUPlvc4wc8KnF1Z490&#xa;U7mLIhPXYDK0S/J6m2GgeLYz66IsfCFtMcWQGa4HPHDtEEBBlhVDvtiyW6LsUWRXSatpS/7pUo&#xa;kiLM8xsG2G1ANXusFDhoctYLaQtEaV22IYvVKA3JaJPvQbSGLAxA10dSKBQYZksOtSs7aL/9e4&#xa;UeU3SqoRCL8gqYGEmqHnIj6GayUNJfqk/jhqjnu0B6mA+xURdOC1NloNMEy06vlBteY1Kq60Du&#xa;5ZBekcFiQlLHObRnSYoXNHqaAe+LzG8N3ZdrnyQO0La1kEu8pZ4tLxRH24qNR+o3a2hxuB78rK&#xa;1L85bh7WRAvzQu6ig65pww0Ejd0IRg28iWxXCjmqnmpc8xU1Nzg0MQazh4odZ7jZ8uLTuMvQRi&#xa;4MfdmWQ/0WJg1YoImevGyjN2zfrQWzh4HQFjMOr1Hf0niXwaSBqHFfzH/b4N6Vp2zbxPv4wMB7&#xa;uMfQ/UI/q5QnuEzjPi0CzU1DrJaJOrLbZ8HHRoT+AaYNTIHWI+FSjR1U6Uq0n0Onm0C3Ketl5V&#xa;dfsBI53oFp0GDTkvUOk9NGuLF0SzwcWYZB6tbZjjZVesHPl5PGYpQ7du79R6sjNxMFfGpgCZ8x&#xa;XNcrfSbZWEsGap3exDJWdN9WTWTQrbfzc4bsVfkljQ26slOoETtNZy+gzV2dsEx8gS0Dm3gUBW&#xa;5CNfEEC1pBLGboJkf7wpDLthj4lqvFcPtywzS+ps33QmsT3+CpgRI4sdUcQdf8oWzubXHf5Tue&#xa;2NQHQ1fRlWKlUd0RfiwZXI+mfMutuySYkVLpeSA+o7ui0bD3l3kttjULxF4RsemfR9e81ARGax&#xa;zholI3VMO3xYKrrTOzp4QSqeuYpAtLEjul0JZJaH4FMoa+SXp+jx700jqnSN+Hm3Ta9LWGNrTT&#xa;sy8/Nv4rXpq4nxxM5ku/4NZg8tGPIdM5dOYpKsj7ZQxp+qO3V3CbdPrtVXpLhG86XxtJafzj6E&#xa;uk0bq+seeYoDDPcOsY75zgwxN8dETyBESMCBgIM/VH9s1Mffg4zMQwE1ano46E30BHHO+oidOM&#xa;5LF3OY49G+rvNP2H6antUnl2jE/Oe6cuemeSmMdCXNNsXNNo/hjFnsQPBOMEa0c/Yb049ju6tP&#xa;QEj58Uf8b62DG+jMJX6KRtuvEnetPYzDB8hadxvExcTfIEO0dhzUns0mmQNBFW0w03lBq4jr2w&#xa;a2nsxxZ5+nodb/wNUEsDBBQAAAgIAOdhhVoq2N6UrwgAAFcVAABiAAAAY29tL2JhcnJ5bWFjL2&#xa;ZyZWVwbGFuZS9hZGRvbnMvbGxtL0RpYWxvZ0hlbHBlckNsYXNzJF9zaG93Q29tcGFyaXNvbkRp&#xa;YWxvZ19jbG9zdXJlMiRfY2xvc3VyZTQuY2xhc3PNV4l/HFUd/75kszPZTJLtpC0MxSqStjlaVm&#xa;iBmh6apGm7sG0wGxK3ReJk9+1m2tmZdWY2bbzxQMH7AkHxQkTrVa62phZvqeCJeIviff8HfsTf&#xa;m5lsts2kxs/H+uHz2Z3fe29+9/V+8+i/Zh8GsA3/YLghb5dTk7rjzJT1fKrocF4xdYun9ELBtt&#xa;yUaZZTOwzdtEu7uVnhzqCpu27nhDtlHxq0yxXdMVzbChAm8qbtVh1+RefcapMExtBRcmx7eiZF&#xa;bEupweCNhEaG9bZTSuXtAp/Sq24qxHKqlmeUeWoXt7ije7xQo2hiuHCBKpcFZAwj/3s7JMgMq8&#xa;+Nw9Bcs5YhXrAHddNkWNuVOaBP64HNw5MHeN7b0r3wSIGCVgapzF1XL3GGCzL1zhrhRe5wK8+3&#xa;MMjEd3Smwl0GxeUmUfOC2NO2wIt61fTCty35quvZ5XAXz9tW0SiRmsHiWk6+Sna6nu4Zed8Jaa&#xa;toM/RkIoPBi0KSYVupGi7pIk1MEIc9gwxsH4nYaliGt53hdITRESfRFj5zjrvHGNYtyZTuMQWr&#xa;8KwEYlitoB3JZjTgOQqWBavnKlCDVaeCjmC1VsHyYNWlYEWw6lGwMlitZ4h5UwbF7cbM+axLim&#xa;HbhF31uJO2KBXIagZ1oX2UTBNCnWBLeXM2hoSNQmN+2JNxJXntnAWd9RzDKqXLFVPC1QwrIr0v&#xa;4fkMjSVO0pZ3RVbMFmxNoA/bGBq6umW8oJE6GRg2RMmeJmHVkmGlpjen0lZhJm2RyUVdiBmgkp&#xa;i0bc/1HL3CcHN9wA1r2j7IU3u4N2UXdutWweRuZ8a2D1Yr9VkQGLRlMUJRgRHo6e6FBKJpZA2P&#xa;k3k7MJTAIHa2x7GLfJvXXe8/t5OQtYI0rlHJHddSZSZk7CEGWyed7TKGGRKOyKA87zdNGS+isg&#xa;1kM1zTdU6bFj2JjE4WoypF4/ozkiUgkDAumsWUVzZJoxy1ka2pcLOfobtr/0J++yOk+jX3kgQ2&#xa;40bR7KgYKIKG5bkyXkpZ5RPoh7zUgO0UuJPRZyjPJUwyNO0dHhndLaNAZJRg1zk21Y1H7XBNvQ&#xa;P8Qoq2rYiSSkU6xXD5uRI9m3eMijcw43GB0V/QK5R0Eg6IHuxwutL2iITrjLI3FFv1DDNFWCTT&#xa;RDmBg7BIfVOf5BS6ikj4Boabus5vizhLlUWi7apoBGVog1GQMU0mepT1xH7SlnGYlKakLlNkXk&#xa;4XGC8Ynj5pchmvZFg2z23Atk2uWxJeTSkxrZtVPlxkWNm1r15kiEQyX4ubEngNXld3D6ZJiIw3&#xa;ELnhDpUr3oyMm4VyrSp15jdTUkSVzz5RLbeKankLA2S8jbSltOinVvaO6AsgvYgP3qWiCe+m3B&#xa;4c2js6NCLjvSriIk3kvHDEgH1Yxu0qJOGnuOknpIw7aTCq5epO0z40l6kfJD1G0rt2j8r4kEp6&#xa;TclYRXUs7liGqxem6hIHjY/hbhXN+Dhxzw5fL+rgEyoSQsvi+Uyj2upKCZ9iaCUPj9ZuFAWfFs&#xa;08hs8w3PlMHR6ChvO5BI7g8+S8CrmGqvA+htv+vwWYiRijF6vKB1S04EFRlZQzHRGNRsJxuhEo&#xa;GHvmJs8zb9uw2TJcPCeWmqzlFm2nPD+ZbwkaaX9tMG2nXfaM2VSc7DhjPFW76ptcxnDFmNG5+P&#xa;02jybq9cuiXr9C0wvxHayfc5vFQTjqKrU1TbsJ6tht5IROoZs/9dLtrPuhYNBImXq31l6JgVtw&#xa;CdA6zvBNgKDgW3g0gU14jLJaFGcd295Ic6IFKfgOvita/PcUXIALxRT4A4aupU7jEn4YGjw/y2&#xa;+Lus+WPN4r+BF+nMAT+EnAuKaqgp/htHjxc0od4c5gIhJXd8RIEzk80efUuREl/Er0SB9bwVN4&#xa;MoFf4zd1H1k0ZcYGyQwxr9p53RyjKhKXyqh4UCQoxPmDVC7hvj1jWHxvtTzJnfBEGwmu6THDNe&#xa;ig37JskRVUr2Ru2rLCMvXTecgSUqkQAh3J7KxddfJ8pyE4JQfmxsfgtYvLKXgxmn7iaE42iO8B&#xa;gOCyEKoh7Ajh8hCuCOFKHyZEFhC8BRouomRXiN8qXEzP39PuKbptlxGc6uldfxzP3tCX0BI9Ew&#xa;/hEi0xrsX6WrQWsbtUaxnXmvoUTRG7NZoyrsX7WrVWsVuntY5rUl+b1iZ23VrbuCb3tWvtYter&#xa;tY9rzX1JLSl2G7Tk+H3+bP0HehbpsgBKuAwpMXDT6nlkL/NXV/iWi5WwudFfCatj/krY3eSvhO&#xa;VxfyVsl/yVsF72V8L+ZuJIn8SBtex2WhNftrpHOoVNuUb1qmwudhKbczF/2/MgLjmG7bPIAOpe&#xa;9bpZjAHZplN4MaHuI1T1huxxTGRzTaqezcXV/CwMQjgBexZVYLwnmQjYHhK4MwLvFYRHbC8ltt&#xa;mcpL4qm5NjJ/D6bC4ZV99ITyl8OYtbgFm8FbgDsvr2e5EMXzTO4j0kI5eUhcxksxB625zQO4TQ&#xa;0JQPCJl3qXfN4iOC0z2CaF7PTwYkJ3Ek19NzDJ8l7mvov47+3fTvpf+G4zg6i4eAo+S9RvyRnh&#xa;vR8DTuRoMkfpsQ8+EJ+rGnhSfD46b5Y7H9ExGqfqhS5L+NuBVX4TH6wBJBXxm4fy7otDrmB53h&#xa;C6Rzg5+Svf4eaK0Px9Fa3ijBy5DFn+kfp5OT/vsvYmvIZG3IRA7deDa9HEl/KpJ+zZLpH8aXIo&#xa;xY5xvx1aUa8bVIJbqXrMTXI+l7l0z/jchIbPjvIqHUlOgkKPDiPewYvnk2dXwhdTKGR3A67E8D&#xa;RC06wTpK2m+rDfeQLSfw/aP34/FM7yNoF6cn8NNc5gE8Thb+ImAvUpfuvbZ/okPCE0mGX+LJkF&#xa;8yNImK8LdH/b4Tw1/oeRFlfDPBBPUZIa+F4BGCvyP4Vx+rGW34m/hSoj7zd4KTZMFu2r0Q/T4c&#xa;CSEP4cvg+PBN4f6dIXxfCN8fvv9wuP9oCO8N4f1w/g1QSwMEFAAACAgA52GFWk/igp6pBAAADQ&#xa;sAAFIAAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vQXBpQ2FsbGVyRmFjdG9y&#xa;eSRfY3JlYXRlQXBpQ2FsbGVyX2Nsb3N1cmUzLmNsYXNzrVXfUxtVFP5ukhKSbiEEaqXWihYhP6&#xa;Ar1WptAIUIbWwClVAqrTbebG7CwmY3s9kwk2dnnPEP8R21ItMHX53xb3Icz91d0gCBotOH7N49&#xa;95zv/PrOyV//vPgDwBxMhrxm1dUyt+12nWtq1RaiYXBTqLxSscymahh1daGhZ7lhCHuZa45lt8&#xa;dLmi24IzrykmZYzZYtPgyDMQzXbMvabasEU1Oz3k0YQYYpy66pmlURW7zVVH0tu2U6el2o94Qp&#xa;bAKtdCwuMFw57vqmZ8UwemoMDLf+e0phRBgGj0Ey3Ejkt/kuV1uObqgF3sgkvW83tdXyttCcjI&#xa;KLUBgu1fmOKPGGXtLImELPd5dhTVSFLUxNZBhi402HO7qWNXizmTOrFkMq37M0omqQB90y1Y4u&#xa;2YdLJUIoZBnYE4a+Wd3UnXmG+cTJ2HpIekeV3GCYPBdAckPBCN6IIoQrCgYwGEEAowwhZ0tvMq&#xa;y8Vj5RtgMlq+UIO2dS0ShShvjJmBgulqR775NqUrGybhNud6dUdGzdrGVe3VGGp6+0mz1NoRto&#xa;vjf65Z49COMGQ7AmKP6RRE+evY+JKMYxyRC1GsK03cL0I0nFl5zrRzpIUw2G6V5s2q03jFZNN9&#xa;XdO2rOrLRzJllXuXR8kyFStiyn6di8wfBDd/a6uWvtCLUgnC2rcp+bFUM0x/OWtdNqZM6swRHD&#xa;9XZD9FDPJU8ayM4VdUdQwh9gJgoVtwb7QGPd5ykwbJ5N1JOhnLvzCm7j4zjV8BNyR7P8QLSPEs&#xa;5Hog40eNuweKUgCzZ4DJnh2uGcUUXNZtWy6y8XXKYfY7JRAYbvE693XP5vzp/HiTULtJqIfoWj&#xa;e2x4nGRFd2FRK7m7iGj9EkO7Wdy5kvvtuIswlhn6CcY3Hj5Cb89MwX3koriHLxlmzvqfKGq23n&#xa;AW246QGgsV3iAah5GnDSwXYVeM6R40OS1qBStYjaKAhwpiGJI7bY0hcd6tHMY6g3KYobfT5xIn&#xa;kkyef80r2MDjKB7haw+4E6qCJ1iSF0+JhLI33iwyJBM9hqnn2DJcP1sxjBLx33C1FXA8i+I7lG&#xa;nNZCl0ORAWcWOD2zovG2JdPuQM6KZYadXLwvYlkaJeM7lDxCS+rHnt29CbOl0umKYlKUUUp74R&#xa;u7QdYqdvp+RMmhQ3WUHXg0um5DeR2YuR0i5aLVsTy7rUji0eLi7vuokZal6I+NyHYCwg/6GAWF&#xa;R2ld4/Io5hmr0+uh/BZXpW6OshgrhA75FUeup3vDl9NzQaSpV+w9XR0OOf3Y0q6JkiVJD1W7gm&#xa;1yyd3sZ1upOnd+gUcE/SX5CkY3iXJBJ9lezkvA+lnuPqPhJx8vICd4A9uQRQ9cMBNNfNmKfccT&#xa;OET3HXvR9CBrNkUXPt3iNZmpwEXScZeku7iAu+6IGzLsBIBzDSAYwcA9zyQ5lzbbOY8DOYoC+p&#xa;3+9n8BJb8eQ+dpd9LIQvsOTXd5FwZHUmU/t4EA/8REAH+GrvFxTz6T8xKKUH2NzM/4pieh/feP&#xa;C6G2Bg4G8Mh/EoxvAtnvl4MT+e0AG0PTenELbpGSVpwI1nCDuuNIpLMNzswqjTO06nj+g3hWn3&#xa;PY/P/gVQSwMEFAAACAgA52GFWivA5QxWBAAANwoAAFMAAABjb20vYmFycnltYWMvZnJlZXBsYW&#xa;5lL2FkZG9ucy9sbG0vTm9kZVRhZ2dlciRfYWRkTW9kZWxUYWdSZWN1cnNpdmVseV9jbG9zdXJl&#xa;MS5jbGFzc61Wa1MbVRh+TsgFwhYCKdTYUmuNkAt0RatWKCrEXkITUILBeoubzUnYstnN7G4ykz&#xa;/gjD/BH+B31IpMP/jVGX+T4/ie3QWibGuc4cOey3vey/Nekz/+evYbgDVwhrJqtuW6Yln9tqLK&#xa;TYvzjq4YXFYaDdOwZV1vy1tmg+8qrRa30jUil+mq032Hq13L1npc79dU3bS7Fl+OgTEkW5Zp9v&#xa;oy6WnJBe8lhhGGRdNqySqJ7ytdW/a5rK7haG0uP+AGtxSHN04lIgxTZ7ZvefwMN/4LBBn6P07F&#xa;MMYwG6yTYTNTeqL0FM+Z7foTrjqrw1Cy50kSxiExjLWFnS2lTdG/UhqM1Q5vcosbKl9liOqmAM&#xa;eQSNuO4mhqQVdsu2g0TYZcKTCQvKmTGc005FNeUhSr1UhDucDAPie1dzVDc95n+HQ4v4LhPYec&#xa;rTIsDKU3W5UwgytxhPGShAlMjiGElyUkvNM1hrCzr9kM26ULrU+Kx0TN7DrcKhoUVgLNMH0eHs&#xa;N4Tdj3rhS1hllQdJ1hPsC7gEwzzARGKIbXGUZanFRezgRWyAIyccwjO4rxEWrREMNSUK577Y7e&#xa;bWmG3LsjF41Gv2iQS01FWFiiCqubpmM7ltJh+HYQsWb0zAMul7mzbzYeKkZD53a6ZJoH3c5gki&#xa;qOpRmt1ecJ7vY7PIC9mD0vIKJW0RxOnsl4I45bWJ6M4k2KqMfA8H3mgjN8ge16G29PUxLeYYio&#xa;+5reYJAod+Wz9r120ggUa8Numlb7bIxREYwRd8lv42SaLhW3kymKituhDCmqgsFKOX0i6cS/Ec&#xa;VAfTtKanzh5D9KyBOT8CHW4/gAGwzLLxq3FdXSOs5G3+GCY72hdBwxCj9iuCQmxADGfGDNB6OW&#xa;cB8P4riHhxKmMC16eZMhM+y4iqHkxXhg2K1lzjmZHX7+SdjCdhxlfOwn7wSqhB2siYcKQzztJk&#xa;q0AUM2E1DHgR3DcP3FjDHsuYNccEt4jGocn4GGcLhA0MXgMVVFryqWptR1qm9aGCZLmsG3uu06&#xa;t3xKasdLWVWzNSKsG4Ypyoh6g3JFFaUelJWOzysVDSo/10FOz5P3DNEX1J0eLnK1YnYtld/XBH&#xa;di42ROeM82lilhYRBohBMhMZcB2hPuHhcZpf07JHGZ2iJKfDOYpfVLuu1jBDHab+byi78itbQS&#xa;SUVytV9wNRXZS4VXoqmouM2lons/EhfDV7TeRoTWV3EdrwDu6QZ9zD3dpC/kngSKEfckcAh0ry&#xa;HtW92ku+CazeVzT3H1CDna5mh7hneBQzFB8bWPFaRJWJ31JE6tzuKOa5XhPWToTeidd+/AqK/1&#xa;8BSz5NF96Zqve8V9Xw2UnxtOPhHGXfpL5vm1QXoEyoXcEQrToR9I0TGKhz/hUSn/OyYF9RifPC&#xa;79jEf5I+x66r+hlTpu4k8kYygn6DceVV9fwscTPsYXh67XYSi0xokacvFMoe5S47gE1Y1bDA2f&#xa;4y265bH4N1BLAwQUAAAICADnYYVakQZhLW0HAABsEQAAOwAAAGNvbS9iYXJyeW1hYy9mcmVlcG&#xa;xhbmUvYWRkb25zL2xsbS9SZXNwb25zZVBhcnNlckNsYXNzLmNsYXNzrVj7dxtXEf6uJGvlRYmd&#xa;TUviNEnbRGn0sLOJ09JgtyW266QushNs18IpYNbSlb3JalfZXZmYAg0FUtpS3lBSKOVVwrO4TR&#xa;sbmUJ/gnP4N/gvoPQwd3eV2NYqMT05x9Lcx9yZe2e+ecj/fL/+VwAP412GB4pWRZ3VbHuxohXV&#xa;ss151dBMrmqlkmU6qmFU1HHuVGnMT2u2w+0hQ3McCYyh86y2oKnEPaeemj3Li66EKMPOOduyFh&#xa;b99ZPeuLHbxrArRNgh/wQJTDmu5upFb3XELFsM2bxlz6lFq8TntZqjBrJtXjZIom6Z6nXefgZp&#xa;ZoYkjA4xsDMM7RXuat42w4782luNNjboTPwh3dTdRxii6cwUw+4Go2trplO27Ip6kpvc1lxe6k&#xa;9iKzpkxLCNYXtqjrsT3nVHb+jpSmdaaEpiO+6QEcGdSSSxpZ1GOxhi7rxOxx7MfyAv0PW3VMV0&#xa;wNSMRUdI2p/O3/DKhGvr5lx/xl+qubqhjmpVOnUk1Kg109UrXJ0o2nrVHVx0ueAYKGlVl9sS9p&#xa;BFizYnQ5AMhlT6yfxG/zdpSuJu3CNjL+5luHOtXcZ5mdvcLHIJ+2krHSJqSlj7gIwU7mOQfc15&#xa;3XEZDtxKtWAj3WlkhO4sw+gHMm9qZp1xZ4qG5dRsfkRCN4MRcueQldBH/5/LvikOyeiBypDgWn&#xa;E+r5s8gSNRimIw9IS5c6FSNWpzuqkuHFNHzNLiiEluLGvC5PeTK2cty3UI5OTKS2ufopsL1jku&#xa;gDtvlR7TzJLBnVTess7Vqv3N0Gp1cHKxykPYRzLNB4Y0w5jQXU4O+wgelPEAjnXE8VGKTJ+BoT&#xa;8E0+tMNeQ7pj/T7IAk+vGQIpIdRThFLMMd6VC2j+G4wNoAQweBhRzPxyx3+HxNMxgObsrXmTNJ&#xa;DOFRAblhykW6M1ypuosJnGS4Lwzg4ZcdUcihjzNE0pkE8pQhiprAfGiIkMIxnFIolZxmaKPXDb&#xa;gJjDMc29x9wy8wqSCKJ0gxwcdJoKBQvqNpW7XmiafE+vjmoL9ZhZ9S0IZPMwzeLCm5BKh5gUZy&#xa;vvooL2s1wxUgm2ykaU1UAwkzDEmCtsE18wlz1rqQhIZTMj6LWYqcRiQnULrlK5oBfvNXlMUr5k&#xa;RGt/VKAvoGp69PxRsPn1MQBwGNyQmYZGunauhk6+otXXlzsbYCCc5tTn+9EmqbDgkvc31OxgIu&#xa;UEgULUOU7QQ+vyGow7LlLYL6CwoS+OJtfttRCU/LuOhdtqybpQHDSOAZBe23XdP9Er4m45LQFH&#xa;W4m8TX/Vr33IYS3rKwjuEFEfjfILxrgexJfoEyhdIMD3qNzR2KmKZO6EaREXmvZtPYHaJCO2fZ&#xa;1I91VC2XFnTNOG3ppjidoCQTtDrb1+XRRpPzffxANEg/pM5E9FVrWqNc6LNaNUs/wmWRSF9Okp&#xa;fbRbP0E4b0ZltBCT8lszSu6jeSD6ebbpvZfG+ZxM/wcxmv4he+4OtXTeJXoq17Fa8x3NXcO3pF&#xa;l9xD5v2wr3+WMpOjemlLJ9v2b2iMrguW8FtS5fC1JtyVbmEv0bnKoiH1CzVDJh1SaUNrOsPemz&#xa;NK+BPVYsPjTuINvC5jCW8SkFp0Ry13elvuHG25Q51KbIgcJGBtFTVjSrN1bdbgk+KL2u1xvzxM&#xa;6Y5OCwOmableISBjbaHmvHiOgiXg7RA901itMsvtYCU5YppBlHI6IE9YNbvIT+hir3Ow0R/5xn&#xa;BwL4EwRrU5jminLFAJdD4HGR8i+oxo6anJiNM+/UQgzhWaHSYaIapkl+lzjRCQy868jZ25whte&#xa;2/Zn+k4SBbahC7uI1gMZnUTbcRd205gkRQZIX4KOvBR9B7EV7FtF6szMMg7mcwXWGI92F/zdXG&#xa;NlrKeQXUXPtBJRIt09uWUcruMRoNB9DYNsBScu454eGtbxcaH5E8DLkGJXEItevk6Hc8TQ7TFN&#xa;AdN9MY/vMhJdxCAH+nwh00BfW4O9q62Oz5CqrrZCrqFiBcVNaNwjGPri4pTCu+J1zAsx8cIV1N&#xa;ZL2petoyLEtJY15LMoVh0usIoFzxTLWKzjS2J+MZh/uY6v0u2lQKkUKJW8u6/iUsD2rMc2nXsX&#xa;qZlreD542YugeAD1TKuey7e9D+qwU/7fcRY/zt7D3RJiJ+jzb+zZ7y3tPuCR/2AQf6FTvQQDEG&#xa;wUcvxeAsNh+q04jBzOoxtXafYvHMF/0ctU6twtHGMvos8DT5YASaDAN/EtmnWyZ/FtfIcgs5s9&#xa;he/SKIJDTMf3aBTtjInfnz6cSKsPzIMEypeUyGtIZFfw46U38Uo+9w90iNUV/HI6fxWv0Bt/ve&#xa;ShddXDZGTre9guUb5jIvEFQFeJChjvyL6FndN/R2ypkJ0mvBPWxcqN84TtEQm/83C+lUwmcH6F&#xa;Pr/xOH6PPwQCleCC8WyOZIho8WND/H4OznS24494PXhQp6ceAo1Xl7xRFO/Q9z4yUA/Rt8ioC0&#xa;TfJnqR6DWil4guExX/CYlQn/Q3ouOkoY9mvTjq0ccCOhrQiYB+MqBPBvRsQM8H9KmAfgVH/wdQ&#xa;SwMEFAAACAgA8WCFWqFrt8C1AAAADAEAABYAAABjb21wYXJlTm9kZXNTeXN0ZW0udHh0NY9Lcs&#xa;MwCIb3PgUn8B266QWyypJKNKYjgwrIiXL6Ys90ht3/+rjrADQClDxsM7hgA3RnD5SATvattrM8&#xa;oOje0dhVfF0+TvObIDaCbnpwpZoOCcqQfv1QCT6ozWytaVLT8djaXJdPLcNBJSWVK270O8jjyv&#xa;8vQMxO63ILGyVG8k0dlk7vuU7w5NigNEKDjbAmnV9DCVA49a4scVIeyhWGCBVyR5tAr97y0eDs&#xa;AbVzck/klNblD1BLAwQUAAAICADxYIVakzDy11EAAACJAAAAFwAAAGRlZmF1bHRVc2VyTWVzc2&#xa;FnZXMudHh0887LL89TSEtMLim24lJJzEtOLS7JL3LOzytJzSsp5lIpzkzKycxLhwtweZOqISS/&#xa;IDPZSkElLz8lFSrKxeWTmJdempieaqXgmpeek1mcwQUAUEsDBBQAAAgIAPFghVqYlY0roQEAAL&#xa;wCAAAmAAAAZ2VuZXJhdGVDb21wYXJhdGl2ZURpbWVuc2lvblN5c3RlbS50eHRtUk1v2kAQve+v&#xa;GHEpkQpVSE/0RKhpLRFowEkTVT0s6wFGsnesneUj/z5jO8RR1Zt3xu/NvPfmB3oMNiIkT5NpNn&#xa;+G5SIBx2VltUpHhJxK9ELs4URxD9nvJVRcoMDGCuag9bhHOAiGTwJbdgcZgllnq3SawWy5uptk&#xa;sEruH9JVcpcssvXYXA/hQVB/DaWNY+j9Uja4HsOf0eAGThxyHe8dVvHvN2h6o//1emY0hAUDnq&#xa;vCel2VvQAHsHlO9cMWEPEczc2wIREoDxJhgzVBDFYi+d0XrioW/biwivnaLidYkuNCxVnRR2MG&#xa;B2OSsy2rmo238DiZp9/fZMjYDOAiJPFHCuzVtqhbpGqli52URGexssMj2Q0VFF8+QNd7DnEQMZ&#xa;QwZYnSwebsd23jVhPbku7awTJ0e09Op83QCrW0HVYVBZg4h3LpGZP6oy0oV/9aRbWAnxhQQ6zz&#xa;bC+AhP2/eo7SSeiXJI1/bYhPPSjsBgu5UrIZBTXcSoVOU67VfIY1KjJ/L94fbL0M9E9Kv/uAfb&#xa;dDM7Pk33yCPvviRS8Omwu8Mq9QSwMEFAAACAgA8WCFWorj+XfTCAAA+hcAABkAAABkZWZhdWx0&#xa;U3lzdGVtTWVzc2FnZXMudHh01Vhbj9u6EX7XryCCAJsAe4xugZzTbHEevNcsujesNwhO32iJth&#xa;hTpEpSdpxff74ZSpZ8S4qifagekrXIGc7lm5mP+sM1QnolpBXazpXVTcDfhci9klEvsRCCDlHa&#xa;OMqeTRDYoryMSuhCySC8MvhRiOhELBX+q3Uu5pCzYroWTVB+lE1ULVlEybxkObHSsRRSWLUy2q&#xa;pRll05exJZUOgIA9aiVLKARcLohRJv7ui0N6N2n7JNlazozCmSPd0GHMxKtC2UjXDEWZGXsCKP&#xa;yoekc9oYo6KonbYxnMJPLOk8COdFpS3C0AuMsi9e47S1a3zruLNK1MqLZH861asaQRML61ZWzC&#xa;C6sSd3VQVDUoxkWMDJoMwMjl86m2OFnYGRfRCdNesRlpc4BOdV5I4MtYJW4WaDjVisHZI0NZQs&#xa;UShVm/XwLU65/iar2qjzLLt1m1whwnBu8KZC2Joqm0QJ+ShKV6nsd36yeyV9sm7mfIXFN66J5P&#xa;sbMfOu4hWVDhFTZdyqB5ESQVfaSC9akUA6kvGhxwppaPESkYcIH2bOkKb+1JEQnwPZaaKmk6CL&#xa;Um/UUpkwEjDcxwQrQZCbe1mXfBgjj14HxFoh4tjc1LVXITBOtrBACHA41O9B5hcKC5kzVXNtLc&#xa;GzTYVBjZwy7L42IQ5MjrQJydB2GKNDgI86cq5+jAjxX0LEccT+FLKvOCSciysdcrJlTYdPapmr&#xa;Ac7u4IArmpwqLxN4XqGmGEoEkoABM4puC0D1rTbOp3JtPWosQuQDhXztAKlrpLg8RThz03B/yJ&#xa;UBCrQ0YuoKDXCFBrkmZ420iiob3ctTgUN6Lo38hk2j7BMS5oAzyF3IfDH3rrHFxtKZ9qELi5sC&#xa;lcuNUcnuFSegUIRcaXNNkcr1Uhv9nXeGoYnkx61XapFa6/V8XcNg2rMqHYGm4C1sJ8PVyqWepx&#xa;NJAGdJMZXow6lySqWBTWmULSQ1J7L6zoqzjx9+O2VNE7fUgPNnSxqMbGxetmckxxBDPdM5BS0A&#xa;ZsaguZ0ih020eiHOTslJv+hM59yKF/pnquJKqQRKaKfiQ9FFlRzbPXqUPcivMHicA0w1SqQkRA&#xa;W29+zjr2eopz8ar8WtnEuPApkq7IOu3tCyAcoZHV6ixukvjv+o0/EROh6VNmLsqwDIUbHBkovm&#xa;+3cxNkWvdVcpY24lzaKrsQdHBie1v5Fpr0cCObQvgSGkCYMISrNuojjr9Hz8W6sn7aYoYG7Yvl&#xa;5RJspblkYuUqAn7bx6dzeZvOfZvMkgupNDd5pqDOO0eYwBCPSlmD52isYKkZBNpAZL4Wj3Fphr&#xa;gH1bYO8ex5Pxexi4lUhW9OJQqKFyAasvDXqG5NfXjXfoF1YMzl6Ld9dJTVrljZeltrI35/Dxl4&#xa;9Jjje3GC70RvuLCpg5KOUnP5eQ2wTl5YmkeG8KQu7lLLKfryovrTNuvmZ9kw7b5AeXGZUPNTZ0&#xa;lbzNWV9rqUXslDv3G14YAC9Z+OzddFv1sH+RSCGjxHmYLXmnb7ddDRVOyiZiBpBKr5ogqX+H3s&#xa;PeA+n9mnufV+2glX7OY5x+8EAeWPvi8gUa4dDQhChSMdDfo4vVpIYLClJKOABumLD0osMiDIwe&#xa;+oz5gl1LFLNL/Gko6Elw0BbPWQnj6hsEG0/jS3iwvj6Alc69wxhf6riGk1aUaAMY5PPETdVslq&#xa;afbTsFKI2J5WijOZlYqCkOZ3myEM00lsRMNu2kR5DkJoLSCb0SKuBSz0tkEkW8GQG7yaZ6Jh9p&#xa;h/pXo2senzOpDVwbZRdgqjPMUN57V0FFPBLFEv3eJE7NPJdiGXjEUNPeTFHddd0O9DzMZLHEPF&#xa;LcaA8GG0d7iBdihQgQyQEeVA6/dds7oZ+5MBEMOWdNfSyuiGq55Br8JEpVEYsEoHetaXkecSI4&#xa;xXXU6xkPzCRuVKmCzfdd1W/pWveCd5ZIJeEY8xrEADeTYsDDNnSBSxlsHSwA4cUJuvWCspkSiM&#xa;sBuBrYCGx3gqICah8ExoV1AB4KIGXstLtl0Dlf0R8SnBEJ26i2pTTgO+Sxtktnltyq92EyOs6m&#xa;IT2fI+Yr5wvxH1DrQ/L/M549Niu5DmIKExYbRo33z5h9zLSTFRRz1CYoFF+SWKV14uSXkyGxho&#xa;lb7PvgZfD/hhtPQHPaIHSBSX11E0swK9gU0p2YEJVetEZuhPauDC3xzs/FF7pKWTG26ZLyzDx3&#xa;wL1fNejOPULOeP/r2Ye/bKrnE1OfzU+u6LadbL2kJ+kV/9xb4Jmi6SpvaUqjynIVDu6i59aZ4u&#xa;jilZaVs8fXn7Q5uHZnSzll1jJdHxUeG/TM44bR84xMqVlj6F53Qxzth7vp+aIM08kDkdx97vl6&#xa;/TOF6dJ6aSQqGWjYDiiS9+FHyUvCD5qvok+1Sn1m36wfhAIsBgTpuOP/hqN3c4sZ8lNPX2ECWU&#xa;cUosPmrz02D9g4jhF3sz3FbFLn9Y3MceuK+ggEf2I+wl3TtZI/SN04BP6HblDpXVDbC+KpidkX&#xa;1F8SeLL79fKqvJfabil8AIVAv7nCmPP7Mf+E61yJLoaRtp/HG8zaJ0y+fWcm3BAx/2m4Ox9psm&#xa;42faYxma634rWxFh18S8HnlhPuaX31CByp21u5HDLofSc0DeSegi12U3OjDdEbCvlhoIqx9kzJ&#xa;Duet5Q57dP/Qg4gykbpSMzTzI0ialLo+fNQDcC0eWxJ2cMc9fULqLDpqxiWIKc2ZZ/4o0m58Gr&#xa;TvMCgDsxuwIxieKLUQn5SpmSccPDsdcYkYWf0dEds9bN9fhucNuIwtTB/Wa6uqXauO9JQxkalP&#xa;RNMPeNI9z26lPPddoPJK4o6wFeDEiS8k34a2QyHrWtGn6j21T/Q+fYbaXXoE3TrqOi/S5T9kA1&#xa;Z+CVhcKfTvqpuj9BB3RN3zAGgHNjrC1vINU5O0dktfm7aweXJyMgLrqt69//vwdaFmzMkma/Cs&#xa;6gGQknRr+p32Z//oCch59pZwRl+u0CQif0x5S6wFBbd50dGEt9YVqn2bZfcIcgOt58jlnD7FZH&#xa;8CUEsDBBQAAAgIAPFghVpSQZoJHQIAAMsDAAAbAAAAY29tcGFyZU5vZGVzVXNlck1lc3NhZ2Uu&#xa;dHh0VVPLbtswELzzKxZGD7ZgCEjak26umwJBXbtIXAQ5UtJaJkqRKh+J1a/vUJLtGDAsapY7s4&#xa;/Rq40kHZM0+EndB1VJTdJ75YM0gTp2B+taZRqqbNtJp7w1Phc/jH03dJBV8CRLGwPCJvApFOLJ&#xa;2kBbW3NBnxzOe6BiZSr2wToPUE7ndcowwYtnVWoopJgfj5cQElHVP6ZwZGqlMhRspyoqpeeadt&#xa;vNK1kzBB3/jaAFei2UQt9xLkSWrZ8e94/r1abIMnoOLlYhouveRodE36EnpoxP6Ef3Gfqng9Xa&#xa;vvtC3OX024/6H4nZtZ46Z99UDck5502+pNkvZ/0MT9Q/PCHFpgnH4eWF5R/D3rOfLZLEkWWd2l&#xa;6SaluulQys+0kYnGVPEpIaavNikYv7nDbYCmXWpBox70qhsM4qDApdaH5LGwsWtcpwZl9iPtOl&#xa;tEzCdHlJtXKcWqVoaoCpuel+Lj7n9G1H292eIujLqDWHSQWJ0h8ZTxPbkt3I72CdnixIHCWzyB&#xa;CSX0rGyzi4MTsXXy7UylQ61jxkIuZsjZVY1ye21BmCicNz8gHsknDMXjZOdkef0w4zOI//Y/lw&#xa;o6kToNxFVTycZNtppl0MHZz6faiR5odB68Yr4wYHjmGFi0IkAP/DAO8mr0MYvCN2f4OlrPPt1f&#xa;XLuNz+eoOJn8nR++RoeN/gm5mMD55LXXvUhei10gSIjTRNlA0iD6bRyh/Ff1BLAQIUAxQAAAgI&#xa;AOdhhVoAAAAAAgAAAAAAAAAJAAAAAAAAAAAAEADtQQAAAABNRVRBLUlORi9QSwECFAMUAAAICA&#xa;AmUoVasn8C7hsAAAAZAAAAFAAAAAAAAAAAAAAApIEpAAAATUVUQS1JTkYvTUFOSUZFU1QuTUZQ&#xa;SwECFAMUAAAICADnYYVaAAAAAAIAAAAAAAAABAAAAAAAAAAAABAA/UF2AAAAY29tL1BLAQIUAx&#xa;QAAAgIAOdhhVoAAAAAAgAAAAAAAAANAAAAAAAAAAAAEAD9QZoAAABjb20vYmFycnltYWMvUEsB&#xa;AhQDFAAACAgA52GFWgAAAAACAAAAAAAAABcAAAAAAAAAAAAQAP1BxwAAAGNvbS9iYXJyeW1hYy&#xa;9mcmVlcGxhbmUvUEsBAhQDFAAACAgA52GFWgAAAAACAAAAAAAAAB4AAAAAAAAAAAAQAP1B/gAA&#xa;AGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL1BLAQIUAxQAAAgIAOdhhVoAAAAAAgAAAA&#xa;AAAAAiAAAAAAAAAAAAEAD9QTwBAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0v&#xa;UEsBAhQDFAAACAgA52GFWmsHerh4BwAA9Q8AADIAAAAAAAAAAAAAALSBfgEAAGNvbS9iYXJyeW&#xa;1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9Ob2RlVGFnZ2VyLmNsYXNzUEsBAhQDFAAACAgA52GF&#xa;Wq+ZDpECBgAA5QwAADoAAAAAAAAAAAAAALSBRgkAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYW&#xa;Rkb25zL2xsbS9NZXNzYWdlRmlsZUhhbmRsZXIuY2xhc3NQSwECFAMUAAAICADnYYValSHMN/cD&#xa;AACNCAAATwAAAAAAAAAAAAAAtIGgDwAAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbG&#xa;xtL01lc3NhZ2VFeHBhbmRlciRfZXhwYW5kTWVzc2FnZV9jbG9zdXJlMS5jbGFzc1BLAQIUAxQA&#xa;AAgIAOdhhVrXfVhFxgwAAOseAABfAAAAAAAAAAAAAAC0gQQUAABjb20vYmFycnltYWMvZnJlZX&#xa;BsYW5lL2FkZG9ucy9sbG0vQnJhbmNoR2VuZXJhdG9yRmFjdG9yeSRfY3JlYXRlR2VuZXJhdGVC&#xa;cmFuY2hlc19jbG9zdXJlMS5jbGFzc1BLAQIUAxQAAAgIAOdhhVrBVLKFvQQAAPYLAAB9AAAAAA&#xa;AAAAAAAAC0gUchAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vQnJhbmNoR2Vu&#xa;ZXJhdG9yRmFjdG9yeSRfY3JlYXRlR2VuZXJhdGVCcmFuY2hlc19jbG9zdXJlMSRfY2xvc3VyZT&#xa;IkX2Nsb3N1cmUzJF9jbG9zdXJlNS5jbGFzc1BLAQIUAxQAAAgIAOdhhVoVz74puQYAAJsOAAA9&#xa;AAAAAAAAAAAAAAC0gZ8mAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vRGVwZW&#xa;5kZW5jeUxvYWRlckNsYXNzLmNsYXNzUEsBAhQDFAAACAgA52GFWnJ9UHldBAAAoQkAAFMAAAAA&#xa;AAAAAAAAALSBsy0AAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9SZXNwb25zZV&#xa;BhcnNlckNsYXNzJF9wYXJzZUFuYWx5c2lzX2Nsb3N1cmU0LmNsYXNzUEsBAhQDFAAACAgA52GF&#xa;Whp2ed1nBgAAQhAAAGwAAAAAAAAAAAAAALSBgTIAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYW&#xa;Rkb25zL2xsbS9EaWFsb2dIZWxwZXJDbGFzcyRfc2hvd0NvbXBhcmlzb25EaWFsb2dfY2xvc3Vy&#xa;ZTIkX2Nsb3N1cmU0JF9jbG9zdXJlNS5jbGFzc1BLAQIUAxQAAAgIAOdhhVpQM+fH7QMAAFIIAA&#xa;BPAAAAAAAAAAAAAAC0gXI5AABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vTWVz&#xa;c2FnZUV4cGFuZGVyJF9nZXRCaW5kaW5nTWFwX2Nsb3N1cmUyLmNsYXNzUEsBAhQDFAAACAgA52&#xa;GFWrCtbJwtCAAAdBEAADcAAAAAAAAAAAAAALSBzD0AAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUv&#xa;YWRkb25zL2xsbS9NZXNzYWdlRXhwYW5kZXIuY2xhc3NQSwECFAMUAAAICADnYYVa/ekYBaAHAA&#xa;CYEgAAcwAAAAAAAAAAAAAAtIFORgAAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxt&#xa;L0JyYW5jaEdlbmVyYXRvckZhY3RvcnkkX2NyZWF0ZUdlbmVyYXRlQnJhbmNoZXNfY2xvc3VyZT&#xa;EkX2Nsb3N1cmUyJF9jbG9zdXJlMy5jbGFzc1BLAQIUAxQAAAgIAOdhhVonEQCYLwUAAGoMAABb&#xa;AAAAAAAAAAAAAAC0gX9OAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vTm9kZU&#xa;hlbHBlckNsYXNzJF9hZGRBbmFseXNpc1RvTm9kZUFzQnJhbmNoX2Nsb3N1cmUzLmNsYXNzUEsB&#xa;AhQDFAAACAgA52GFWvuV89dyBAAAtAkAAF4AAAAAAAAAAAAAALSBJ1QAAGNvbS9iYXJyeW1hYy&#xa;9mcmVlcGxhbmUvYWRkb25zL2xsbS9Ob2RlSGVscGVyQ2xhc3MkX3ZhbGlkYXRlQW5kR2V0Q29u&#xa;bmVjdGVkTm9kZXNfY2xvc3VyZTIuY2xhc3NQSwECFAMUAAAICADnYYVad1iyZaIGAACcEAAAWA&#xa;AAAAAAAAAAAAAAtIEVWQAAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0RpYWxv&#xa;Z0hlbHBlckNsYXNzJF9zaG93Q29tcGFyaXNvbkRpYWxvZ19jbG9zdXJlMi5jbGFzc1BLAQIUAx&#xa;QAAAgIAOdhhVo0RZOpWgcAAFUSAAB2AAAAAAAAAAAAAAC0gS1gAABjb20vYmFycnltYWMvZnJl&#xa;ZXBsYW5lL2FkZG9ucy9sbG0vRGlhbG9nSGVscGVyQ2xhc3MkX3Nob3dDb21wYXJpc29uRGlhbG&#xa;9nX2Nsb3N1cmUyJF9jbG9zdXJlNCRfY2xvc3VyZTUkX2Nsb3N1cmU2LmNsYXNzUEsBAhQDFAAA&#xa;CAgA52GFWjhXpaHTAwAAEQgAAFMAAAAAAAAAAAAAALSBG2gAAGNvbS9iYXJyeW1hYy9mcmVlcG&#xa;xhbmUvYWRkb25zL2xsbS9SZXNwb25zZVBhcnNlckNsYXNzJF9wYXJzZUFuYWx5c2lzX2Nsb3N1&#xa;cmUyLmNsYXNzUEsBAhQDFAAACAgA52GFWjBlDJ7lAwAAKAgAAD4AAAAAAAAAAAAAALSBX2wAAG&#xa;NvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9CcmFuY2hHZW5lcmF0b3JGYWN0b3J5&#xa;LmNsYXNzUEsBAhQDFAAACAgA52GFWtqyMAXzCgAACR0AAGkAAAAAAAAAAAAAALSBoHAAAGNvbS&#xa;9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9CcmFuY2hHZW5lcmF0b3JGYWN0b3J5JF9j&#xa;cmVhdGVHZW5lcmF0ZUJyYW5jaGVzX2Nsb3N1cmUxJF9jbG9zdXJlMi5jbGFzc1BLAQIUAxQAAA&#xa;gIAOdhhVq7DN2Z0ggAAKYRAAA1AAAAAAAAAAAAAAC0gRp8AABjb20vYmFycnltYWMvZnJlZXBs&#xa;YW5lL2FkZG9ucy9sbG0vQ29uZmlnTWFuYWdlci5jbGFzc1BLAQIUAxQAAAgIAOdhhVpT42gxTQ&#xa;UAAJ8LAAA4AAAAAAAAAAAAAAC0gT+FAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9s&#xa;bG0vQXBpQ2FsbGVyRmFjdG9yeS5jbGFzc1BLAQIUAxQAAAgIAOdhhVolYMe21wQAAE8LAAB2AA&#xa;AAAAAAAAAAAAC0geKKAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vRGlhbG9n&#xa;SGVscGVyQ2xhc3MkX3Nob3dDb21wYXJpc29uRGlhbG9nX2Nsb3N1cmUyJF9jbG9zdXJlNCRfY2&#xa;xvc3VyZTUkX2Nsb3N1cmU3LmNsYXNzUEsBAhQDFAAACAgA52GFWp4VR8kRBQAAwQsAAGIAAAAA&#xa;AAAAAAAAALSBTZAAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9EaWFsb2dIZW&#xa;xwZXJDbGFzcyRfY3JlYXRlUHJvZ3Jlc3NEaWFsb2dfY2xvc3VyZTMkX2Nsb3N1cmU4LmNsYXNz&#xa;UEsBAhQDFAAACAgA52GFWqDhfi6XBQAA9wwAAFgAAAAAAAAAAAAAALSB3pUAAGNvbS9iYXJyeW&#xa;1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9EaWFsb2dIZWxwZXJDbGFzcyRfY3JlYXRlUHJvZ3Jl&#xa;c3NEaWFsb2dfY2xvc3VyZTMuY2xhc3NQSwECFAMUAAAICADnYYVaWlo/ps8GAAALDgAAOgAAAA&#xa;AAAAAAAAAAtIHrmwAAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL01lc3NhZ2VM&#xa;b2FkZXJDbGFzcy5jbGFzc1BLAQIUAxQAAAgIAOdhhVoDpLXFjAMAAKEHAABbAAAAAAAAAAAAAA&#xa;C0gRKjAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vTm9kZUhlbHBlckNsYXNz&#xa;JF9hZGRBbmFseXNpc1RvTm9kZUFzQnJhbmNoX2Nsb3N1cmU0LmNsYXNzUEsBAhQDFAAACAgA52&#xa;GFWliwO1uMCgAAKxkAADkAAAAAAAAAAAAAALSBF6cAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUv&#xa;YWRkb25zL2xsbS9EaWFsb2dIZWxwZXJDbGFzcy5jbGFzc1BLAQIUAxQAAAgIAOdhhVpvGj2YhQ&#xa;QAACgKAABlAAAAAAAAAAAAAAC0gfqxAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9s&#xa;bG0vTm9kZUhlbHBlckNsYXNzJF9hZGRBbmFseXNpc1RvTm9kZUFzQnJhbmNoX2Nsb3N1cmUzJF&#xa;9jbG9zdXJlNS5jbGFzc1BLAQIUAxQAAAgIAOdhhVp/DPEhMwQAAKwIAABTAAAAAAAAAAAAAAC0&#xa;gQK3AABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vUmVzcG9uc2VQYXJzZXJDbG&#xa;FzcyRfcGFyc2VBbmFseXNpc19jbG9zdXJlMy5jbGFzc1BLAQIUAxQAAAgIAOdhhVqhruubXwcA&#xa;AFoQAABTAAAAAAAAAAAAAAC0gaa7AABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG&#xa;0vUmVzcG9uc2VQYXJzZXJDbGFzcyRfcGFyc2VBbmFseXNpc19jbG9zdXJlMS5jbGFzc1BLAQIU&#xa;AxQAAAgIAOdhhVpTNK3uOw8AAJEiAABSAAAAAAAAAAAAAAC0gXbDAABjb20vYmFycnltYWMvZn&#xa;JlZXBsYW5lL2FkZG9ucy9sbG0vQXBpQ2FsbGVyRmFjdG9yeSRfY3JlYXRlQXBpQ2FsbGVyX2Ns&#xa;b3N1cmUxLmNsYXNzUEsBAhQDFAAACAgA52GFWl9H1sunBAAACQsAAFIAAAAAAAAAAAAAALSBId&#xa;MAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9BcGlDYWxsZXJGYWN0b3J5JF9j&#xa;cmVhdGVBcGlDYWxsZXJfY2xvc3VyZTIuY2xhc3NQSwECFAMUAAAICADnYYVahk+d33cFAADzDA&#xa;AAcwAAAAAAAAAAAAAAtIE42AAAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0Jy&#xa;YW5jaEdlbmVyYXRvckZhY3RvcnkkX2NyZWF0ZUdlbmVyYXRlQnJhbmNoZXNfY2xvc3VyZTEkX2&#xa;Nsb3N1cmUyJF9jbG9zdXJlNC5jbGFzc1BLAQIUAxQAAAgIAOdhhVpkTxklzgUAAD4NAABsAAAA&#xa;AAAAAAAAAAC0gUDeAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vRGlhbG9nSG&#xa;VscGVyQ2xhc3MkX2NyZWF0ZVByb2dyZXNzRGlhbG9nX2Nsb3N1cmUzJF9jbG9zdXJlOCRfY2xv&#xa;c3VyZTkuY2xhc3NQSwECFAMUAAAICADnYYVa514VDkgEAAA3CQAAWAAAAAAAAAAAAAAAtIGY5A&#xa;AAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0RpYWxvZ0hlbHBlckNsYXNzJF9z&#xa;aG93Q29tcGFyaXNvbkRpYWxvZ19jbG9zdXJlMS5jbGFzc1BLAQIUAxQAAAgIAOdhhVpZsEVnkw&#xa;0AALgeAAA3AAAAAAAAAAAAAAC0gVbpAABjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9s&#xa;bG0vTm9kZUhlbHBlckNsYXNzLmNsYXNzUEsBAhQDFAAACAgA52GFWiPH0CuDBAAAqgoAAFwAAA&#xa;AAAAAAAAAAALSBPvcAAGNvbS9iYXJyeW1hYy9mcmVlcGxhbmUvYWRkb25zL2xsbS9BcGlDYWxs&#xa;ZXJGYWN0b3J5JF9jcmVhdGVBcGlDYWxsZXJfY2xvc3VyZTEkX2Nsb3N1cmU0LmNsYXNzUEsBAh&#xa;QDFAAACAgA52GFWhxNN1Z0BAAAtAkAAF4AAAAAAAAAAAAAALSBO/wAAGNvbS9iYXJyeW1hYy9m&#xa;cmVlcGxhbmUvYWRkb25zL2xsbS9Ob2RlSGVscGVyQ2xhc3MkX3ZhbGlkYXRlQW5kR2V0Q29ubm&#xa;VjdGVkTm9kZXNfY2xvc3VyZTEuY2xhc3NQSwECFAMUAAAICADnYYVaKtjelK8IAABXFQAAYgAA&#xa;AAAAAAAAAAAAtIErAQEAY29tL2JhcnJ5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0RpYWxvZ0&#xa;hlbHBlckNsYXNzJF9zaG93Q29tcGFyaXNvbkRpYWxvZ19jbG9zdXJlMiRfY2xvc3VyZTQuY2xh&#xa;c3NQSwECFAMUAAAICADnYYVaT+KCnqkEAAANCwAAUgAAAAAAAAAAAAAAtIFaCgEAY29tL2Jhcn&#xa;J5bWFjL2ZyZWVwbGFuZS9hZGRvbnMvbGxtL0FwaUNhbGxlckZhY3RvcnkkX2NyZWF0ZUFwaUNh&#xa;bGxlcl9jbG9zdXJlMy5jbGFzc1BLAQIUAxQAAAgIAOdhhVorwOUMVgQAADcKAABTAAAAAAAAAA&#xa;AAAAC0gXMPAQBjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9ucy9sbG0vTm9kZVRhZ2dlciRf&#xa;YWRkTW9kZWxUYWdSZWN1cnNpdmVseV9jbG9zdXJlMS5jbGFzc1BLAQIUAxQAAAgIAOdhhVqRBm&#xa;EtbQcAAGwRAAA7AAAAAAAAAAAAAAC0gToUAQBjb20vYmFycnltYWMvZnJlZXBsYW5lL2FkZG9u&#xa;cy9sbG0vUmVzcG9uc2VQYXJzZXJDbGFzcy5jbGFzc1BLAQIUAxQAAAgIAPFghVqha7fAtQAAAA&#xa;wBAAAWAAAAAAAAAAAAAAC0gQAcAQBjb21wYXJlTm9kZXNTeXN0ZW0udHh0UEsBAhQDFAAACAgA&#xa;8WCFWpMw8tdRAAAAiQAAABcAAAAAAAAAAAAAALSB6RwBAGRlZmF1bHRVc2VyTWVzc2FnZXMudH&#xa;h0UEsBAhQDFAAACAgA8WCFWpiVjSuhAQAAvAIAACYAAAAAAAAAAAAAALSBbx0BAGdlbmVyYXRl&#xa;Q29tcGFyYXRpdmVEaW1lbnNpb25TeXN0ZW0udHh0UEsBAhQDFAAACAgA8WCFWorj+XfTCAAA+h&#xa;cAABkAAAAAAAAAAAAAALSBVB8BAGRlZmF1bHRTeXN0ZW1NZXNzYWdlcy50eHRQSwECFAMUAAAI&#xa;CADxYIVaUkGaCR0CAADLAwAAGwAAAAAAAAAAAAAAtIFeKAEAY29tcGFyZU5vZGVzVXNlck1lc3&#xa;NhZ2UudHh0UEsFBgAAAAA1ADUAIxgAALQqAQAAAA==" ID="ID_1180311506" CREATED="1743866218977" MODIFIED="1743866219001"/>
</node>
</node>
<node TEXT="resources" POSITION="bottom_or_right" ID="ID_RESOURCES" CREATED="1742836000000" MODIFIED="1742836000000">
<edge COLOR="#7c7c00"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain resource files that will be copied to the add-on's resources directory.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- The immediate child nodes contain the name of the resource file.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- Any resource file will be extracted in &lt;installationbase&gt;/&lt;addonname&gt;/resources.
    </p>
  </body>
</html></richcontent>
</node>
<node TEXT="zips" POSITION="bottom_or_right" ID="ID_169986368" CREATED="1685111823978" MODIFIED="1685111823978">
<edge COLOR="#007c7c"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may contain any number of nodes containing zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- The immediate child nodes contain a description of the zip. The devtools script releaseAddOn.groovy allows automatic zip creation if the name of this node matches a directory in the current directory.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- The child nodes of these nodes contain the actual zip files.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- Any zip file will be extracted in the &lt;installationbase&gt;. Currently, &lt;installationbase&gt; is always Freeplane's &lt;userhome&gt;, e.g. ~/.freeplane/1.3.
    </p>
    <p>
      
    </p>
    <p>
      &#xa0;- The files will be processed in the sequence as seen in the map.
    </p>
  </body>
</html></richcontent>
</node>
<node TEXT="images" POSITION="bottom_or_right" ID="ID_295383454" CREATED="1685111823978" MODIFIED="1742834860064">
<edge COLOR="#7c0000"/>
<richcontent TYPE="NOTE">
<html>
  <head>
    
  </head>
  <body>
    <p>
      An add-on may define any number of images as child nodes of the images node. The actual image data has to be placed as base64 encoded binary data into the text of a subnode.
    </p>
    <p>
      The images are saved to the <i>${installationbase}/resources/images</i>&#xa0;directory.
    </p>
    <p>
      
    </p>
    <p>
      The following images should be present:
    </p>
    <ul>
      <li>
        <i>${name}-icon.png</i>, like <i>oldicons-theme-icon.png</i>. This will be used in the app-on overview.
      </li>
      <li>
        <i>${name}-screenshot-1.png</i>, like <i>oldicons-theme-screenshot-1.png</i>. This will be used in the app-on details dialog. Further images can be included but they are not used yet.
      </li>
    </ul>
    <p>
      Images can be added automatically by releaseAddOn.groovy or must be uploaded into the map via the script <i>Tools-&gt;Scripts-&gt;Insert Binary</i>&#xa0;since they have to be (base64) encoded as simple strings.
    </p>
  </body>
</html></richcontent>
<attribute_layout NAME_WIDTH="104.25 pt"/>
<node TEXT="${name}.svg" FOLDED="true" ID="ID_1000617651" CREATED="1685111823979" MODIFIED="1685111823979">
<attribute_layout VALUE_WIDTH="100 pt"/>
<node TEXT="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyND&#xa;A2IDI0MDYiPjxwYXRoIGQ9Ik0xIDU3OC40QzEgMjU5LjUgMjU5LjUgMSA1NzguNCAxaDEyNDku&#xa;MWMzMTkgMCA1NzcuNSAyNTguNSA1NzcuNSA1NzcuNFYyNDA2SDU3OC40QzI1OS41IDI0MDYgMS&#xa;AyMTQ3LjUgMSAxODI4LjZWNTc4LjR6IiBmaWxsPSIjNzRhYTljIi8+PHBhdGggZD0iTTExMDcu&#xa;MyAyOTkuMWMtMTk4IDAtMzczLjkgMTI3LjMtNDM1LjIgMzE1LjNDNTQ0LjggNjQwLjYgNDM0Lj&#xa;kgNzIwLjIgMzcwLjUgODMzYy05OS4zIDE3MS40LTc2LjYgMzg2LjkgNTYuNCA1MzMuOC00MS4x&#xa;IDEyMy4xLTI3IDI1Ny43IDM4LjYgMzY5LjIgOTguNyAxNzIgMjk3LjMgMjYwLjIgNDkxLjYgMj&#xa;E5LjIgODYuMSA5NyAyMDkuOCAxNTIuMyAzMzkuNiAxNTEuOCAxOTggMCAzNzMuOS0xMjcuMyA0&#xa;MzUuMy0zMTUuMyAxMjcuNS0yNi4zIDIzNy4yLTEwNS45IDMwMS0yMTguNSA5OS45LTE3MS40ID&#xa;c3LjItMzg2LjktNTUuOC01MzMuOXYtLjZjNDEuMS0xMjMuMSAyNy0yNTcuOC0zOC42LTM2OS44&#xa;LTk4LjctMTcxLjQtMjk3LjMtMjU5LjYtNDkxLTIxOC42LTg2LjYtOTYuOC0yMTAuNS0xNTEuOC&#xa;0zNDAuMy0xNTEuMnptMCAxMTcuNS0uNi42Yzc5LjcgMCAxNTYuMyAyNy41IDIxNy42IDc4LjQt&#xa;Mi41IDEuMi03LjQgNC4zLTExIDYuMUw5NTIuOCA3MDkuM2MtMTguNCAxMC40LTI5LjQgMzAtMj&#xa;kuNCA1MS40VjEyNDhsLTE1NS4xLTg5LjRWNzU1LjhjLS4xLTE4Ny4xIDE1MS42LTMzOC45IDMz&#xa;OS0zMzkuMnptNDM0LjIgMTQxLjljMTIxLjYtLjIgMjM0IDY0LjUgMjk0LjcgMTY5LjggMzkuMi&#xa;A2OC42IDUzLjkgMTQ4LjggNDAuNCAyMjYuNS0yLjUtMS44LTcuMy00LjMtMTAuNC02LjFsLTM2&#xa;MC40LTIwOC4yYy0xOC40LTEwLjQtNDEtMTAuNC01OS40IDBMMTAyNCA5ODQuMlY4MDUuNEwxMz&#xa;cyLjcgNjA0YzUxLjMtMjkuNyAxMDkuNS00NS40IDE2OC44LTQ1LjV6TTY1MCA3NDMuNXY0Mjcu&#xa;OWMwIDIxLjQgMTEgNDAuNCAyOS40IDUxLjRsNDIxLjcgMjQzLTE1NS43IDkwTDU5Ny4yIDEzNT&#xa;VjLTE2Mi05My44LTIxNy40LTMwMC45LTEyMy44LTQ2Mi44QzUxMy4xIDgyMy42IDU3NS41IDc3&#xa;MSA2NTAgNzQzLjV6bTgwNy45IDEwNiAzNDguOCAyMDAuOGMxNjIuNSA5My43IDIxNy42IDMwMC&#xa;42IDEyMy44IDQ2Mi44bC42LjZjLTM5LjggNjguNi0xMDIuNCAxMjEuMi0xNzYuNSAxNDguMnYt&#xa;NDI4YzAtMjEuNC0xMS00MS0yOS40LTUxLjRsLTQyMi4zLTI0My43IDE1NS04OS4zek0xMjAxLj&#xa;cgOTk3bDE3Ny44IDEwMi44djIwNS4xbC0xNzcuOCAxMDIuOC0xNzcuOC0xMDIuOHYtMjA1LjFM&#xa;MTIwMS43IDk5N3ptMjc5LjUgMTYxLjYgMTU1LjEgODkuNHY0MDIuMmMwIDE4Ny4zLTE1MiAzMz&#xa;kuMi0zMzkgMzM5LjJ2LS42Yy03OS4xIDAtMTU2LjMtMjcuNi0yMTctNzguNCAyLjUtMS4yIDgt&#xa;NC4zIDExLTYuMWwzNjAuNC0yMDcuNWMxOC40LTEwLjQgMzAtMzAgMjkuNC01MS40bC4xLTQ4Ni&#xa;44ek0xMzgwIDE0MjEuOXYxNzguOGwtMzQ4LjggMjAwLjhjLTE2Mi41IDkzLjEtMzY5LjYgMzgt&#xa;NDYzLjQtMTIzLjdoLjZjLTM5LjgtNjgtNTQtMTQ4LjgtNDAuNS0yMjYuNSAyLjUgMS44IDcuNC&#xa;A0LjMgMTAuNCA2LjFsMzYwLjQgMjA4LjJjMTguNCAxMC40IDQxIDEwLjQgNTkuNCAwbDQyMS45&#xa;LTI0My43eiIgZmlsbD0id2hpdGUiLz48L3N2Zz4=" ID="ID_1487875477" CREATED="1743866218965" MODIFIED="1743866218970"/>
</node>
<node TEXT="${name}-icon.svg" FOLDED="true" ID="ID_510373247" CREATED="1685111823979" MODIFIED="1685111823979">
<attribute_layout VALUE_WIDTH="100 pt"/>
<node TEXT="PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyND&#xa;A2IDI0MDYiPjxwYXRoIGQ9Ik0xIDU3OC40QzEgMjU5LjUgMjU5LjUgMSA1NzguNCAxaDEyNDku&#xa;MWMzMTkgMCA1NzcuNSAyNTguNSA1NzcuNSA1NzcuNFYyNDA2SDU3OC40QzI1OS41IDI0MDYgMS&#xa;AyMTQ3LjUgMSAxODI4LjZWNTc4LjR6IiBmaWxsPSIjNzRhYTljIi8+PHBhdGggZD0iTTExMDcu&#xa;MyAyOTkuMWMtMTk4IDAtMzczLjkgMTI3LjMtNDM1LjIgMzE1LjNDNTQ0LjggNjQwLjYgNDM0Lj&#xa;kgNzIwLjIgMzcwLjUgODMzYy05OS4zIDE3MS40LTc2LjYgMzg2LjkgNTYuNCA1MzMuOC00MS4x&#xa;IDEyMy4xLTI3IDI1Ny43IDM4LjYgMzY5LjIgOTguNyAxNzIgMjk3LjMgMjYwLjIgNDkxLjYgMj&#xa;E5LjIgODYuMSA5NyAyMDkuOCAxNTIuMyAzMzkuNiAxNTEuOCAxOTggMCAzNzMuOS0xMjcuMyA0&#xa;MzUuMy0zMTUuMyAxMjcuNS0yNi4zIDIzNy4yLTEwNS45IDMwMS0yMTguNSA5OS45LTE3MS40ID&#xa;c3LjItMzg2LjktNTUuOC01MzMuOXYtLjZjNDEuMS0xMjMuMSAyNy0yNTcuOC0zOC42LTM2OS44&#xa;LTk4LjctMTcxLjQtMjk3LjMtMjU5LjYtNDkxLTIxOC42LTg2LjYtOTYuOC0yMTAuNS0xNTEuOC&#xa;0zNDAuMy0xNTEuMnptMCAxMTcuNS0uNi42Yzc5LjcgMCAxNTYuMyAyNy41IDIxNy42IDc4LjQt&#xa;Mi41IDEuMi03LjQgNC4zLTExIDYuMUw5NTIuOCA3MDkuM2MtMTguNCAxMC40LTI5LjQgMzAtMj&#xa;kuNCA1MS40VjEyNDhsLTE1NS4xLTg5LjRWNzU1LjhjLS4xLTE4Ny4xIDE1MS42LTMzOC45IDMz&#xa;OS0zMzkuMnptNDM0LjIgMTQxLjljMTIxLjYtLjIgMjM0IDY0LjUgMjk0LjcgMTY5LjggMzkuMi&#xa;A2OC42IDUzLjkgMTQ4LjggNDAuNCAyMjYuNS0yLjUtMS44LTcuMy00LjMtMTAuNC02LjFsLTM2&#xa;MC40LTIwOC4yYy0xOC40LTEwLjQtNDEtMTAuNC01OS40IDBMMTAyNCA5ODQuMlY4MDUuNEwxMz&#xa;cyLjcgNjA0YzUxLjMtMjkuNyAxMDkuNS00NS40IDE2OC44LTQ1LjV6TTY1MCA3NDMuNXY0Mjcu&#xa;OWMwIDIxLjQgMTEgNDAuNCAyOS40IDUxLjRsNDIxLjcgMjQzLTE1NS43IDkwTDU5Ny4yIDEzNT&#xa;VjLTE2Mi05My44LTIxNy40LTMwMC45LTEyMy44LTQ2Mi44QzUxMy4xIDgyMy42IDU3NS41IDc3&#xa;MSA2NTAgNzQzLjV6bTgwNy45IDEwNiAzNDguOCAyMDAuOGMxNjIuNSA5My43IDIxNy42IDMwMC&#xa;42IDEyMy44IDQ2Mi44bC42LjZjLTM5LjggNjguNi0xMDIuNCAxMjEuMi0xNzYuNSAxNDguMnYt&#xa;NDI4YzAtMjEuNC0xMS00MS0yOS40LTUxLjRsLTQyMi4zLTI0My43IDE1NS04OS4zek0xMjAxLj&#xa;cgOTk3bDE3Ny44IDEwMi44djIwNS4xbC0xNzcuOCAxMDIuOC0xNzcuOC0xMDIuOHYtMjA1LjFM&#xa;MTIwMS43IDk5N3ptMjc5LjUgMTYxLjYgMTU1LjEgODkuNHY0MDIuMmMwIDE4Ny4zLTE1MiAzMz&#xa;kuMi0zMzkgMzM5LjJ2LS42Yy03OS4xIDAtMTU2LjMtMjcuNi0yMTctNzguNCAyLjUtMS4yIDgt&#xa;NC4zIDExLTYuMWwzNjAuNC0yMDcuNWMxOC40LTEwLjQgMzAtMzAgMjkuNC01MS40bC4xLTQ4Ni&#xa;44ek0xMzgwIDE0MjEuOXYxNzguOGwtMzQ4LjggMjAwLjhjLTE2Mi41IDkzLjEtMzY5LjYgMzgt&#xa;NDYzLjQtMTIzLjdoLjZjLTM5LjgtNjgtNTQtMTQ4LjgtNDAuNS0yMjYuNSAyLjUgMS44IDcuNC&#xa;A0LjMgMTAuNCA2LjFsMzYwLjQgMjA4LjJjMTguNCAxMC40IDQxIDEwLjQgNTkuNCAwbDQyMS45&#xa;LTI0My43eiIgZmlsbD0id2hpdGUiLz48L3N2Zz4=" ID="ID_1005442849" CREATED="1743866218972" MODIFIED="1743866218974"/>
</node>
</node>
</node>
</map>
